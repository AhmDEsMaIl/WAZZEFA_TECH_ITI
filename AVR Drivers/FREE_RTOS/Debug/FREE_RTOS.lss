
FREE_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007c8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00007c8e  00007d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c2  00800180  00800180  00007e42  2**0
                  ALLOC
  3 .stab         000093f0  00000000  00000000  00007e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000469e  00000000  00000000  00011234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000158d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000235  00000000  00000000  00015ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000039dc  00000000  00000000  00015ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f9  00000000  00000000  000196c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017e2  00000000  00000000  0001acbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0001c4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000366  00000000  00000000  0001c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c46  00000000  00000000  0001ca06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  0002064c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d8 29 	jmp	0x53b0	; 0x53b0 <__vector_1>
       8:	0c 94 0b 2a 	jmp	0x5416	; 0x5416 <__vector_2>
       c:	0c 94 3e 2a 	jmp	0x547c	; 0x547c <__vector_3>
      10:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__vector_4>
      14:	0c 94 4c 27 	jmp	0x4e98	; 0x4e98 <__vector_5>
      18:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__vector_6>
      1c:	0c 94 75 34 	jmp	0x68ea	; 0x68ea <__vector_7>
      20:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <__vector_8>
      24:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__vector_9>
      28:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__vector_10>
      2c:	0c 94 7f 26 	jmp	0x4cfe	; 0x4cfe <__vector_11>
      30:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__vector_12>
      34:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fc e7       	ldi	r31, 0x7C	; 124
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 34       	cpi	r26, 0x42	; 66
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 3d 	call	0x7b0c	; 0x7b0c <main>
      8a:	0c 94 45 3e 	jmp	0x7c8a	; 0x7c8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__subsf3>
     1bc:	0e 94 12 21 	call	0x4224	; 0x4224 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 12 21 	call	0x4224	; 0x4224 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__divdi3>:
     1e8:	a2 e7       	ldi	r26, 0x72	; 114
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__prologue_saves__>
     1f4:	98 2e       	mov	r9, r24
     1f6:	89 2e       	mov	r8, r25
     1f8:	71 2e       	mov	r7, r17
     1fa:	88 e0       	ldi	r24, 0x08	; 8
     1fc:	fe 01       	movw	r30, r28
     1fe:	31 96       	adiw	r30, 0x01	; 1
     200:	df 01       	movw	r26, r30
     202:	68 2e       	mov	r6, r24
     204:	1d 92       	st	X+, r1
     206:	6a 94       	dec	r6
     208:	e9 f7       	brne	.-6      	; 0x204 <__divdi3+0x1c>
     20a:	29 83       	std	Y+1, r18	; 0x01
     20c:	3a 83       	std	Y+2, r19	; 0x02
     20e:	4b 83       	std	Y+3, r20	; 0x03
     210:	5c 83       	std	Y+4, r21	; 0x04
     212:	6d 83       	std	Y+5, r22	; 0x05
     214:	7e 83       	std	Y+6, r23	; 0x06
     216:	9f 82       	std	Y+7, r9	; 0x07
     218:	98 87       	std	Y+8, r25	; 0x08
     21a:	fe 01       	movw	r30, r28
     21c:	39 96       	adiw	r30, 0x09	; 9
     21e:	df 01       	movw	r26, r30
     220:	1d 92       	st	X+, r1
     222:	8a 95       	dec	r24
     224:	e9 f7       	brne	.-6      	; 0x220 <__divdi3+0x38>
     226:	a9 86       	std	Y+9, r10	; 0x09
     228:	ba 86       	std	Y+10, r11	; 0x0a
     22a:	cb 86       	std	Y+11, r12	; 0x0b
     22c:	dc 86       	std	Y+12, r13	; 0x0c
     22e:	ed 86       	std	Y+13, r14	; 0x0d
     230:	fe 86       	std	Y+14, r15	; 0x0e
     232:	0f 87       	std	Y+15, r16	; 0x0f
     234:	18 8b       	std	Y+16, r17	; 0x10
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	9e 81       	ldd	r25, Y+6	; 0x06
     23a:	af 81       	ldd	r26, Y+7	; 0x07
     23c:	b8 85       	ldd	r27, Y+8	; 0x08
     23e:	b7 fd       	sbrc	r27, 7
     240:	07 c0       	rjmp	.+14     	; 0x250 <__divdi3+0x68>
     242:	e1 96       	adiw	r28, 0x31	; 49
     244:	1c ae       	std	Y+60, r1	; 0x3c
     246:	1d ae       	std	Y+61, r1	; 0x3d
     248:	1e ae       	std	Y+62, r1	; 0x3e
     24a:	1f ae       	std	Y+63, r1	; 0x3f
     24c:	e1 97       	sbiw	r28, 0x31	; 49
     24e:	64 c0       	rjmp	.+200    	; 0x318 <__divdi3+0x130>
     250:	21 95       	neg	r18
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	12 16       	cp	r1, r18
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x72>
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	31 95       	neg	r19
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	13 16       	cp	r1, r19
     260:	08 f0       	brcs	.+2      	; 0x264 <__divdi3+0x7c>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	b3 2f       	mov	r27, r19
     266:	b8 1b       	sub	r27, r24
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	3b 17       	cp	r19, r27
     26c:	08 f0       	brcs	.+2      	; 0x270 <__divdi3+0x88>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	98 2b       	or	r25, r24
     272:	41 95       	neg	r20
     274:	31 e0       	ldi	r19, 0x01	; 1
     276:	14 16       	cp	r1, r20
     278:	08 f0       	brcs	.+2      	; 0x27c <__divdi3+0x94>
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	a4 2f       	mov	r26, r20
     27e:	a9 1b       	sub	r26, r25
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	4a 17       	cp	r20, r26
     284:	08 f0       	brcs	.+2      	; 0x288 <__divdi3+0xa0>
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	38 2b       	or	r19, r24
     28a:	51 95       	neg	r21
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	15 16       	cp	r1, r21
     290:	08 f0       	brcs	.+2      	; 0x294 <__divdi3+0xac>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	f5 2f       	mov	r31, r21
     296:	f3 1b       	sub	r31, r19
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	5f 17       	cp	r21, r31
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <__divdi3+0xb8>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	98 2b       	or	r25, r24
     2a2:	61 95       	neg	r22
     2a4:	31 e0       	ldi	r19, 0x01	; 1
     2a6:	16 16       	cp	r1, r22
     2a8:	08 f0       	brcs	.+2      	; 0x2ac <__divdi3+0xc4>
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	e6 2f       	mov	r30, r22
     2ae:	e9 1b       	sub	r30, r25
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	6e 17       	cp	r22, r30
     2b4:	08 f0       	brcs	.+2      	; 0x2b8 <__divdi3+0xd0>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	38 2b       	or	r19, r24
     2ba:	71 95       	neg	r23
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	17 16       	cp	r1, r23
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <__divdi3+0xdc>
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	57 2f       	mov	r21, r23
     2c6:	53 1b       	sub	r21, r19
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	75 17       	cp	r23, r21
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <__divdi3+0xe8>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	48 2b       	or	r20, r24
     2d2:	89 2d       	mov	r24, r9
     2d4:	81 95       	neg	r24
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	18 16       	cp	r1, r24
     2da:	08 f0       	brcs	.+2      	; 0x2de <__divdi3+0xf6>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	68 2e       	mov	r6, r24
     2e0:	64 1a       	sub	r6, r20
     2e2:	46 2d       	mov	r20, r6
     2e4:	31 e0       	ldi	r19, 0x01	; 1
     2e6:	86 15       	cp	r24, r6
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <__divdi3+0x104>
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	93 2b       	or	r25, r19
     2ee:	88 2d       	mov	r24, r8
     2f0:	81 95       	neg	r24
     2f2:	89 1b       	sub	r24, r25
     2f4:	29 83       	std	Y+1, r18	; 0x01
     2f6:	ba 83       	std	Y+2, r27	; 0x02
     2f8:	ab 83       	std	Y+3, r26	; 0x03
     2fa:	fc 83       	std	Y+4, r31	; 0x04
     2fc:	ed 83       	std	Y+5, r30	; 0x05
     2fe:	5e 83       	std	Y+6, r21	; 0x06
     300:	4f 83       	std	Y+7, r20	; 0x07
     302:	88 87       	std	Y+8, r24	; 0x08
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	3f ef       	ldi	r19, 0xFF	; 255
     308:	4f ef       	ldi	r20, 0xFF	; 255
     30a:	5f ef       	ldi	r21, 0xFF	; 255
     30c:	e1 96       	adiw	r28, 0x31	; 49
     30e:	2c af       	std	Y+60, r18	; 0x3c
     310:	3d af       	std	Y+61, r19	; 0x3d
     312:	4e af       	std	Y+62, r20	; 0x3e
     314:	5f af       	std	Y+63, r21	; 0x3f
     316:	e1 97       	sbiw	r28, 0x31	; 49
     318:	8d 85       	ldd	r24, Y+13	; 0x0d
     31a:	9e 85       	ldd	r25, Y+14	; 0x0e
     31c:	af 85       	ldd	r26, Y+15	; 0x0f
     31e:	b8 89       	ldd	r27, Y+16	; 0x10
     320:	b7 ff       	sbrs	r27, 7
     322:	6a c0       	rjmp	.+212    	; 0x3f8 <__divdi3+0x210>
     324:	e1 96       	adiw	r28, 0x31	; 49
     326:	4c ad       	ldd	r20, Y+60	; 0x3c
     328:	5d ad       	ldd	r21, Y+61	; 0x3d
     32a:	6e ad       	ldd	r22, Y+62	; 0x3e
     32c:	7f ad       	ldd	r23, Y+63	; 0x3f
     32e:	e1 97       	sbiw	r28, 0x31	; 49
     330:	40 95       	com	r20
     332:	50 95       	com	r21
     334:	60 95       	com	r22
     336:	70 95       	com	r23
     338:	e1 96       	adiw	r28, 0x31	; 49
     33a:	4c af       	std	Y+60, r20	; 0x3c
     33c:	5d af       	std	Y+61, r21	; 0x3d
     33e:	6e af       	std	Y+62, r22	; 0x3e
     340:	7f af       	std	Y+63, r23	; 0x3f
     342:	e1 97       	sbiw	r28, 0x31	; 49
     344:	a1 94       	neg	r10
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	1a 14       	cp	r1, r10
     34a:	08 f0       	brcs	.+2      	; 0x34e <__divdi3+0x166>
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	b1 94       	neg	r11
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	1b 14       	cp	r1, r11
     354:	08 f0       	brcs	.+2      	; 0x358 <__divdi3+0x170>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	6b 2d       	mov	r22, r11
     35a:	68 1b       	sub	r22, r24
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	b6 16       	cp	r11, r22
     360:	08 f0       	brcs	.+2      	; 0x364 <__divdi3+0x17c>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	98 2b       	or	r25, r24
     366:	c1 94       	neg	r12
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	1c 14       	cp	r1, r12
     36c:	08 f0       	brcs	.+2      	; 0x370 <__divdi3+0x188>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	5c 2d       	mov	r21, r12
     372:	59 1b       	sub	r21, r25
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	c5 16       	cp	r12, r21
     378:	08 f0       	brcs	.+2      	; 0x37c <__divdi3+0x194>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	28 2b       	or	r18, r24
     37e:	d1 94       	neg	r13
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	1d 14       	cp	r1, r13
     384:	08 f0       	brcs	.+2      	; 0x388 <__divdi3+0x1a0>
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	4d 2d       	mov	r20, r13
     38a:	42 1b       	sub	r20, r18
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	d4 16       	cp	r13, r20
     390:	08 f0       	brcs	.+2      	; 0x394 <__divdi3+0x1ac>
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	98 2b       	or	r25, r24
     396:	e1 94       	neg	r14
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	1e 14       	cp	r1, r14
     39c:	08 f0       	brcs	.+2      	; 0x3a0 <__divdi3+0x1b8>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	3e 2d       	mov	r19, r14
     3a2:	39 1b       	sub	r19, r25
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	e3 16       	cp	r14, r19
     3a8:	08 f0       	brcs	.+2      	; 0x3ac <__divdi3+0x1c4>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	28 2b       	or	r18, r24
     3ae:	f1 94       	neg	r15
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	1f 14       	cp	r1, r15
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <__divdi3+0x1d0>
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	7f 2d       	mov	r23, r15
     3ba:	72 1b       	sub	r23, r18
     3bc:	27 2f       	mov	r18, r23
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	f7 16       	cp	r15, r23
     3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__divdi3+0x1de>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	98 2b       	or	r25, r24
     3c8:	01 95       	neg	r16
     3ca:	11 e0       	ldi	r17, 0x01	; 1
     3cc:	10 16       	cp	r1, r16
     3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__divdi3+0x1ea>
     3d0:	10 e0       	ldi	r17, 0x00	; 0
     3d2:	80 2f       	mov	r24, r16
     3d4:	89 1b       	sub	r24, r25
     3d6:	98 2f       	mov	r25, r24
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	09 17       	cp	r16, r25
     3dc:	08 f0       	brcs	.+2      	; 0x3e0 <__divdi3+0x1f8>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	18 2b       	or	r17, r24
     3e2:	87 2d       	mov	r24, r7
     3e4:	81 95       	neg	r24
     3e6:	81 1b       	sub	r24, r17
     3e8:	a9 86       	std	Y+9, r10	; 0x09
     3ea:	6a 87       	std	Y+10, r22	; 0x0a
     3ec:	5b 87       	std	Y+11, r21	; 0x0b
     3ee:	4c 87       	std	Y+12, r20	; 0x0c
     3f0:	3d 87       	std	Y+13, r19	; 0x0d
     3f2:	2e 87       	std	Y+14, r18	; 0x0e
     3f4:	9f 87       	std	Y+15, r25	; 0x0f
     3f6:	88 8b       	std	Y+16, r24	; 0x10
     3f8:	99 81       	ldd	r25, Y+1	; 0x01
     3fa:	2a 81       	ldd	r18, Y+2	; 0x02
     3fc:	3b 81       	ldd	r19, Y+3	; 0x03
     3fe:	4c 81       	ldd	r20, Y+4	; 0x04
     400:	5d 81       	ldd	r21, Y+5	; 0x05
     402:	6e 81       	ldd	r22, Y+6	; 0x06
     404:	7f 81       	ldd	r23, Y+7	; 0x07
     406:	a8 85       	ldd	r26, Y+8	; 0x08
     408:	b9 85       	ldd	r27, Y+9	; 0x09
     40a:	1a 85       	ldd	r17, Y+10	; 0x0a
     40c:	0b 85       	ldd	r16, Y+11	; 0x0b
     40e:	fc 84       	ldd	r15, Y+12	; 0x0c
     410:	ed 84       	ldd	r14, Y+13	; 0x0d
     412:	de 84       	ldd	r13, Y+14	; 0x0e
     414:	cf 84       	ldd	r12, Y+15	; 0x0f
     416:	b8 88       	ldd	r11, Y+16	; 0x10
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	e1 e1       	ldi	r30, 0x11	; 17
     41c:	8e 2e       	mov	r8, r30
     41e:	91 2c       	mov	r9, r1
     420:	8c 0e       	add	r8, r28
     422:	9d 1e       	adc	r9, r29
     424:	f4 01       	movw	r30, r8
     426:	68 2e       	mov	r6, r24
     428:	11 92       	st	Z+, r1
     42a:	6a 94       	dec	r6
     42c:	e9 f7       	brne	.-6      	; 0x428 <__divdi3+0x240>
     42e:	99 8b       	std	Y+17, r25	; 0x11
     430:	2a 8b       	std	Y+18, r18	; 0x12
     432:	3b 8b       	std	Y+19, r19	; 0x13
     434:	4c 8b       	std	Y+20, r20	; 0x14
     436:	5d 8b       	std	Y+21, r21	; 0x15
     438:	6e 8b       	std	Y+22, r22	; 0x16
     43a:	7f 8b       	std	Y+23, r23	; 0x17
     43c:	a8 8f       	std	Y+24, r26	; 0x18
     43e:	9e 01       	movw	r18, r28
     440:	27 5e       	subi	r18, 0xE7	; 231
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	f9 01       	movw	r30, r18
     446:	11 92       	st	Z+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <__divdi3+0x25e>
     44c:	b9 8f       	std	Y+25, r27	; 0x19
     44e:	1a 8f       	std	Y+26, r17	; 0x1a
     450:	0b 8f       	std	Y+27, r16	; 0x1b
     452:	fc 8e       	std	Y+28, r15	; 0x1c
     454:	ed 8e       	std	Y+29, r14	; 0x1d
     456:	de 8e       	std	Y+30, r13	; 0x1e
     458:	cf 8e       	std	Y+31, r12	; 0x1f
     45a:	b8 a2       	std	Y+32, r11	; 0x20
     45c:	29 8c       	ldd	r2, Y+25	; 0x19
     45e:	3a 8c       	ldd	r3, Y+26	; 0x1a
     460:	4b 8c       	ldd	r4, Y+27	; 0x1b
     462:	5c 8c       	ldd	r5, Y+28	; 0x1c
     464:	ed 8c       	ldd	r14, Y+29	; 0x1d
     466:	fe 8c       	ldd	r15, Y+30	; 0x1e
     468:	0f 8d       	ldd	r16, Y+31	; 0x1f
     46a:	18 a1       	ldd	r17, Y+32	; 0x20
     46c:	69 88       	ldd	r6, Y+17	; 0x11
     46e:	7a 88       	ldd	r7, Y+18	; 0x12
     470:	8b 88       	ldd	r8, Y+19	; 0x13
     472:	9c 88       	ldd	r9, Y+20	; 0x14
     474:	21 96       	adiw	r28, 0x01	; 1
     476:	6c ae       	std	Y+60, r6	; 0x3c
     478:	7d ae       	std	Y+61, r7	; 0x3d
     47a:	8e ae       	std	Y+62, r8	; 0x3e
     47c:	9f ae       	std	Y+63, r9	; 0x3f
     47e:	21 97       	sbiw	r28, 0x01	; 1
     480:	6d 88       	ldd	r6, Y+21	; 0x15
     482:	7e 88       	ldd	r7, Y+22	; 0x16
     484:	8f 88       	ldd	r8, Y+23	; 0x17
     486:	98 8c       	ldd	r9, Y+24	; 0x18
     488:	e1 14       	cp	r14, r1
     48a:	f1 04       	cpc	r15, r1
     48c:	01 05       	cpc	r16, r1
     48e:	11 05       	cpc	r17, r1
     490:	09 f0       	breq	.+2      	; 0x494 <__divdi3+0x2ac>
     492:	d9 c3       	rjmp	.+1970   	; 0xc46 <__stack+0x3e7>
     494:	62 14       	cp	r6, r2
     496:	73 04       	cpc	r7, r3
     498:	84 04       	cpc	r8, r4
     49a:	95 04       	cpc	r9, r5
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <__divdi3+0x2b8>
     49e:	57 c1       	rjmp	.+686    	; 0x74e <__divdi3+0x566>
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	20 16       	cp	r2, r16
     4a4:	00 e0       	ldi	r16, 0x00	; 0
     4a6:	30 06       	cpc	r3, r16
     4a8:	01 e0       	ldi	r16, 0x01	; 1
     4aa:	40 06       	cpc	r4, r16
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	50 06       	cpc	r5, r16
     4b0:	88 f4       	brcc	.+34     	; 0x4d4 <__divdi3+0x2ec>
     4b2:	1f ef       	ldi	r17, 0xFF	; 255
     4b4:	21 16       	cp	r2, r17
     4b6:	31 04       	cpc	r3, r1
     4b8:	41 04       	cpc	r4, r1
     4ba:	51 04       	cpc	r5, r1
     4bc:	39 f0       	breq	.+14     	; 0x4cc <__divdi3+0x2e4>
     4be:	30 f0       	brcs	.+12     	; 0x4cc <__divdi3+0x2e4>
     4c0:	48 e0       	ldi	r20, 0x08	; 8
     4c2:	e4 2e       	mov	r14, r20
     4c4:	f1 2c       	mov	r15, r1
     4c6:	01 2d       	mov	r16, r1
     4c8:	11 2d       	mov	r17, r1
     4ca:	18 c0       	rjmp	.+48     	; 0x4fc <__divdi3+0x314>
     4cc:	ee 24       	eor	r14, r14
     4ce:	ff 24       	eor	r15, r15
     4d0:	87 01       	movw	r16, r14
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__divdi3+0x314>
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	22 16       	cp	r2, r18
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	32 06       	cpc	r3, r18
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	42 06       	cpc	r4, r18
     4e0:	21 e0       	ldi	r18, 0x01	; 1
     4e2:	52 06       	cpc	r5, r18
     4e4:	30 f0       	brcs	.+12     	; 0x4f2 <__divdi3+0x30a>
     4e6:	38 e1       	ldi	r19, 0x18	; 24
     4e8:	e3 2e       	mov	r14, r19
     4ea:	f1 2c       	mov	r15, r1
     4ec:	01 2d       	mov	r16, r1
     4ee:	11 2d       	mov	r17, r1
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__divdi3+0x314>
     4f2:	20 e1       	ldi	r18, 0x10	; 16
     4f4:	e2 2e       	mov	r14, r18
     4f6:	f1 2c       	mov	r15, r1
     4f8:	01 2d       	mov	r16, r1
     4fa:	11 2d       	mov	r17, r1
     4fc:	d2 01       	movw	r26, r4
     4fe:	c1 01       	movw	r24, r2
     500:	0e 2c       	mov	r0, r14
     502:	04 c0       	rjmp	.+8      	; 0x50c <__divdi3+0x324>
     504:	b6 95       	lsr	r27
     506:	a7 95       	ror	r26
     508:	97 95       	ror	r25
     50a:	87 95       	ror	r24
     50c:	0a 94       	dec	r0
     50e:	d2 f7       	brpl	.-12     	; 0x504 <__divdi3+0x31c>
     510:	83 59       	subi	r24, 0x93	; 147
     512:	9f 4f       	sbci	r25, 0xFF	; 255
     514:	dc 01       	movw	r26, r24
     516:	2c 91       	ld	r18, X
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	8e 19       	sub	r24, r14
     522:	9f 09       	sbc	r25, r15
     524:	a0 0b       	sbc	r26, r16
     526:	b1 0b       	sbc	r27, r17
     528:	7c 01       	movw	r14, r24
     52a:	8d 01       	movw	r16, r26
     52c:	e2 1a       	sub	r14, r18
     52e:	f1 08       	sbc	r15, r1
     530:	01 09       	sbc	r16, r1
     532:	11 09       	sbc	r17, r1
     534:	e1 14       	cp	r14, r1
     536:	f1 04       	cpc	r15, r1
     538:	01 05       	cpc	r16, r1
     53a:	11 05       	cpc	r17, r1
     53c:	d1 f1       	breq	.+116    	; 0x5b2 <__divdi3+0x3ca>
     53e:	0e 2c       	mov	r0, r14
     540:	04 c0       	rjmp	.+8      	; 0x54a <__divdi3+0x362>
     542:	22 0c       	add	r2, r2
     544:	33 1c       	adc	r3, r3
     546:	44 1c       	adc	r4, r4
     548:	55 1c       	adc	r5, r5
     54a:	0a 94       	dec	r0
     54c:	d2 f7       	brpl	.-12     	; 0x542 <__divdi3+0x35a>
     54e:	a4 01       	movw	r20, r8
     550:	93 01       	movw	r18, r6
     552:	0e 2c       	mov	r0, r14
     554:	04 c0       	rjmp	.+8      	; 0x55e <__divdi3+0x376>
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	44 1f       	adc	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	0a 94       	dec	r0
     560:	d2 f7       	brpl	.-12     	; 0x556 <__divdi3+0x36e>
     562:	80 e2       	ldi	r24, 0x20	; 32
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	8e 19       	sub	r24, r14
     568:	9f 09       	sbc	r25, r15
     56a:	21 96       	adiw	r28, 0x01	; 1
     56c:	6c ac       	ldd	r6, Y+60	; 0x3c
     56e:	7d ac       	ldd	r7, Y+61	; 0x3d
     570:	8e ac       	ldd	r8, Y+62	; 0x3e
     572:	9f ac       	ldd	r9, Y+63	; 0x3f
     574:	21 97       	sbiw	r28, 0x01	; 1
     576:	04 c0       	rjmp	.+8      	; 0x580 <__divdi3+0x398>
     578:	96 94       	lsr	r9
     57a:	87 94       	ror	r8
     57c:	77 94       	ror	r7
     57e:	67 94       	ror	r6
     580:	8a 95       	dec	r24
     582:	d2 f7       	brpl	.-12     	; 0x578 <__divdi3+0x390>
     584:	62 2a       	or	r6, r18
     586:	73 2a       	or	r7, r19
     588:	84 2a       	or	r8, r20
     58a:	95 2a       	or	r9, r21
     58c:	21 96       	adiw	r28, 0x01	; 1
     58e:	ac ac       	ldd	r10, Y+60	; 0x3c
     590:	bd ac       	ldd	r11, Y+61	; 0x3d
     592:	ce ac       	ldd	r12, Y+62	; 0x3e
     594:	df ac       	ldd	r13, Y+63	; 0x3f
     596:	21 97       	sbiw	r28, 0x01	; 1
     598:	04 c0       	rjmp	.+8      	; 0x5a2 <__divdi3+0x3ba>
     59a:	aa 0c       	add	r10, r10
     59c:	bb 1c       	adc	r11, r11
     59e:	cc 1c       	adc	r12, r12
     5a0:	dd 1c       	adc	r13, r13
     5a2:	ea 94       	dec	r14
     5a4:	d2 f7       	brpl	.-12     	; 0x59a <__divdi3+0x3b2>
     5a6:	21 96       	adiw	r28, 0x01	; 1
     5a8:	ac ae       	std	Y+60, r10	; 0x3c
     5aa:	bd ae       	std	Y+61, r11	; 0x3d
     5ac:	ce ae       	std	Y+62, r12	; 0x3e
     5ae:	df ae       	std	Y+63, r13	; 0x3f
     5b0:	21 97       	sbiw	r28, 0x01	; 1
     5b2:	62 01       	movw	r12, r4
     5b4:	ee 24       	eor	r14, r14
     5b6:	ff 24       	eor	r15, r15
     5b8:	29 96       	adiw	r28, 0x09	; 9
     5ba:	cc ae       	std	Y+60, r12	; 0x3c
     5bc:	dd ae       	std	Y+61, r13	; 0x3d
     5be:	ee ae       	std	Y+62, r14	; 0x3e
     5c0:	ff ae       	std	Y+63, r15	; 0x3f
     5c2:	29 97       	sbiw	r28, 0x09	; 9
     5c4:	92 01       	movw	r18, r4
     5c6:	81 01       	movw	r16, r2
     5c8:	20 70       	andi	r18, 0x00	; 0
     5ca:	30 70       	andi	r19, 0x00	; 0
     5cc:	2d 96       	adiw	r28, 0x0d	; 13
     5ce:	0c af       	std	Y+60, r16	; 0x3c
     5d0:	1d af       	std	Y+61, r17	; 0x3d
     5d2:	2e af       	std	Y+62, r18	; 0x3e
     5d4:	3f af       	std	Y+63, r19	; 0x3f
     5d6:	2d 97       	sbiw	r28, 0x0d	; 13
     5d8:	c4 01       	movw	r24, r8
     5da:	b3 01       	movw	r22, r6
     5dc:	a7 01       	movw	r20, r14
     5de:	96 01       	movw	r18, r12
     5e0:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     5e4:	7b 01       	movw	r14, r22
     5e6:	8c 01       	movw	r16, r24
     5e8:	c4 01       	movw	r24, r8
     5ea:	b3 01       	movw	r22, r6
     5ec:	29 96       	adiw	r28, 0x09	; 9
     5ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     5f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     5f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     5f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     5f6:	29 97       	sbiw	r28, 0x09	; 9
     5f8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     5fc:	c9 01       	movw	r24, r18
     5fe:	da 01       	movw	r26, r20
     600:	3c 01       	movw	r6, r24
     602:	4d 01       	movw	r8, r26
     604:	c4 01       	movw	r24, r8
     606:	b3 01       	movw	r22, r6
     608:	2d 96       	adiw	r28, 0x0d	; 13
     60a:	2c ad       	ldd	r18, Y+60	; 0x3c
     60c:	3d ad       	ldd	r19, Y+61	; 0x3d
     60e:	4e ad       	ldd	r20, Y+62	; 0x3e
     610:	5f ad       	ldd	r21, Y+63	; 0x3f
     612:	2d 97       	sbiw	r28, 0x0d	; 13
     614:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	87 01       	movw	r16, r14
     61e:	ff 24       	eor	r15, r15
     620:	ee 24       	eor	r14, r14
     622:	21 96       	adiw	r28, 0x01	; 1
     624:	ac ac       	ldd	r10, Y+60	; 0x3c
     626:	bd ac       	ldd	r11, Y+61	; 0x3d
     628:	ce ac       	ldd	r12, Y+62	; 0x3e
     62a:	df ac       	ldd	r13, Y+63	; 0x3f
     62c:	21 97       	sbiw	r28, 0x01	; 1
     62e:	c6 01       	movw	r24, r12
     630:	aa 27       	eor	r26, r26
     632:	bb 27       	eor	r27, r27
     634:	57 01       	movw	r10, r14
     636:	68 01       	movw	r12, r16
     638:	a8 2a       	or	r10, r24
     63a:	b9 2a       	or	r11, r25
     63c:	ca 2a       	or	r12, r26
     63e:	db 2a       	or	r13, r27
     640:	a2 16       	cp	r10, r18
     642:	b3 06       	cpc	r11, r19
     644:	c4 06       	cpc	r12, r20
     646:	d5 06       	cpc	r13, r21
     648:	e0 f4       	brcc	.+56     	; 0x682 <__divdi3+0x49a>
     64a:	08 94       	sec
     64c:	61 08       	sbc	r6, r1
     64e:	71 08       	sbc	r7, r1
     650:	81 08       	sbc	r8, r1
     652:	91 08       	sbc	r9, r1
     654:	a2 0c       	add	r10, r2
     656:	b3 1c       	adc	r11, r3
     658:	c4 1c       	adc	r12, r4
     65a:	d5 1c       	adc	r13, r5
     65c:	a2 14       	cp	r10, r2
     65e:	b3 04       	cpc	r11, r3
     660:	c4 04       	cpc	r12, r4
     662:	d5 04       	cpc	r13, r5
     664:	70 f0       	brcs	.+28     	; 0x682 <__divdi3+0x49a>
     666:	a2 16       	cp	r10, r18
     668:	b3 06       	cpc	r11, r19
     66a:	c4 06       	cpc	r12, r20
     66c:	d5 06       	cpc	r13, r21
     66e:	48 f4       	brcc	.+18     	; 0x682 <__divdi3+0x49a>
     670:	08 94       	sec
     672:	61 08       	sbc	r6, r1
     674:	71 08       	sbc	r7, r1
     676:	81 08       	sbc	r8, r1
     678:	91 08       	sbc	r9, r1
     67a:	a2 0c       	add	r10, r2
     67c:	b3 1c       	adc	r11, r3
     67e:	c4 1c       	adc	r12, r4
     680:	d5 1c       	adc	r13, r5
     682:	a2 1a       	sub	r10, r18
     684:	b3 0a       	sbc	r11, r19
     686:	c4 0a       	sbc	r12, r20
     688:	d5 0a       	sbc	r13, r21
     68a:	c6 01       	movw	r24, r12
     68c:	b5 01       	movw	r22, r10
     68e:	29 96       	adiw	r28, 0x09	; 9
     690:	2c ad       	ldd	r18, Y+60	; 0x3c
     692:	3d ad       	ldd	r19, Y+61	; 0x3d
     694:	4e ad       	ldd	r20, Y+62	; 0x3e
     696:	5f ad       	ldd	r21, Y+63	; 0x3f
     698:	29 97       	sbiw	r28, 0x09	; 9
     69a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     69e:	7b 01       	movw	r14, r22
     6a0:	8c 01       	movw	r16, r24
     6a2:	c6 01       	movw	r24, r12
     6a4:	b5 01       	movw	r22, r10
     6a6:	29 96       	adiw	r28, 0x09	; 9
     6a8:	2c ad       	ldd	r18, Y+60	; 0x3c
     6aa:	3d ad       	ldd	r19, Y+61	; 0x3d
     6ac:	4e ad       	ldd	r20, Y+62	; 0x3e
     6ae:	5f ad       	ldd	r21, Y+63	; 0x3f
     6b0:	29 97       	sbiw	r28, 0x09	; 9
     6b2:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     6b6:	c9 01       	movw	r24, r18
     6b8:	da 01       	movw	r26, r20
     6ba:	5c 01       	movw	r10, r24
     6bc:	6d 01       	movw	r12, r26
     6be:	c6 01       	movw	r24, r12
     6c0:	b5 01       	movw	r22, r10
     6c2:	2d 96       	adiw	r28, 0x0d	; 13
     6c4:	2c ad       	ldd	r18, Y+60	; 0x3c
     6c6:	3d ad       	ldd	r19, Y+61	; 0x3d
     6c8:	4e ad       	ldd	r20, Y+62	; 0x3e
     6ca:	5f ad       	ldd	r21, Y+63	; 0x3f
     6cc:	2d 97       	sbiw	r28, 0x0d	; 13
     6ce:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	87 01       	movw	r16, r14
     6d8:	ff 24       	eor	r15, r15
     6da:	ee 24       	eor	r14, r14
     6dc:	21 96       	adiw	r28, 0x01	; 1
     6de:	8c ad       	ldd	r24, Y+60	; 0x3c
     6e0:	9d ad       	ldd	r25, Y+61	; 0x3d
     6e2:	ae ad       	ldd	r26, Y+62	; 0x3e
     6e4:	bf ad       	ldd	r27, Y+63	; 0x3f
     6e6:	21 97       	sbiw	r28, 0x01	; 1
     6e8:	a0 70       	andi	r26, 0x00	; 0
     6ea:	b0 70       	andi	r27, 0x00	; 0
     6ec:	e8 2a       	or	r14, r24
     6ee:	f9 2a       	or	r15, r25
     6f0:	0a 2b       	or	r16, r26
     6f2:	1b 2b       	or	r17, r27
     6f4:	e2 16       	cp	r14, r18
     6f6:	f3 06       	cpc	r15, r19
     6f8:	04 07       	cpc	r16, r20
     6fa:	15 07       	cpc	r17, r21
     6fc:	c0 f4       	brcc	.+48     	; 0x72e <__divdi3+0x546>
     6fe:	08 94       	sec
     700:	a1 08       	sbc	r10, r1
     702:	b1 08       	sbc	r11, r1
     704:	c1 08       	sbc	r12, r1
     706:	d1 08       	sbc	r13, r1
     708:	e2 0c       	add	r14, r2
     70a:	f3 1c       	adc	r15, r3
     70c:	04 1d       	adc	r16, r4
     70e:	15 1d       	adc	r17, r5
     710:	e2 14       	cp	r14, r2
     712:	f3 04       	cpc	r15, r3
     714:	04 05       	cpc	r16, r4
     716:	15 05       	cpc	r17, r5
     718:	50 f0       	brcs	.+20     	; 0x72e <__divdi3+0x546>
     71a:	e2 16       	cp	r14, r18
     71c:	f3 06       	cpc	r15, r19
     71e:	04 07       	cpc	r16, r20
     720:	15 07       	cpc	r17, r21
     722:	28 f4       	brcc	.+10     	; 0x72e <__divdi3+0x546>
     724:	08 94       	sec
     726:	a1 08       	sbc	r10, r1
     728:	b1 08       	sbc	r11, r1
     72a:	c1 08       	sbc	r12, r1
     72c:	d1 08       	sbc	r13, r1
     72e:	d3 01       	movw	r26, r6
     730:	99 27       	eor	r25, r25
     732:	88 27       	eor	r24, r24
     734:	86 01       	movw	r16, r12
     736:	75 01       	movw	r14, r10
     738:	e8 2a       	or	r14, r24
     73a:	f9 2a       	or	r15, r25
     73c:	0a 2b       	or	r16, r26
     73e:	1b 2b       	or	r17, r27
     740:	25 96       	adiw	r28, 0x05	; 5
     742:	ec ae       	std	Y+60, r14	; 0x3c
     744:	fd ae       	std	Y+61, r15	; 0x3d
     746:	0e af       	std	Y+62, r16	; 0x3e
     748:	1f af       	std	Y+63, r17	; 0x3f
     74a:	25 97       	sbiw	r28, 0x05	; 5
     74c:	eb c4       	rjmp	.+2518   	; 0x1124 <__stack+0x8c5>
     74e:	21 14       	cp	r2, r1
     750:	31 04       	cpc	r3, r1
     752:	41 04       	cpc	r4, r1
     754:	51 04       	cpc	r5, r1
     756:	71 f4       	brne	.+28     	; 0x774 <__divdi3+0x58c>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     76c:	c9 01       	movw	r24, r18
     76e:	da 01       	movw	r26, r20
     770:	1c 01       	movw	r2, r24
     772:	2d 01       	movw	r4, r26
     774:	00 e0       	ldi	r16, 0x00	; 0
     776:	20 16       	cp	r2, r16
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	30 06       	cpc	r3, r16
     77c:	01 e0       	ldi	r16, 0x01	; 1
     77e:	40 06       	cpc	r4, r16
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	50 06       	cpc	r5, r16
     784:	88 f4       	brcc	.+34     	; 0x7a8 <__divdi3+0x5c0>
     786:	1f ef       	ldi	r17, 0xFF	; 255
     788:	21 16       	cp	r2, r17
     78a:	31 04       	cpc	r3, r1
     78c:	41 04       	cpc	r4, r1
     78e:	51 04       	cpc	r5, r1
     790:	31 f0       	breq	.+12     	; 0x79e <__divdi3+0x5b6>
     792:	28 f0       	brcs	.+10     	; 0x79e <__divdi3+0x5b6>
     794:	48 e0       	ldi	r20, 0x08	; 8
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	17 c0       	rjmp	.+46     	; 0x7cc <__divdi3+0x5e4>
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	12 c0       	rjmp	.+36     	; 0x7cc <__divdi3+0x5e4>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	22 16       	cp	r2, r18
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	32 06       	cpc	r3, r18
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	42 06       	cpc	r4, r18
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	52 06       	cpc	r5, r18
     7b8:	28 f0       	brcs	.+10     	; 0x7c4 <__divdi3+0x5dc>
     7ba:	48 e1       	ldi	r20, 0x18	; 24
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__divdi3+0x5e4>
     7c4:	40 e1       	ldi	r20, 0x10	; 16
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	d2 01       	movw	r26, r4
     7ce:	c1 01       	movw	r24, r2
     7d0:	04 2e       	mov	r0, r20
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__divdi3+0x5f4>
     7d4:	b6 95       	lsr	r27
     7d6:	a7 95       	ror	r26
     7d8:	97 95       	ror	r25
     7da:	87 95       	ror	r24
     7dc:	0a 94       	dec	r0
     7de:	d2 f7       	brpl	.-12     	; 0x7d4 <__divdi3+0x5ec>
     7e0:	83 59       	subi	r24, 0x93	; 147
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	dc 01       	movw	r26, r24
     7e6:	2c 91       	ld	r18, X
     7e8:	e0 e2       	ldi	r30, 0x20	; 32
     7ea:	ee 2e       	mov	r14, r30
     7ec:	f1 2c       	mov	r15, r1
     7ee:	01 2d       	mov	r16, r1
     7f0:	11 2d       	mov	r17, r1
     7f2:	d8 01       	movw	r26, r16
     7f4:	c7 01       	movw	r24, r14
     7f6:	84 1b       	sub	r24, r20
     7f8:	95 0b       	sbc	r25, r21
     7fa:	a6 0b       	sbc	r26, r22
     7fc:	b7 0b       	sbc	r27, r23
     7fe:	82 1b       	sub	r24, r18
     800:	91 09       	sbc	r25, r1
     802:	a1 09       	sbc	r26, r1
     804:	b1 09       	sbc	r27, r1
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	a1 05       	cpc	r26, r1
     80a:	b1 05       	cpc	r27, r1
     80c:	61 f4       	brne	.+24     	; 0x826 <__divdi3+0x63e>
     80e:	64 01       	movw	r12, r8
     810:	53 01       	movw	r10, r6
     812:	a2 18       	sub	r10, r2
     814:	b3 08       	sbc	r11, r3
     816:	c4 08       	sbc	r12, r4
     818:	d5 08       	sbc	r13, r5
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	63 2e       	mov	r6, r19
     81e:	71 2c       	mov	r7, r1
     820:	81 2c       	mov	r8, r1
     822:	91 2c       	mov	r9, r1
     824:	24 c1       	rjmp	.+584    	; 0xa6e <__stack+0x20f>
     826:	e3 96       	adiw	r28, 0x33	; 51
     828:	8f af       	std	Y+63, r24	; 0x3f
     82a:	e3 97       	sbiw	r28, 0x33	; 51
     82c:	08 2e       	mov	r0, r24
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__divdi3+0x650>
     830:	22 0c       	add	r2, r2
     832:	33 1c       	adc	r3, r3
     834:	44 1c       	adc	r4, r4
     836:	55 1c       	adc	r5, r5
     838:	0a 94       	dec	r0
     83a:	d2 f7       	brpl	.-12     	; 0x830 <__divdi3+0x648>
     83c:	ee 2d       	mov	r30, r14
     83e:	e8 1b       	sub	r30, r24
     840:	64 01       	movw	r12, r8
     842:	53 01       	movw	r10, r6
     844:	0e 2e       	mov	r0, r30
     846:	04 c0       	rjmp	.+8      	; 0x850 <__divdi3+0x668>
     848:	d6 94       	lsr	r13
     84a:	c7 94       	ror	r12
     84c:	b7 94       	ror	r11
     84e:	a7 94       	ror	r10
     850:	0a 94       	dec	r0
     852:	d2 f7       	brpl	.-12     	; 0x848 <__divdi3+0x660>
     854:	a4 01       	movw	r20, r8
     856:	93 01       	movw	r18, r6
     858:	e3 96       	adiw	r28, 0x33	; 51
     85a:	0f ac       	ldd	r0, Y+63	; 0x3f
     85c:	e3 97       	sbiw	r28, 0x33	; 51
     85e:	04 c0       	rjmp	.+8      	; 0x868 <__stack+0x9>
     860:	22 0f       	add	r18, r18
     862:	33 1f       	adc	r19, r19
     864:	44 1f       	adc	r20, r20
     866:	55 1f       	adc	r21, r21
     868:	0a 94       	dec	r0
     86a:	d2 f7       	brpl	.-12     	; 0x860 <__stack+0x1>
     86c:	21 96       	adiw	r28, 0x01	; 1
     86e:	6c ac       	ldd	r6, Y+60	; 0x3c
     870:	7d ac       	ldd	r7, Y+61	; 0x3d
     872:	8e ac       	ldd	r8, Y+62	; 0x3e
     874:	9f ac       	ldd	r9, Y+63	; 0x3f
     876:	21 97       	sbiw	r28, 0x01	; 1
     878:	0e 2e       	mov	r0, r30
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__stack+0x25>
     87c:	96 94       	lsr	r9
     87e:	87 94       	ror	r8
     880:	77 94       	ror	r7
     882:	67 94       	ror	r6
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__stack+0x1d>
     888:	84 01       	movw	r16, r8
     88a:	73 01       	movw	r14, r6
     88c:	e2 2a       	or	r14, r18
     88e:	f3 2a       	or	r15, r19
     890:	04 2b       	or	r16, r20
     892:	15 2b       	or	r17, r21
     894:	e9 ae       	std	Y+57, r14	; 0x39
     896:	fa ae       	std	Y+58, r15	; 0x3a
     898:	0b af       	std	Y+59, r16	; 0x3b
     89a:	1c af       	std	Y+60, r17	; 0x3c
     89c:	32 01       	movw	r6, r4
     89e:	88 24       	eor	r8, r8
     8a0:	99 24       	eor	r9, r9
     8a2:	92 01       	movw	r18, r4
     8a4:	81 01       	movw	r16, r2
     8a6:	20 70       	andi	r18, 0x00	; 0
     8a8:	30 70       	andi	r19, 0x00	; 0
     8aa:	61 96       	adiw	r28, 0x11	; 17
     8ac:	0c af       	std	Y+60, r16	; 0x3c
     8ae:	1d af       	std	Y+61, r17	; 0x3d
     8b0:	2e af       	std	Y+62, r18	; 0x3e
     8b2:	3f af       	std	Y+63, r19	; 0x3f
     8b4:	61 97       	sbiw	r28, 0x11	; 17
     8b6:	c6 01       	movw	r24, r12
     8b8:	b5 01       	movw	r22, r10
     8ba:	a4 01       	movw	r20, r8
     8bc:	93 01       	movw	r18, r6
     8be:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	a4 01       	movw	r20, r8
     8cc:	93 01       	movw	r18, r6
     8ce:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     8d2:	c9 01       	movw	r24, r18
     8d4:	da 01       	movw	r26, r20
     8d6:	65 96       	adiw	r28, 0x15	; 21
     8d8:	8c af       	std	Y+60, r24	; 0x3c
     8da:	9d af       	std	Y+61, r25	; 0x3d
     8dc:	ae af       	std	Y+62, r26	; 0x3e
     8de:	bf af       	std	Y+63, r27	; 0x3f
     8e0:	65 97       	sbiw	r28, 0x15	; 21
     8e2:	bc 01       	movw	r22, r24
     8e4:	cd 01       	movw	r24, r26
     8e6:	61 96       	adiw	r28, 0x11	; 17
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	61 97       	sbiw	r28, 0x11	; 17
     8f2:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	a9 ac       	ldd	r10, Y+57	; 0x39
     902:	ba ac       	ldd	r11, Y+58	; 0x3a
     904:	cb ac       	ldd	r12, Y+59	; 0x3b
     906:	dc ac       	ldd	r13, Y+60	; 0x3c
     908:	c6 01       	movw	r24, r12
     90a:	aa 27       	eor	r26, r26
     90c:	bb 27       	eor	r27, r27
     90e:	5c 01       	movw	r10, r24
     910:	6d 01       	movw	r12, r26
     912:	ae 28       	or	r10, r14
     914:	bf 28       	or	r11, r15
     916:	c0 2a       	or	r12, r16
     918:	d1 2a       	or	r13, r17
     91a:	a2 16       	cp	r10, r18
     91c:	b3 06       	cpc	r11, r19
     91e:	c4 06       	cpc	r12, r20
     920:	d5 06       	cpc	r13, r21
     922:	60 f5       	brcc	.+88     	; 0x97c <__stack+0x11d>
     924:	65 96       	adiw	r28, 0x15	; 21
     926:	6c ad       	ldd	r22, Y+60	; 0x3c
     928:	7d ad       	ldd	r23, Y+61	; 0x3d
     92a:	8e ad       	ldd	r24, Y+62	; 0x3e
     92c:	9f ad       	ldd	r25, Y+63	; 0x3f
     92e:	65 97       	sbiw	r28, 0x15	; 21
     930:	61 50       	subi	r22, 0x01	; 1
     932:	70 40       	sbci	r23, 0x00	; 0
     934:	80 40       	sbci	r24, 0x00	; 0
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	65 96       	adiw	r28, 0x15	; 21
     93a:	6c af       	std	Y+60, r22	; 0x3c
     93c:	7d af       	std	Y+61, r23	; 0x3d
     93e:	8e af       	std	Y+62, r24	; 0x3e
     940:	9f af       	std	Y+63, r25	; 0x3f
     942:	65 97       	sbiw	r28, 0x15	; 21
     944:	a2 0c       	add	r10, r2
     946:	b3 1c       	adc	r11, r3
     948:	c4 1c       	adc	r12, r4
     94a:	d5 1c       	adc	r13, r5
     94c:	a2 14       	cp	r10, r2
     94e:	b3 04       	cpc	r11, r3
     950:	c4 04       	cpc	r12, r4
     952:	d5 04       	cpc	r13, r5
     954:	98 f0       	brcs	.+38     	; 0x97c <__stack+0x11d>
     956:	a2 16       	cp	r10, r18
     958:	b3 06       	cpc	r11, r19
     95a:	c4 06       	cpc	r12, r20
     95c:	d5 06       	cpc	r13, r21
     95e:	70 f4       	brcc	.+28     	; 0x97c <__stack+0x11d>
     960:	61 50       	subi	r22, 0x01	; 1
     962:	70 40       	sbci	r23, 0x00	; 0
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	65 96       	adiw	r28, 0x15	; 21
     96a:	6c af       	std	Y+60, r22	; 0x3c
     96c:	7d af       	std	Y+61, r23	; 0x3d
     96e:	8e af       	std	Y+62, r24	; 0x3e
     970:	9f af       	std	Y+63, r25	; 0x3f
     972:	65 97       	sbiw	r28, 0x15	; 21
     974:	a2 0c       	add	r10, r2
     976:	b3 1c       	adc	r11, r3
     978:	c4 1c       	adc	r12, r4
     97a:	d5 1c       	adc	r13, r5
     97c:	a2 1a       	sub	r10, r18
     97e:	b3 0a       	sbc	r11, r19
     980:	c4 0a       	sbc	r12, r20
     982:	d5 0a       	sbc	r13, r21
     984:	c6 01       	movw	r24, r12
     986:	b5 01       	movw	r22, r10
     988:	a4 01       	movw	r20, r8
     98a:	93 01       	movw	r18, r6
     98c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     990:	7b 01       	movw	r14, r22
     992:	8c 01       	movw	r16, r24
     994:	c6 01       	movw	r24, r12
     996:	b5 01       	movw	r22, r10
     998:	a4 01       	movw	r20, r8
     99a:	93 01       	movw	r18, r6
     99c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     9a0:	c9 01       	movw	r24, r18
     9a2:	da 01       	movw	r26, r20
     9a4:	3c 01       	movw	r6, r24
     9a6:	4d 01       	movw	r8, r26
     9a8:	c4 01       	movw	r24, r8
     9aa:	b3 01       	movw	r22, r6
     9ac:	61 96       	adiw	r28, 0x11	; 17
     9ae:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b0:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b2:	4e ad       	ldd	r20, Y+62	; 0x3e
     9b4:	5f ad       	ldd	r21, Y+63	; 0x3f
     9b6:	61 97       	sbiw	r28, 0x11	; 17
     9b8:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	87 01       	movw	r16, r14
     9c2:	ff 24       	eor	r15, r15
     9c4:	ee 24       	eor	r14, r14
     9c6:	89 ad       	ldd	r24, Y+57	; 0x39
     9c8:	9a ad       	ldd	r25, Y+58	; 0x3a
     9ca:	ab ad       	ldd	r26, Y+59	; 0x3b
     9cc:	bc ad       	ldd	r27, Y+60	; 0x3c
     9ce:	a0 70       	andi	r26, 0x00	; 0
     9d0:	b0 70       	andi	r27, 0x00	; 0
     9d2:	57 01       	movw	r10, r14
     9d4:	68 01       	movw	r12, r16
     9d6:	a8 2a       	or	r10, r24
     9d8:	b9 2a       	or	r11, r25
     9da:	ca 2a       	or	r12, r26
     9dc:	db 2a       	or	r13, r27
     9de:	a2 16       	cp	r10, r18
     9e0:	b3 06       	cpc	r11, r19
     9e2:	c4 06       	cpc	r12, r20
     9e4:	d5 06       	cpc	r13, r21
     9e6:	e0 f4       	brcc	.+56     	; 0xa20 <__stack+0x1c1>
     9e8:	08 94       	sec
     9ea:	61 08       	sbc	r6, r1
     9ec:	71 08       	sbc	r7, r1
     9ee:	81 08       	sbc	r8, r1
     9f0:	91 08       	sbc	r9, r1
     9f2:	a2 0c       	add	r10, r2
     9f4:	b3 1c       	adc	r11, r3
     9f6:	c4 1c       	adc	r12, r4
     9f8:	d5 1c       	adc	r13, r5
     9fa:	a2 14       	cp	r10, r2
     9fc:	b3 04       	cpc	r11, r3
     9fe:	c4 04       	cpc	r12, r4
     a00:	d5 04       	cpc	r13, r5
     a02:	70 f0       	brcs	.+28     	; 0xa20 <__stack+0x1c1>
     a04:	a2 16       	cp	r10, r18
     a06:	b3 06       	cpc	r11, r19
     a08:	c4 06       	cpc	r12, r20
     a0a:	d5 06       	cpc	r13, r21
     a0c:	48 f4       	brcc	.+18     	; 0xa20 <__stack+0x1c1>
     a0e:	08 94       	sec
     a10:	61 08       	sbc	r6, r1
     a12:	71 08       	sbc	r7, r1
     a14:	81 08       	sbc	r8, r1
     a16:	91 08       	sbc	r9, r1
     a18:	a2 0c       	add	r10, r2
     a1a:	b3 1c       	adc	r11, r3
     a1c:	c4 1c       	adc	r12, r4
     a1e:	d5 1c       	adc	r13, r5
     a20:	21 96       	adiw	r28, 0x01	; 1
     a22:	8c ad       	ldd	r24, Y+60	; 0x3c
     a24:	9d ad       	ldd	r25, Y+61	; 0x3d
     a26:	ae ad       	ldd	r26, Y+62	; 0x3e
     a28:	bf ad       	ldd	r27, Y+63	; 0x3f
     a2a:	21 97       	sbiw	r28, 0x01	; 1
     a2c:	e3 96       	adiw	r28, 0x33	; 51
     a2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     a30:	e3 97       	sbiw	r28, 0x33	; 51
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <__stack+0x1dd>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	0a 94       	dec	r0
     a3e:	d2 f7       	brpl	.-12     	; 0xa34 <__stack+0x1d5>
     a40:	21 96       	adiw	r28, 0x01	; 1
     a42:	8c af       	std	Y+60, r24	; 0x3c
     a44:	9d af       	std	Y+61, r25	; 0x3d
     a46:	ae af       	std	Y+62, r26	; 0x3e
     a48:	bf af       	std	Y+63, r27	; 0x3f
     a4a:	21 97       	sbiw	r28, 0x01	; 1
     a4c:	a2 1a       	sub	r10, r18
     a4e:	b3 0a       	sbc	r11, r19
     a50:	c4 0a       	sbc	r12, r20
     a52:	d5 0a       	sbc	r13, r21
     a54:	65 96       	adiw	r28, 0x15	; 21
     a56:	ec ac       	ldd	r14, Y+60	; 0x3c
     a58:	fd ac       	ldd	r15, Y+61	; 0x3d
     a5a:	0e ad       	ldd	r16, Y+62	; 0x3e
     a5c:	1f ad       	ldd	r17, Y+63	; 0x3f
     a5e:	65 97       	sbiw	r28, 0x15	; 21
     a60:	d7 01       	movw	r26, r14
     a62:	99 27       	eor	r25, r25
     a64:	88 27       	eor	r24, r24
     a66:	68 2a       	or	r6, r24
     a68:	79 2a       	or	r7, r25
     a6a:	8a 2a       	or	r8, r26
     a6c:	9b 2a       	or	r9, r27
     a6e:	82 01       	movw	r16, r4
     a70:	22 27       	eor	r18, r18
     a72:	33 27       	eor	r19, r19
     a74:	69 96       	adiw	r28, 0x19	; 25
     a76:	0c af       	std	Y+60, r16	; 0x3c
     a78:	1d af       	std	Y+61, r17	; 0x3d
     a7a:	2e af       	std	Y+62, r18	; 0x3e
     a7c:	3f af       	std	Y+63, r19	; 0x3f
     a7e:	69 97       	sbiw	r28, 0x19	; 25
     a80:	a2 01       	movw	r20, r4
     a82:	91 01       	movw	r18, r2
     a84:	40 70       	andi	r20, 0x00	; 0
     a86:	50 70       	andi	r21, 0x00	; 0
     a88:	6d 96       	adiw	r28, 0x1d	; 29
     a8a:	2c af       	std	Y+60, r18	; 0x3c
     a8c:	3d af       	std	Y+61, r19	; 0x3d
     a8e:	4e af       	std	Y+62, r20	; 0x3e
     a90:	5f af       	std	Y+63, r21	; 0x3f
     a92:	6d 97       	sbiw	r28, 0x1d	; 29
     a94:	c6 01       	movw	r24, r12
     a96:	b5 01       	movw	r22, r10
     a98:	69 96       	adiw	r28, 0x19	; 25
     a9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa0:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa2:	69 97       	sbiw	r28, 0x19	; 25
     aa4:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	69 96       	adiw	r28, 0x19	; 25
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	69 97       	sbiw	r28, 0x19	; 25
     abc:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     ac0:	c9 01       	movw	r24, r18
     ac2:	da 01       	movw	r26, r20
     ac4:	a1 96       	adiw	r28, 0x21	; 33
     ac6:	8c af       	std	Y+60, r24	; 0x3c
     ac8:	9d af       	std	Y+61, r25	; 0x3d
     aca:	ae af       	std	Y+62, r26	; 0x3e
     acc:	bf af       	std	Y+63, r27	; 0x3f
     ace:	a1 97       	sbiw	r28, 0x21	; 33
     ad0:	bc 01       	movw	r22, r24
     ad2:	cd 01       	movw	r24, r26
     ad4:	6d 96       	adiw	r28, 0x1d	; 29
     ad6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ad8:	3d ad       	ldd	r19, Y+61	; 0x3d
     ada:	4e ad       	ldd	r20, Y+62	; 0x3e
     adc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ade:	6d 97       	sbiw	r28, 0x1d	; 29
     ae0:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	87 01       	movw	r16, r14
     aea:	ff 24       	eor	r15, r15
     aec:	ee 24       	eor	r14, r14
     aee:	21 96       	adiw	r28, 0x01	; 1
     af0:	ac ac       	ldd	r10, Y+60	; 0x3c
     af2:	bd ac       	ldd	r11, Y+61	; 0x3d
     af4:	ce ac       	ldd	r12, Y+62	; 0x3e
     af6:	df ac       	ldd	r13, Y+63	; 0x3f
     af8:	21 97       	sbiw	r28, 0x01	; 1
     afa:	c6 01       	movw	r24, r12
     afc:	aa 27       	eor	r26, r26
     afe:	bb 27       	eor	r27, r27
     b00:	57 01       	movw	r10, r14
     b02:	68 01       	movw	r12, r16
     b04:	a8 2a       	or	r10, r24
     b06:	b9 2a       	or	r11, r25
     b08:	ca 2a       	or	r12, r26
     b0a:	db 2a       	or	r13, r27
     b0c:	a2 16       	cp	r10, r18
     b0e:	b3 06       	cpc	r11, r19
     b10:	c4 06       	cpc	r12, r20
     b12:	d5 06       	cpc	r13, r21
     b14:	60 f5       	brcc	.+88     	; 0xb6e <__stack+0x30f>
     b16:	a1 96       	adiw	r28, 0x21	; 33
     b18:	6c ad       	ldd	r22, Y+60	; 0x3c
     b1a:	7d ad       	ldd	r23, Y+61	; 0x3d
     b1c:	8e ad       	ldd	r24, Y+62	; 0x3e
     b1e:	9f ad       	ldd	r25, Y+63	; 0x3f
     b20:	a1 97       	sbiw	r28, 0x21	; 33
     b22:	61 50       	subi	r22, 0x01	; 1
     b24:	70 40       	sbci	r23, 0x00	; 0
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	a1 96       	adiw	r28, 0x21	; 33
     b2c:	6c af       	std	Y+60, r22	; 0x3c
     b2e:	7d af       	std	Y+61, r23	; 0x3d
     b30:	8e af       	std	Y+62, r24	; 0x3e
     b32:	9f af       	std	Y+63, r25	; 0x3f
     b34:	a1 97       	sbiw	r28, 0x21	; 33
     b36:	a2 0c       	add	r10, r2
     b38:	b3 1c       	adc	r11, r3
     b3a:	c4 1c       	adc	r12, r4
     b3c:	d5 1c       	adc	r13, r5
     b3e:	a2 14       	cp	r10, r2
     b40:	b3 04       	cpc	r11, r3
     b42:	c4 04       	cpc	r12, r4
     b44:	d5 04       	cpc	r13, r5
     b46:	98 f0       	brcs	.+38     	; 0xb6e <__stack+0x30f>
     b48:	a2 16       	cp	r10, r18
     b4a:	b3 06       	cpc	r11, r19
     b4c:	c4 06       	cpc	r12, r20
     b4e:	d5 06       	cpc	r13, r21
     b50:	70 f4       	brcc	.+28     	; 0xb6e <__stack+0x30f>
     b52:	61 50       	subi	r22, 0x01	; 1
     b54:	70 40       	sbci	r23, 0x00	; 0
     b56:	80 40       	sbci	r24, 0x00	; 0
     b58:	90 40       	sbci	r25, 0x00	; 0
     b5a:	a1 96       	adiw	r28, 0x21	; 33
     b5c:	6c af       	std	Y+60, r22	; 0x3c
     b5e:	7d af       	std	Y+61, r23	; 0x3d
     b60:	8e af       	std	Y+62, r24	; 0x3e
     b62:	9f af       	std	Y+63, r25	; 0x3f
     b64:	a1 97       	sbiw	r28, 0x21	; 33
     b66:	a2 0c       	add	r10, r2
     b68:	b3 1c       	adc	r11, r3
     b6a:	c4 1c       	adc	r12, r4
     b6c:	d5 1c       	adc	r13, r5
     b6e:	a2 1a       	sub	r10, r18
     b70:	b3 0a       	sbc	r11, r19
     b72:	c4 0a       	sbc	r12, r20
     b74:	d5 0a       	sbc	r13, r21
     b76:	c6 01       	movw	r24, r12
     b78:	b5 01       	movw	r22, r10
     b7a:	69 96       	adiw	r28, 0x19	; 25
     b7c:	2c ad       	ldd	r18, Y+60	; 0x3c
     b7e:	3d ad       	ldd	r19, Y+61	; 0x3d
     b80:	4e ad       	ldd	r20, Y+62	; 0x3e
     b82:	5f ad       	ldd	r21, Y+63	; 0x3f
     b84:	69 97       	sbiw	r28, 0x19	; 25
     b86:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     b8a:	7b 01       	movw	r14, r22
     b8c:	8c 01       	movw	r16, r24
     b8e:	c6 01       	movw	r24, r12
     b90:	b5 01       	movw	r22, r10
     b92:	69 96       	adiw	r28, 0x19	; 25
     b94:	2c ad       	ldd	r18, Y+60	; 0x3c
     b96:	3d ad       	ldd	r19, Y+61	; 0x3d
     b98:	4e ad       	ldd	r20, Y+62	; 0x3e
     b9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     b9c:	69 97       	sbiw	r28, 0x19	; 25
     b9e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     ba2:	c9 01       	movw	r24, r18
     ba4:	da 01       	movw	r26, r20
     ba6:	5c 01       	movw	r10, r24
     ba8:	6d 01       	movw	r12, r26
     baa:	c6 01       	movw	r24, r12
     bac:	b5 01       	movw	r22, r10
     bae:	6d 96       	adiw	r28, 0x1d	; 29
     bb0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bb2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bb4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bb6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bb8:	6d 97       	sbiw	r28, 0x1d	; 29
     bba:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	87 01       	movw	r16, r14
     bc4:	ff 24       	eor	r15, r15
     bc6:	ee 24       	eor	r14, r14
     bc8:	21 96       	adiw	r28, 0x01	; 1
     bca:	8c ad       	ldd	r24, Y+60	; 0x3c
     bcc:	9d ad       	ldd	r25, Y+61	; 0x3d
     bce:	ae ad       	ldd	r26, Y+62	; 0x3e
     bd0:	bf ad       	ldd	r27, Y+63	; 0x3f
     bd2:	21 97       	sbiw	r28, 0x01	; 1
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	e8 2a       	or	r14, r24
     bda:	f9 2a       	or	r15, r25
     bdc:	0a 2b       	or	r16, r26
     bde:	1b 2b       	or	r17, r27
     be0:	e2 16       	cp	r14, r18
     be2:	f3 06       	cpc	r15, r19
     be4:	04 07       	cpc	r16, r20
     be6:	15 07       	cpc	r17, r21
     be8:	c0 f4       	brcc	.+48     	; 0xc1a <__stack+0x3bb>
     bea:	08 94       	sec
     bec:	a1 08       	sbc	r10, r1
     bee:	b1 08       	sbc	r11, r1
     bf0:	c1 08       	sbc	r12, r1
     bf2:	d1 08       	sbc	r13, r1
     bf4:	e2 0c       	add	r14, r2
     bf6:	f3 1c       	adc	r15, r3
     bf8:	04 1d       	adc	r16, r4
     bfa:	15 1d       	adc	r17, r5
     bfc:	e2 14       	cp	r14, r2
     bfe:	f3 04       	cpc	r15, r3
     c00:	04 05       	cpc	r16, r4
     c02:	15 05       	cpc	r17, r5
     c04:	50 f0       	brcs	.+20     	; 0xc1a <__stack+0x3bb>
     c06:	e2 16       	cp	r14, r18
     c08:	f3 06       	cpc	r15, r19
     c0a:	04 07       	cpc	r16, r20
     c0c:	15 07       	cpc	r17, r21
     c0e:	28 f4       	brcc	.+10     	; 0xc1a <__stack+0x3bb>
     c10:	08 94       	sec
     c12:	a1 08       	sbc	r10, r1
     c14:	b1 08       	sbc	r11, r1
     c16:	c1 08       	sbc	r12, r1
     c18:	d1 08       	sbc	r13, r1
     c1a:	a1 96       	adiw	r28, 0x21	; 33
     c1c:	ec ac       	ldd	r14, Y+60	; 0x3c
     c1e:	fd ac       	ldd	r15, Y+61	; 0x3d
     c20:	0e ad       	ldd	r16, Y+62	; 0x3e
     c22:	1f ad       	ldd	r17, Y+63	; 0x3f
     c24:	a1 97       	sbiw	r28, 0x21	; 33
     c26:	d7 01       	movw	r26, r14
     c28:	99 27       	eor	r25, r25
     c2a:	88 27       	eor	r24, r24
     c2c:	96 01       	movw	r18, r12
     c2e:	85 01       	movw	r16, r10
     c30:	08 2b       	or	r16, r24
     c32:	19 2b       	or	r17, r25
     c34:	2a 2b       	or	r18, r26
     c36:	3b 2b       	or	r19, r27
     c38:	25 96       	adiw	r28, 0x05	; 5
     c3a:	0c af       	std	Y+60, r16	; 0x3c
     c3c:	1d af       	std	Y+61, r17	; 0x3d
     c3e:	2e af       	std	Y+62, r18	; 0x3e
     c40:	3f af       	std	Y+63, r19	; 0x3f
     c42:	25 97       	sbiw	r28, 0x05	; 5
     c44:	72 c2       	rjmp	.+1252   	; 0x112a <__stack+0x8cb>
     c46:	6e 14       	cp	r6, r14
     c48:	7f 04       	cpc	r7, r15
     c4a:	80 06       	cpc	r8, r16
     c4c:	91 06       	cpc	r9, r17
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <__stack+0x3f3>
     c50:	5f c2       	rjmp	.+1214   	; 0x1110 <__stack+0x8b1>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	e2 16       	cp	r14, r18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	f2 06       	cpc	r15, r18
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	02 07       	cpc	r16, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	12 07       	cpc	r17, r18
     c62:	88 f4       	brcc	.+34     	; 0xc86 <__stack+0x427>
     c64:	3f ef       	ldi	r19, 0xFF	; 255
     c66:	e3 16       	cp	r14, r19
     c68:	f1 04       	cpc	r15, r1
     c6a:	01 05       	cpc	r16, r1
     c6c:	11 05       	cpc	r17, r1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <__stack+0x41d>
     c70:	28 f0       	brcs	.+10     	; 0xc7c <__stack+0x41d>
     c72:	48 e0       	ldi	r20, 0x08	; 8
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	17 c0       	rjmp	.+46     	; 0xcaa <__stack+0x44b>
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	12 c0       	rjmp	.+36     	; 0xcaa <__stack+0x44b>
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	e4 16       	cp	r14, r20
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	f4 06       	cpc	r15, r20
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	04 07       	cpc	r16, r20
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	14 07       	cpc	r17, r20
     c96:	28 f0       	brcs	.+10     	; 0xca2 <__stack+0x443>
     c98:	48 e1       	ldi	r20, 0x18	; 24
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <__stack+0x44b>
     ca2:	40 e1       	ldi	r20, 0x10	; 16
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	d8 01       	movw	r26, r16
     cac:	c7 01       	movw	r24, r14
     cae:	04 2e       	mov	r0, r20
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <__stack+0x45b>
     cb2:	b6 95       	lsr	r27
     cb4:	a7 95       	ror	r26
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	0a 94       	dec	r0
     cbc:	d2 f7       	brpl	.-12     	; 0xcb2 <__stack+0x453>
     cbe:	83 59       	subi	r24, 0x93	; 147
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	dc 01       	movw	r26, r24
     cc4:	2c 91       	ld	r18, X
     cc6:	30 e2       	ldi	r19, 0x20	; 32
     cc8:	a3 2e       	mov	r10, r19
     cca:	b1 2c       	mov	r11, r1
     ccc:	c1 2c       	mov	r12, r1
     cce:	d1 2c       	mov	r13, r1
     cd0:	d6 01       	movw	r26, r12
     cd2:	c5 01       	movw	r24, r10
     cd4:	84 1b       	sub	r24, r20
     cd6:	95 0b       	sbc	r25, r21
     cd8:	a6 0b       	sbc	r26, r22
     cda:	b7 0b       	sbc	r27, r23
     cdc:	82 1b       	sub	r24, r18
     cde:	91 09       	sbc	r25, r1
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	a1 05       	cpc	r26, r1
     ce8:	b1 05       	cpc	r27, r1
     cea:	99 f4       	brne	.+38     	; 0xd12 <__stack+0x4b3>
     cec:	e6 14       	cp	r14, r6
     cee:	f7 04       	cpc	r15, r7
     cf0:	08 05       	cpc	r16, r8
     cf2:	19 05       	cpc	r17, r9
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <__stack+0x499>
     cf6:	fe c1       	rjmp	.+1020   	; 0x10f4 <__stack+0x895>
     cf8:	21 96       	adiw	r28, 0x01	; 1
     cfa:	6c ac       	ldd	r6, Y+60	; 0x3c
     cfc:	7d ac       	ldd	r7, Y+61	; 0x3d
     cfe:	8e ac       	ldd	r8, Y+62	; 0x3e
     d00:	9f ac       	ldd	r9, Y+63	; 0x3f
     d02:	21 97       	sbiw	r28, 0x01	; 1
     d04:	62 14       	cp	r6, r2
     d06:	73 04       	cpc	r7, r3
     d08:	84 04       	cpc	r8, r4
     d0a:	95 04       	cpc	r9, r5
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__stack+0x4b1>
     d0e:	f2 c1       	rjmp	.+996    	; 0x10f4 <__stack+0x895>
     d10:	ff c1       	rjmp	.+1022   	; 0x1110 <__stack+0x8b1>
     d12:	e2 96       	adiw	r28, 0x32	; 50
     d14:	8f af       	std	Y+63, r24	; 0x3f
     d16:	e2 97       	sbiw	r28, 0x32	; 50
     d18:	08 2e       	mov	r0, r24
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__stack+0x4c5>
     d1c:	ee 0c       	add	r14, r14
     d1e:	ff 1c       	adc	r15, r15
     d20:	00 1f       	adc	r16, r16
     d22:	11 1f       	adc	r17, r17
     d24:	0a 94       	dec	r0
     d26:	d2 f7       	brpl	.-12     	; 0xd1c <__stack+0x4bd>
     d28:	6a 2d       	mov	r22, r10
     d2a:	68 1b       	sub	r22, r24
     d2c:	d2 01       	movw	r26, r4
     d2e:	c1 01       	movw	r24, r2
     d30:	06 2e       	mov	r0, r22
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <__stack+0x4dd>
     d34:	b6 95       	lsr	r27
     d36:	a7 95       	ror	r26
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	0a 94       	dec	r0
     d3e:	d2 f7       	brpl	.-12     	; 0xd34 <__stack+0x4d5>
     d40:	5c 01       	movw	r10, r24
     d42:	6d 01       	movw	r12, r26
     d44:	ae 28       	or	r10, r14
     d46:	bf 28       	or	r11, r15
     d48:	c0 2a       	or	r12, r16
     d4a:	d1 2a       	or	r13, r17
     d4c:	ad aa       	std	Y+53, r10	; 0x35
     d4e:	be aa       	std	Y+54, r11	; 0x36
     d50:	cf aa       	std	Y+55, r12	; 0x37
     d52:	d8 ae       	std	Y+56, r13	; 0x38
     d54:	72 01       	movw	r14, r4
     d56:	61 01       	movw	r12, r2
     d58:	e2 96       	adiw	r28, 0x32	; 50
     d5a:	0f ac       	ldd	r0, Y+63	; 0x3f
     d5c:	e2 97       	sbiw	r28, 0x32	; 50
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__stack+0x509>
     d60:	cc 0c       	add	r12, r12
     d62:	dd 1c       	adc	r13, r13
     d64:	ee 1c       	adc	r14, r14
     d66:	ff 1c       	adc	r15, r15
     d68:	0a 94       	dec	r0
     d6a:	d2 f7       	brpl	.-12     	; 0xd60 <__stack+0x501>
     d6c:	c9 aa       	std	Y+49, r12	; 0x31
     d6e:	da aa       	std	Y+50, r13	; 0x32
     d70:	eb aa       	std	Y+51, r14	; 0x33
     d72:	fc aa       	std	Y+52, r15	; 0x34
     d74:	64 01       	movw	r12, r8
     d76:	53 01       	movw	r10, r6
     d78:	06 2e       	mov	r0, r22
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <__stack+0x525>
     d7c:	d6 94       	lsr	r13
     d7e:	c7 94       	ror	r12
     d80:	b7 94       	ror	r11
     d82:	a7 94       	ror	r10
     d84:	0a 94       	dec	r0
     d86:	d2 f7       	brpl	.-12     	; 0xd7c <__stack+0x51d>
     d88:	d4 01       	movw	r26, r8
     d8a:	c3 01       	movw	r24, r6
     d8c:	e2 96       	adiw	r28, 0x32	; 50
     d8e:	0f ac       	ldd	r0, Y+63	; 0x3f
     d90:	e2 97       	sbiw	r28, 0x32	; 50
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <__stack+0x53d>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	aa 1f       	adc	r26, r26
     d9a:	bb 1f       	adc	r27, r27
     d9c:	0a 94       	dec	r0
     d9e:	d2 f7       	brpl	.-12     	; 0xd94 <__stack+0x535>
     da0:	21 96       	adiw	r28, 0x01	; 1
     da2:	ec ac       	ldd	r14, Y+60	; 0x3c
     da4:	fd ac       	ldd	r15, Y+61	; 0x3d
     da6:	0e ad       	ldd	r16, Y+62	; 0x3e
     da8:	1f ad       	ldd	r17, Y+63	; 0x3f
     daa:	21 97       	sbiw	r28, 0x01	; 1
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__stack+0x557>
     dae:	16 95       	lsr	r17
     db0:	07 95       	ror	r16
     db2:	f7 94       	ror	r15
     db4:	e7 94       	ror	r14
     db6:	6a 95       	dec	r22
     db8:	d2 f7       	brpl	.-12     	; 0xdae <__stack+0x54f>
     dba:	37 01       	movw	r6, r14
     dbc:	48 01       	movw	r8, r16
     dbe:	68 2a       	or	r6, r24
     dc0:	79 2a       	or	r7, r25
     dc2:	8a 2a       	or	r8, r26
     dc4:	9b 2a       	or	r9, r27
     dc6:	6d a6       	std	Y+45, r6	; 0x2d
     dc8:	7e a6       	std	Y+46, r7	; 0x2e
     dca:	8f a6       	std	Y+47, r8	; 0x2f
     dcc:	98 aa       	std	Y+48, r9	; 0x30
     dce:	ed a8       	ldd	r14, Y+53	; 0x35
     dd0:	fe a8       	ldd	r15, Y+54	; 0x36
     dd2:	0f a9       	ldd	r16, Y+55	; 0x37
     dd4:	18 ad       	ldd	r17, Y+56	; 0x38
     dd6:	38 01       	movw	r6, r16
     dd8:	88 24       	eor	r8, r8
     dda:	99 24       	eor	r9, r9
     ddc:	98 01       	movw	r18, r16
     dde:	87 01       	movw	r16, r14
     de0:	20 70       	andi	r18, 0x00	; 0
     de2:	30 70       	andi	r19, 0x00	; 0
     de4:	a5 96       	adiw	r28, 0x25	; 37
     de6:	0c af       	std	Y+60, r16	; 0x3c
     de8:	1d af       	std	Y+61, r17	; 0x3d
     dea:	2e af       	std	Y+62, r18	; 0x3e
     dec:	3f af       	std	Y+63, r19	; 0x3f
     dee:	a5 97       	sbiw	r28, 0x25	; 37
     df0:	c6 01       	movw	r24, r12
     df2:	b5 01       	movw	r22, r10
     df4:	a4 01       	movw	r20, r8
     df6:	93 01       	movw	r18, r6
     df8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     dfc:	7b 01       	movw	r14, r22
     dfe:	8c 01       	movw	r16, r24
     e00:	c6 01       	movw	r24, r12
     e02:	b5 01       	movw	r22, r10
     e04:	a4 01       	movw	r20, r8
     e06:	93 01       	movw	r18, r6
     e08:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     e0c:	c9 01       	movw	r24, r18
     e0e:	da 01       	movw	r26, r20
     e10:	1c 01       	movw	r2, r24
     e12:	2d 01       	movw	r4, r26
     e14:	c2 01       	movw	r24, r4
     e16:	b1 01       	movw	r22, r2
     e18:	a5 96       	adiw	r28, 0x25	; 37
     e1a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e1c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e1e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e20:	5f ad       	ldd	r21, Y+63	; 0x3f
     e22:	a5 97       	sbiw	r28, 0x25	; 37
     e24:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	87 01       	movw	r16, r14
     e2e:	ff 24       	eor	r15, r15
     e30:	ee 24       	eor	r14, r14
     e32:	ad a4       	ldd	r10, Y+45	; 0x2d
     e34:	be a4       	ldd	r11, Y+46	; 0x2e
     e36:	cf a4       	ldd	r12, Y+47	; 0x2f
     e38:	d8 a8       	ldd	r13, Y+48	; 0x30
     e3a:	c6 01       	movw	r24, r12
     e3c:	aa 27       	eor	r26, r26
     e3e:	bb 27       	eor	r27, r27
     e40:	57 01       	movw	r10, r14
     e42:	68 01       	movw	r12, r16
     e44:	a8 2a       	or	r10, r24
     e46:	b9 2a       	or	r11, r25
     e48:	ca 2a       	or	r12, r26
     e4a:	db 2a       	or	r13, r27
     e4c:	a2 16       	cp	r10, r18
     e4e:	b3 06       	cpc	r11, r19
     e50:	c4 06       	cpc	r12, r20
     e52:	d5 06       	cpc	r13, r21
     e54:	00 f5       	brcc	.+64     	; 0xe96 <__stack+0x637>
     e56:	08 94       	sec
     e58:	21 08       	sbc	r2, r1
     e5a:	31 08       	sbc	r3, r1
     e5c:	41 08       	sbc	r4, r1
     e5e:	51 08       	sbc	r5, r1
     e60:	ed a8       	ldd	r14, Y+53	; 0x35
     e62:	fe a8       	ldd	r15, Y+54	; 0x36
     e64:	0f a9       	ldd	r16, Y+55	; 0x37
     e66:	18 ad       	ldd	r17, Y+56	; 0x38
     e68:	ae 0c       	add	r10, r14
     e6a:	bf 1c       	adc	r11, r15
     e6c:	c0 1e       	adc	r12, r16
     e6e:	d1 1e       	adc	r13, r17
     e70:	ae 14       	cp	r10, r14
     e72:	bf 04       	cpc	r11, r15
     e74:	c0 06       	cpc	r12, r16
     e76:	d1 06       	cpc	r13, r17
     e78:	70 f0       	brcs	.+28     	; 0xe96 <__stack+0x637>
     e7a:	a2 16       	cp	r10, r18
     e7c:	b3 06       	cpc	r11, r19
     e7e:	c4 06       	cpc	r12, r20
     e80:	d5 06       	cpc	r13, r21
     e82:	48 f4       	brcc	.+18     	; 0xe96 <__stack+0x637>
     e84:	08 94       	sec
     e86:	21 08       	sbc	r2, r1
     e88:	31 08       	sbc	r3, r1
     e8a:	41 08       	sbc	r4, r1
     e8c:	51 08       	sbc	r5, r1
     e8e:	ae 0c       	add	r10, r14
     e90:	bf 1c       	adc	r11, r15
     e92:	c0 1e       	adc	r12, r16
     e94:	d1 1e       	adc	r13, r17
     e96:	a2 1a       	sub	r10, r18
     e98:	b3 0a       	sbc	r11, r19
     e9a:	c4 0a       	sbc	r12, r20
     e9c:	d5 0a       	sbc	r13, r21
     e9e:	c6 01       	movw	r24, r12
     ea0:	b5 01       	movw	r22, r10
     ea2:	a4 01       	movw	r20, r8
     ea4:	93 01       	movw	r18, r6
     ea6:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     eaa:	7b 01       	movw	r14, r22
     eac:	8c 01       	movw	r16, r24
     eae:	c6 01       	movw	r24, r12
     eb0:	b5 01       	movw	r22, r10
     eb2:	a4 01       	movw	r20, r8
     eb4:	93 01       	movw	r18, r6
     eb6:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
     eba:	c9 01       	movw	r24, r18
     ebc:	da 01       	movw	r26, r20
     ebe:	3c 01       	movw	r6, r24
     ec0:	4d 01       	movw	r8, r26
     ec2:	c4 01       	movw	r24, r8
     ec4:	b3 01       	movw	r22, r6
     ec6:	a5 96       	adiw	r28, 0x25	; 37
     ec8:	2c ad       	ldd	r18, Y+60	; 0x3c
     eca:	3d ad       	ldd	r19, Y+61	; 0x3d
     ecc:	4e ad       	ldd	r20, Y+62	; 0x3e
     ece:	5f ad       	ldd	r21, Y+63	; 0x3f
     ed0:	a5 97       	sbiw	r28, 0x25	; 37
     ed2:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	87 01       	movw	r16, r14
     edc:	ff 24       	eor	r15, r15
     ede:	ee 24       	eor	r14, r14
     ee0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ee4:	af a5       	ldd	r26, Y+47	; 0x2f
     ee6:	b8 a9       	ldd	r27, Y+48	; 0x30
     ee8:	a0 70       	andi	r26, 0x00	; 0
     eea:	b0 70       	andi	r27, 0x00	; 0
     eec:	57 01       	movw	r10, r14
     eee:	68 01       	movw	r12, r16
     ef0:	a8 2a       	or	r10, r24
     ef2:	b9 2a       	or	r11, r25
     ef4:	ca 2a       	or	r12, r26
     ef6:	db 2a       	or	r13, r27
     ef8:	a2 16       	cp	r10, r18
     efa:	b3 06       	cpc	r11, r19
     efc:	c4 06       	cpc	r12, r20
     efe:	d5 06       	cpc	r13, r21
     f00:	00 f5       	brcc	.+64     	; 0xf42 <__stack+0x6e3>
     f02:	08 94       	sec
     f04:	61 08       	sbc	r6, r1
     f06:	71 08       	sbc	r7, r1
     f08:	81 08       	sbc	r8, r1
     f0a:	91 08       	sbc	r9, r1
     f0c:	6d a9       	ldd	r22, Y+53	; 0x35
     f0e:	7e a9       	ldd	r23, Y+54	; 0x36
     f10:	8f a9       	ldd	r24, Y+55	; 0x37
     f12:	98 ad       	ldd	r25, Y+56	; 0x38
     f14:	a6 0e       	add	r10, r22
     f16:	b7 1e       	adc	r11, r23
     f18:	c8 1e       	adc	r12, r24
     f1a:	d9 1e       	adc	r13, r25
     f1c:	a6 16       	cp	r10, r22
     f1e:	b7 06       	cpc	r11, r23
     f20:	c8 06       	cpc	r12, r24
     f22:	d9 06       	cpc	r13, r25
     f24:	70 f0       	brcs	.+28     	; 0xf42 <__stack+0x6e3>
     f26:	a2 16       	cp	r10, r18
     f28:	b3 06       	cpc	r11, r19
     f2a:	c4 06       	cpc	r12, r20
     f2c:	d5 06       	cpc	r13, r21
     f2e:	48 f4       	brcc	.+18     	; 0xf42 <__stack+0x6e3>
     f30:	08 94       	sec
     f32:	61 08       	sbc	r6, r1
     f34:	71 08       	sbc	r7, r1
     f36:	81 08       	sbc	r8, r1
     f38:	91 08       	sbc	r9, r1
     f3a:	a6 0e       	add	r10, r22
     f3c:	b7 1e       	adc	r11, r23
     f3e:	c8 1e       	adc	r12, r24
     f40:	d9 1e       	adc	r13, r25
     f42:	d6 01       	movw	r26, r12
     f44:	c5 01       	movw	r24, r10
     f46:	82 1b       	sub	r24, r18
     f48:	93 0b       	sbc	r25, r19
     f4a:	a4 0b       	sbc	r26, r20
     f4c:	b5 0b       	sbc	r27, r21
     f4e:	89 a7       	std	Y+41, r24	; 0x29
     f50:	9a a7       	std	Y+42, r25	; 0x2a
     f52:	ab a7       	std	Y+43, r26	; 0x2b
     f54:	bc a7       	std	Y+44, r27	; 0x2c
     f56:	d1 01       	movw	r26, r2
     f58:	99 27       	eor	r25, r25
     f5a:	88 27       	eor	r24, r24
     f5c:	64 01       	movw	r12, r8
     f5e:	53 01       	movw	r10, r6
     f60:	a8 2a       	or	r10, r24
     f62:	b9 2a       	or	r11, r25
     f64:	ca 2a       	or	r12, r26
     f66:	db 2a       	or	r13, r27
     f68:	25 96       	adiw	r28, 0x05	; 5
     f6a:	ac ae       	std	Y+60, r10	; 0x3c
     f6c:	bd ae       	std	Y+61, r11	; 0x3d
     f6e:	ce ae       	std	Y+62, r12	; 0x3e
     f70:	df ae       	std	Y+63, r13	; 0x3f
     f72:	25 97       	sbiw	r28, 0x05	; 5
     f74:	86 01       	movw	r16, r12
     f76:	75 01       	movw	r14, r10
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	e2 22       	and	r14, r18
     f82:	f3 22       	and	r15, r19
     f84:	04 23       	and	r16, r20
     f86:	15 23       	and	r17, r21
     f88:	a6 01       	movw	r20, r12
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	ad 96       	adiw	r28, 0x2d	; 45
     f90:	4c af       	std	Y+60, r20	; 0x3c
     f92:	5d af       	std	Y+61, r21	; 0x3d
     f94:	6e af       	std	Y+62, r22	; 0x3e
     f96:	7f af       	std	Y+63, r23	; 0x3f
     f98:	ad 97       	sbiw	r28, 0x2d	; 45
     f9a:	a9 a8       	ldd	r10, Y+49	; 0x31
     f9c:	ba a8       	ldd	r11, Y+50	; 0x32
     f9e:	cb a8       	ldd	r12, Y+51	; 0x33
     fa0:	dc a8       	ldd	r13, Y+52	; 0x34
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	7f ef       	ldi	r23, 0xFF	; 255
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a6 22       	and	r10, r22
     fac:	b7 22       	and	r11, r23
     fae:	c8 22       	and	r12, r24
     fb0:	d9 22       	and	r13, r25
     fb2:	89 a9       	ldd	r24, Y+49	; 0x31
     fb4:	9a a9       	ldd	r25, Y+50	; 0x32
     fb6:	ab a9       	ldd	r26, Y+51	; 0x33
     fb8:	bc a9       	ldd	r27, Y+52	; 0x34
     fba:	1d 01       	movw	r2, r26
     fbc:	44 24       	eor	r4, r4
     fbe:	55 24       	eor	r5, r5
     fc0:	c8 01       	movw	r24, r16
     fc2:	b7 01       	movw	r22, r14
     fc4:	a6 01       	movw	r20, r12
     fc6:	95 01       	movw	r18, r10
     fc8:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     fcc:	a9 96       	adiw	r28, 0x29	; 41
     fce:	6c af       	std	Y+60, r22	; 0x3c
     fd0:	7d af       	std	Y+61, r23	; 0x3d
     fd2:	8e af       	std	Y+62, r24	; 0x3e
     fd4:	9f af       	std	Y+63, r25	; 0x3f
     fd6:	a9 97       	sbiw	r28, 0x29	; 41
     fd8:	c8 01       	movw	r24, r16
     fda:	b7 01       	movw	r22, r14
     fdc:	a2 01       	movw	r20, r4
     fde:	91 01       	movw	r18, r2
     fe0:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     fe4:	3b 01       	movw	r6, r22
     fe6:	4c 01       	movw	r8, r24
     fe8:	ad 96       	adiw	r28, 0x2d	; 45
     fea:	6c ad       	ldd	r22, Y+60	; 0x3c
     fec:	7d ad       	ldd	r23, Y+61	; 0x3d
     fee:	8e ad       	ldd	r24, Y+62	; 0x3e
     ff0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ff2:	ad 97       	sbiw	r28, 0x2d	; 45
     ff4:	a6 01       	movw	r20, r12
     ff6:	95 01       	movw	r18, r10
     ff8:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
     ffc:	7b 01       	movw	r14, r22
     ffe:	8c 01       	movw	r16, r24
    1000:	ad 96       	adiw	r28, 0x2d	; 45
    1002:	6c ad       	ldd	r22, Y+60	; 0x3c
    1004:	7d ad       	ldd	r23, Y+61	; 0x3d
    1006:	8e ad       	ldd	r24, Y+62	; 0x3e
    1008:	9f ad       	ldd	r25, Y+63	; 0x3f
    100a:	ad 97       	sbiw	r28, 0x2d	; 45
    100c:	a2 01       	movw	r20, r4
    100e:	91 01       	movw	r18, r2
    1010:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1014:	5b 01       	movw	r10, r22
    1016:	6c 01       	movw	r12, r24
    1018:	a8 01       	movw	r20, r16
    101a:	97 01       	movw	r18, r14
    101c:	26 0d       	add	r18, r6
    101e:	37 1d       	adc	r19, r7
    1020:	48 1d       	adc	r20, r8
    1022:	59 1d       	adc	r21, r9
    1024:	a9 96       	adiw	r28, 0x29	; 41
    1026:	6c ac       	ldd	r6, Y+60	; 0x3c
    1028:	7d ac       	ldd	r7, Y+61	; 0x3d
    102a:	8e ac       	ldd	r8, Y+62	; 0x3e
    102c:	9f ac       	ldd	r9, Y+63	; 0x3f
    102e:	a9 97       	sbiw	r28, 0x29	; 41
    1030:	c4 01       	movw	r24, r8
    1032:	aa 27       	eor	r26, r26
    1034:	bb 27       	eor	r27, r27
    1036:	28 0f       	add	r18, r24
    1038:	39 1f       	adc	r19, r25
    103a:	4a 1f       	adc	r20, r26
    103c:	5b 1f       	adc	r21, r27
    103e:	2e 15       	cp	r18, r14
    1040:	3f 05       	cpc	r19, r15
    1042:	40 07       	cpc	r20, r16
    1044:	51 07       	cpc	r21, r17
    1046:	48 f4       	brcc	.+18     	; 0x105a <__stack+0x7fb>
    1048:	e1 2c       	mov	r14, r1
    104a:	f1 2c       	mov	r15, r1
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	06 2f       	mov	r16, r22
    1050:	11 2d       	mov	r17, r1
    1052:	ae 0c       	add	r10, r14
    1054:	bf 1c       	adc	r11, r15
    1056:	c0 1e       	adc	r12, r16
    1058:	d1 1e       	adc	r13, r17
    105a:	ca 01       	movw	r24, r20
    105c:	aa 27       	eor	r26, r26
    105e:	bb 27       	eor	r27, r27
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	6a 0d       	add	r22, r10
    1066:	7b 1d       	adc	r23, r11
    1068:	8c 1d       	adc	r24, r12
    106a:	9d 1d       	adc	r25, r13
    106c:	69 a4       	ldd	r6, Y+41	; 0x29
    106e:	7a a4       	ldd	r7, Y+42	; 0x2a
    1070:	8b a4       	ldd	r8, Y+43	; 0x2b
    1072:	9c a4       	ldd	r9, Y+44	; 0x2c
    1074:	66 16       	cp	r6, r22
    1076:	77 06       	cpc	r7, r23
    1078:	88 06       	cpc	r8, r24
    107a:	99 06       	cpc	r9, r25
    107c:	50 f1       	brcs	.+84     	; 0x10d2 <__stack+0x873>
    107e:	66 15       	cp	r22, r6
    1080:	77 05       	cpc	r23, r7
    1082:	88 05       	cpc	r24, r8
    1084:	99 05       	cpc	r25, r9
    1086:	09 f0       	breq	.+2      	; 0x108a <__stack+0x82b>
    1088:	4d c0       	rjmp	.+154    	; 0x1124 <__stack+0x8c5>
    108a:	d9 01       	movw	r26, r18
    108c:	99 27       	eor	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	a9 96       	adiw	r28, 0x29	; 41
    1092:	2c ad       	ldd	r18, Y+60	; 0x3c
    1094:	3d ad       	ldd	r19, Y+61	; 0x3d
    1096:	4e ad       	ldd	r20, Y+62	; 0x3e
    1098:	5f ad       	ldd	r21, Y+63	; 0x3f
    109a:	a9 97       	sbiw	r28, 0x29	; 41
    109c:	40 70       	andi	r20, 0x00	; 0
    109e:	50 70       	andi	r21, 0x00	; 0
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	a4 1f       	adc	r26, r20
    10a6:	b5 1f       	adc	r27, r21
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    10ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    10ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    10b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    10b2:	21 97       	sbiw	r28, 0x01	; 1
    10b4:	e2 96       	adiw	r28, 0x32	; 50
    10b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    10b8:	e2 97       	sbiw	r28, 0x32	; 50
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__stack+0x865>
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	44 1f       	adc	r20, r20
    10c2:	55 1f       	adc	r21, r21
    10c4:	0a 94       	dec	r0
    10c6:	d2 f7       	brpl	.-12     	; 0x10bc <__stack+0x85d>
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	4a 07       	cpc	r20, r26
    10ce:	5b 07       	cpc	r21, r27
    10d0:	48 f5       	brcc	.+82     	; 0x1124 <__stack+0x8c5>
    10d2:	25 96       	adiw	r28, 0x05	; 5
    10d4:	0c ad       	ldd	r16, Y+60	; 0x3c
    10d6:	1d ad       	ldd	r17, Y+61	; 0x3d
    10d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    10da:	3f ad       	ldd	r19, Y+63	; 0x3f
    10dc:	25 97       	sbiw	r28, 0x05	; 5
    10de:	01 50       	subi	r16, 0x01	; 1
    10e0:	10 40       	sbci	r17, 0x00	; 0
    10e2:	20 40       	sbci	r18, 0x00	; 0
    10e4:	30 40       	sbci	r19, 0x00	; 0
    10e6:	25 96       	adiw	r28, 0x05	; 5
    10e8:	0c af       	std	Y+60, r16	; 0x3c
    10ea:	1d af       	std	Y+61, r17	; 0x3d
    10ec:	2e af       	std	Y+62, r18	; 0x3e
    10ee:	3f af       	std	Y+63, r19	; 0x3f
    10f0:	25 97       	sbiw	r28, 0x05	; 5
    10f2:	18 c0       	rjmp	.+48     	; 0x1124 <__stack+0x8c5>
    10f4:	66 24       	eor	r6, r6
    10f6:	77 24       	eor	r7, r7
    10f8:	43 01       	movw	r8, r6
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	25 96       	adiw	r28, 0x05	; 5
    1104:	2c af       	std	Y+60, r18	; 0x3c
    1106:	3d af       	std	Y+61, r19	; 0x3d
    1108:	4e af       	std	Y+62, r20	; 0x3e
    110a:	5f af       	std	Y+63, r21	; 0x3f
    110c:	25 97       	sbiw	r28, 0x05	; 5
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__stack+0x8cb>
    1110:	66 24       	eor	r6, r6
    1112:	77 24       	eor	r7, r7
    1114:	43 01       	movw	r8, r6
    1116:	25 96       	adiw	r28, 0x05	; 5
    1118:	1c ae       	std	Y+60, r1	; 0x3c
    111a:	1d ae       	std	Y+61, r1	; 0x3d
    111c:	1e ae       	std	Y+62, r1	; 0x3e
    111e:	1f ae       	std	Y+63, r1	; 0x3f
    1120:	25 97       	sbiw	r28, 0x05	; 5
    1122:	03 c0       	rjmp	.+6      	; 0x112a <__stack+0x8cb>
    1124:	66 24       	eor	r6, r6
    1126:	77 24       	eor	r7, r7
    1128:	43 01       	movw	r8, r6
    112a:	fe 01       	movw	r30, r28
    112c:	b1 96       	adiw	r30, 0x21	; 33
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	df 01       	movw	r26, r30
    1132:	1d 92       	st	X+, r1
    1134:	8a 95       	dec	r24
    1136:	e9 f7       	brne	.-6      	; 0x1132 <__stack+0x8d3>
    1138:	25 96       	adiw	r28, 0x05	; 5
    113a:	ac ac       	ldd	r10, Y+60	; 0x3c
    113c:	bd ac       	ldd	r11, Y+61	; 0x3d
    113e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1140:	df ac       	ldd	r13, Y+63	; 0x3f
    1142:	25 97       	sbiw	r28, 0x05	; 5
    1144:	a9 a2       	std	Y+33, r10	; 0x21
    1146:	ba a2       	std	Y+34, r11	; 0x22
    1148:	cb a2       	std	Y+35, r12	; 0x23
    114a:	dc a2       	std	Y+36, r13	; 0x24
    114c:	6d a2       	std	Y+37, r6	; 0x25
    114e:	7e a2       	std	Y+38, r7	; 0x26
    1150:	8f a2       	std	Y+39, r8	; 0x27
    1152:	98 a6       	std	Y+40, r9	; 0x28
    1154:	22 96       	adiw	r28, 0x02	; 2
    1156:	2f ad       	ldd	r18, Y+63	; 0x3f
    1158:	22 97       	sbiw	r28, 0x02	; 2
    115a:	3a a1       	ldd	r19, Y+34	; 0x22
    115c:	4b a1       	ldd	r20, Y+35	; 0x23
    115e:	5c a1       	ldd	r21, Y+36	; 0x24
    1160:	66 2d       	mov	r22, r6
    1162:	7e a1       	ldd	r23, Y+38	; 0x26
    1164:	df a0       	ldd	r13, Y+39	; 0x27
    1166:	98 a5       	ldd	r25, Y+40	; 0x28
    1168:	e1 96       	adiw	r28, 0x31	; 49
    116a:	ec ac       	ldd	r14, Y+60	; 0x3c
    116c:	fd ac       	ldd	r15, Y+61	; 0x3d
    116e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1170:	1f ad       	ldd	r17, Y+63	; 0x3f
    1172:	e1 97       	sbiw	r28, 0x31	; 49
    1174:	e1 14       	cp	r14, r1
    1176:	f1 04       	cpc	r15, r1
    1178:	01 05       	cpc	r16, r1
    117a:	11 05       	cpc	r17, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <__stack+0x921>
    117e:	56 c0       	rjmp	.+172    	; 0x122c <__stack+0x9cd>
    1180:	21 95       	neg	r18
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	12 16       	cp	r1, r18
    1186:	08 f0       	brcs	.+2      	; 0x118a <__stack+0x92b>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	31 95       	neg	r19
    118c:	e1 e0       	ldi	r30, 0x01	; 1
    118e:	13 16       	cp	r1, r19
    1190:	08 f0       	brcs	.+2      	; 0x1194 <__stack+0x935>
    1192:	e0 e0       	ldi	r30, 0x00	; 0
    1194:	93 2e       	mov	r9, r19
    1196:	98 1a       	sub	r9, r24
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	39 15       	cp	r19, r9
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__stack+0x941>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	e8 2b       	or	r30, r24
    11a2:	41 95       	neg	r20
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	14 16       	cp	r1, r20
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__stack+0x94d>
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	a4 2e       	mov	r10, r20
    11ae:	ae 1a       	sub	r10, r30
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	4a 15       	cp	r20, r10
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <__stack+0x959>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	f8 2b       	or	r31, r24
    11ba:	51 95       	neg	r21
    11bc:	e1 e0       	ldi	r30, 0x01	; 1
    11be:	15 16       	cp	r1, r21
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <__stack+0x965>
    11c2:	e0 e0       	ldi	r30, 0x00	; 0
    11c4:	b5 2e       	mov	r11, r21
    11c6:	bf 1a       	sub	r11, r31
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	5b 15       	cp	r21, r11
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <__stack+0x971>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	e8 2b       	or	r30, r24
    11d2:	61 95       	neg	r22
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	16 16       	cp	r1, r22
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <__stack+0x97d>
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	a6 2f       	mov	r26, r22
    11de:	ae 1b       	sub	r26, r30
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	6a 17       	cp	r22, r26
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__stack+0x989>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	f8 2b       	or	r31, r24
    11ea:	71 95       	neg	r23
    11ec:	e1 e0       	ldi	r30, 0x01	; 1
    11ee:	17 16       	cp	r1, r23
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <__stack+0x995>
    11f2:	e0 e0       	ldi	r30, 0x00	; 0
    11f4:	c7 2e       	mov	r12, r23
    11f6:	cf 1a       	sub	r12, r31
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	7c 15       	cp	r23, r12
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__stack+0x9a1>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	e8 2b       	or	r30, r24
    1202:	8d 2d       	mov	r24, r13
    1204:	81 95       	neg	r24
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	18 16       	cp	r1, r24
    120a:	08 f0       	brcs	.+2      	; 0x120e <__stack+0x9af>
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	d8 2e       	mov	r13, r24
    1210:	de 1a       	sub	r13, r30
    1212:	e1 e0       	ldi	r30, 0x01	; 1
    1214:	8d 15       	cp	r24, r13
    1216:	08 f0       	brcs	.+2      	; 0x121a <__stack+0x9bb>
    1218:	e0 e0       	ldi	r30, 0x00	; 0
    121a:	fe 2b       	or	r31, r30
    121c:	89 2f       	mov	r24, r25
    121e:	81 95       	neg	r24
    1220:	39 2d       	mov	r19, r9
    1222:	a5 01       	movw	r20, r10
    1224:	6a 2f       	mov	r22, r26
    1226:	7c 2d       	mov	r23, r12
    1228:	98 2f       	mov	r25, r24
    122a:	9f 1b       	sub	r25, r31
    122c:	8d 2d       	mov	r24, r13
    122e:	ce 58       	subi	r28, 0x8E	; 142
    1230:	df 4f       	sbci	r29, 0xFF	; 255
    1232:	e2 e1       	ldi	r30, 0x12	; 18
    1234:	0c 94 0b 3e 	jmp	0x7c16	; 0x7c16 <__epilogue_restores__>

00001238 <__moddi3>:
    1238:	a7 e7       	ldi	r26, 0x77	; 119
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e2       	ldi	r30, 0x22	; 34
    123e:	f9 e0       	ldi	r31, 0x09	; 9
    1240:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__prologue_saves__>
    1244:	98 2e       	mov	r9, r24
    1246:	89 2e       	mov	r8, r25
    1248:	71 2e       	mov	r7, r17
    124a:	88 e0       	ldi	r24, 0x08	; 8
    124c:	fe 01       	movw	r30, r28
    124e:	31 96       	adiw	r30, 0x01	; 1
    1250:	df 01       	movw	r26, r30
    1252:	68 2e       	mov	r6, r24
    1254:	1d 92       	st	X+, r1
    1256:	6a 94       	dec	r6
    1258:	e9 f7       	brne	.-6      	; 0x1254 <__moddi3+0x1c>
    125a:	29 83       	std	Y+1, r18	; 0x01
    125c:	3a 83       	std	Y+2, r19	; 0x02
    125e:	4b 83       	std	Y+3, r20	; 0x03
    1260:	5c 83       	std	Y+4, r21	; 0x04
    1262:	6d 83       	std	Y+5, r22	; 0x05
    1264:	7e 83       	std	Y+6, r23	; 0x06
    1266:	9f 82       	std	Y+7, r9	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
    126a:	fe 01       	movw	r30, r28
    126c:	39 96       	adiw	r30, 0x09	; 9
    126e:	df 01       	movw	r26, r30
    1270:	1d 92       	st	X+, r1
    1272:	8a 95       	dec	r24
    1274:	e9 f7       	brne	.-6      	; 0x1270 <__moddi3+0x38>
    1276:	a9 86       	std	Y+9, r10	; 0x09
    1278:	ba 86       	std	Y+10, r11	; 0x0a
    127a:	cb 86       	std	Y+11, r12	; 0x0b
    127c:	dc 86       	std	Y+12, r13	; 0x0c
    127e:	ed 86       	std	Y+13, r14	; 0x0d
    1280:	fe 86       	std	Y+14, r15	; 0x0e
    1282:	0f 87       	std	Y+15, r16	; 0x0f
    1284:	18 8b       	std	Y+16, r17	; 0x10
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	af 81       	ldd	r26, Y+7	; 0x07
    128c:	b8 85       	ldd	r27, Y+8	; 0x08
    128e:	b7 fd       	sbrc	r27, 7
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <__moddi3+0x68>
    1292:	e1 96       	adiw	r28, 0x31	; 49
    1294:	1c ae       	std	Y+60, r1	; 0x3c
    1296:	1d ae       	std	Y+61, r1	; 0x3d
    1298:	1e ae       	std	Y+62, r1	; 0x3e
    129a:	1f ae       	std	Y+63, r1	; 0x3f
    129c:	e1 97       	sbiw	r28, 0x31	; 49
    129e:	64 c0       	rjmp	.+200    	; 0x1368 <__moddi3+0x130>
    12a0:	21 95       	neg	r18
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	12 16       	cp	r1, r18
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <__moddi3+0x72>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	31 95       	neg	r19
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	13 16       	cp	r1, r19
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <__moddi3+0x7c>
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b3 2f       	mov	r27, r19
    12b6:	b8 1b       	sub	r27, r24
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	3b 17       	cp	r19, r27
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <__moddi3+0x88>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	98 2b       	or	r25, r24
    12c2:	41 95       	neg	r20
    12c4:	31 e0       	ldi	r19, 0x01	; 1
    12c6:	14 16       	cp	r1, r20
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <__moddi3+0x94>
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	a4 2f       	mov	r26, r20
    12ce:	a9 1b       	sub	r26, r25
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	4a 17       	cp	r20, r26
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <__moddi3+0xa0>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	38 2b       	or	r19, r24
    12da:	51 95       	neg	r21
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	15 16       	cp	r1, r21
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__moddi3+0xac>
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	f5 2f       	mov	r31, r21
    12e6:	f3 1b       	sub	r31, r19
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	5f 17       	cp	r21, r31
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <__moddi3+0xb8>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	98 2b       	or	r25, r24
    12f2:	61 95       	neg	r22
    12f4:	31 e0       	ldi	r19, 0x01	; 1
    12f6:	16 16       	cp	r1, r22
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <__moddi3+0xc4>
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	e6 2f       	mov	r30, r22
    12fe:	e9 1b       	sub	r30, r25
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	6e 17       	cp	r22, r30
    1304:	08 f0       	brcs	.+2      	; 0x1308 <__moddi3+0xd0>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	38 2b       	or	r19, r24
    130a:	71 95       	neg	r23
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	17 16       	cp	r1, r23
    1310:	08 f0       	brcs	.+2      	; 0x1314 <__moddi3+0xdc>
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	57 2f       	mov	r21, r23
    1316:	53 1b       	sub	r21, r19
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	75 17       	cp	r23, r21
    131c:	08 f0       	brcs	.+2      	; 0x1320 <__moddi3+0xe8>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	48 2b       	or	r20, r24
    1322:	89 2d       	mov	r24, r9
    1324:	81 95       	neg	r24
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	18 16       	cp	r1, r24
    132a:	08 f0       	brcs	.+2      	; 0x132e <__moddi3+0xf6>
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	68 2e       	mov	r6, r24
    1330:	64 1a       	sub	r6, r20
    1332:	46 2d       	mov	r20, r6
    1334:	31 e0       	ldi	r19, 0x01	; 1
    1336:	86 15       	cp	r24, r6
    1338:	08 f0       	brcs	.+2      	; 0x133c <__moddi3+0x104>
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	93 2b       	or	r25, r19
    133e:	88 2d       	mov	r24, r8
    1340:	81 95       	neg	r24
    1342:	89 1b       	sub	r24, r25
    1344:	29 83       	std	Y+1, r18	; 0x01
    1346:	ba 83       	std	Y+2, r27	; 0x02
    1348:	ab 83       	std	Y+3, r26	; 0x03
    134a:	fc 83       	std	Y+4, r31	; 0x04
    134c:	ed 83       	std	Y+5, r30	; 0x05
    134e:	5e 83       	std	Y+6, r21	; 0x06
    1350:	4f 83       	std	Y+7, r20	; 0x07
    1352:	88 87       	std	Y+8, r24	; 0x08
    1354:	2f ef       	ldi	r18, 0xFF	; 255
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f ef       	ldi	r20, 0xFF	; 255
    135a:	5f ef       	ldi	r21, 0xFF	; 255
    135c:	e1 96       	adiw	r28, 0x31	; 49
    135e:	2c af       	std	Y+60, r18	; 0x3c
    1360:	3d af       	std	Y+61, r19	; 0x3d
    1362:	4e af       	std	Y+62, r20	; 0x3e
    1364:	5f af       	std	Y+63, r21	; 0x3f
    1366:	e1 97       	sbiw	r28, 0x31	; 49
    1368:	8d 85       	ldd	r24, Y+13	; 0x0d
    136a:	9e 85       	ldd	r25, Y+14	; 0x0e
    136c:	af 85       	ldd	r26, Y+15	; 0x0f
    136e:	b8 89       	ldd	r27, Y+16	; 0x10
    1370:	b7 ff       	sbrs	r27, 7
    1372:	5a c0       	rjmp	.+180    	; 0x1428 <__moddi3+0x1f0>
    1374:	a1 94       	neg	r10
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	1a 14       	cp	r1, r10
    137a:	08 f0       	brcs	.+2      	; 0x137e <__moddi3+0x146>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	b1 94       	neg	r11
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	1b 14       	cp	r1, r11
    1384:	08 f0       	brcs	.+2      	; 0x1388 <__moddi3+0x150>
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	6b 2d       	mov	r22, r11
    138a:	68 1b       	sub	r22, r24
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	b6 16       	cp	r11, r22
    1390:	08 f0       	brcs	.+2      	; 0x1394 <__moddi3+0x15c>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	98 2b       	or	r25, r24
    1396:	c1 94       	neg	r12
    1398:	21 e0       	ldi	r18, 0x01	; 1
    139a:	1c 14       	cp	r1, r12
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <__moddi3+0x168>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	5c 2d       	mov	r21, r12
    13a2:	59 1b       	sub	r21, r25
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	c5 16       	cp	r12, r21
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <__moddi3+0x174>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	28 2b       	or	r18, r24
    13ae:	d1 94       	neg	r13
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	1d 14       	cp	r1, r13
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__moddi3+0x180>
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	4d 2d       	mov	r20, r13
    13ba:	42 1b       	sub	r20, r18
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	d4 16       	cp	r13, r20
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <__moddi3+0x18c>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	98 2b       	or	r25, r24
    13c6:	e1 94       	neg	r14
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	1e 14       	cp	r1, r14
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <__moddi3+0x198>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3e 2d       	mov	r19, r14
    13d2:	39 1b       	sub	r19, r25
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	e3 16       	cp	r14, r19
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <__moddi3+0x1a4>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	28 2b       	or	r18, r24
    13de:	f1 94       	neg	r15
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	1f 14       	cp	r1, r15
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <__moddi3+0x1b0>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	7f 2d       	mov	r23, r15
    13ea:	72 1b       	sub	r23, r18
    13ec:	27 2f       	mov	r18, r23
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	f7 16       	cp	r15, r23
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__moddi3+0x1be>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	98 2b       	or	r25, r24
    13f8:	01 95       	neg	r16
    13fa:	11 e0       	ldi	r17, 0x01	; 1
    13fc:	10 16       	cp	r1, r16
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <__moddi3+0x1ca>
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	80 2f       	mov	r24, r16
    1404:	89 1b       	sub	r24, r25
    1406:	98 2f       	mov	r25, r24
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	09 17       	cp	r16, r25
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__moddi3+0x1d8>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	18 2b       	or	r17, r24
    1412:	87 2d       	mov	r24, r7
    1414:	81 95       	neg	r24
    1416:	81 1b       	sub	r24, r17
    1418:	a9 86       	std	Y+9, r10	; 0x09
    141a:	6a 87       	std	Y+10, r22	; 0x0a
    141c:	5b 87       	std	Y+11, r21	; 0x0b
    141e:	4c 87       	std	Y+12, r20	; 0x0c
    1420:	3d 87       	std	Y+13, r19	; 0x0d
    1422:	2e 87       	std	Y+14, r18	; 0x0e
    1424:	9f 87       	std	Y+15, r25	; 0x0f
    1426:	88 8b       	std	Y+16, r24	; 0x10
    1428:	99 81       	ldd	r25, Y+1	; 0x01
    142a:	2a 81       	ldd	r18, Y+2	; 0x02
    142c:	3b 81       	ldd	r19, Y+3	; 0x03
    142e:	4c 81       	ldd	r20, Y+4	; 0x04
    1430:	5d 81       	ldd	r21, Y+5	; 0x05
    1432:	6e 81       	ldd	r22, Y+6	; 0x06
    1434:	7f 81       	ldd	r23, Y+7	; 0x07
    1436:	a8 85       	ldd	r26, Y+8	; 0x08
    1438:	b9 85       	ldd	r27, Y+9	; 0x09
    143a:	1a 85       	ldd	r17, Y+10	; 0x0a
    143c:	0b 85       	ldd	r16, Y+11	; 0x0b
    143e:	fc 84       	ldd	r15, Y+12	; 0x0c
    1440:	ed 84       	ldd	r14, Y+13	; 0x0d
    1442:	de 84       	ldd	r13, Y+14	; 0x0e
    1444:	cf 84       	ldd	r12, Y+15	; 0x0f
    1446:	b8 88       	ldd	r11, Y+16	; 0x10
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	e9 e1       	ldi	r30, 0x19	; 25
    144c:	8e 2e       	mov	r8, r30
    144e:	91 2c       	mov	r9, r1
    1450:	8c 0e       	add	r8, r28
    1452:	9d 1e       	adc	r9, r29
    1454:	f4 01       	movw	r30, r8
    1456:	68 2e       	mov	r6, r24
    1458:	11 92       	st	Z+, r1
    145a:	6a 94       	dec	r6
    145c:	e9 f7       	brne	.-6      	; 0x1458 <__moddi3+0x220>
    145e:	99 8f       	std	Y+25, r25	; 0x19
    1460:	2a 8f       	std	Y+26, r18	; 0x1a
    1462:	3b 8f       	std	Y+27, r19	; 0x1b
    1464:	4c 8f       	std	Y+28, r20	; 0x1c
    1466:	5d 8f       	std	Y+29, r21	; 0x1d
    1468:	6e 8f       	std	Y+30, r22	; 0x1e
    146a:	7f 8f       	std	Y+31, r23	; 0x1f
    146c:	a8 a3       	std	Y+32, r26	; 0x20
    146e:	9e 01       	movw	r18, r28
    1470:	2f 5d       	subi	r18, 0xDF	; 223
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	f9 01       	movw	r30, r18
    1476:	11 92       	st	Z+, r1
    1478:	8a 95       	dec	r24
    147a:	e9 f7       	brne	.-6      	; 0x1476 <__moddi3+0x23e>
    147c:	b9 a3       	std	Y+33, r27	; 0x21
    147e:	1a a3       	std	Y+34, r17	; 0x22
    1480:	0b a3       	std	Y+35, r16	; 0x23
    1482:	fc a2       	std	Y+36, r15	; 0x24
    1484:	ed a2       	std	Y+37, r14	; 0x25
    1486:	de a2       	std	Y+38, r13	; 0x26
    1488:	cf a2       	std	Y+39, r12	; 0x27
    148a:	b8 a6       	std	Y+40, r11	; 0x28
    148c:	29 a0       	ldd	r2, Y+33	; 0x21
    148e:	3a a0       	ldd	r3, Y+34	; 0x22
    1490:	4b a0       	ldd	r4, Y+35	; 0x23
    1492:	5c a0       	ldd	r5, Y+36	; 0x24
    1494:	ad a0       	ldd	r10, Y+37	; 0x25
    1496:	be a0       	ldd	r11, Y+38	; 0x26
    1498:	cf a0       	ldd	r12, Y+39	; 0x27
    149a:	d8 a4       	ldd	r13, Y+40	; 0x28
    149c:	49 8d       	ldd	r20, Y+25	; 0x19
    149e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    14a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    14a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    14a4:	e5 96       	adiw	r28, 0x35	; 53
    14a6:	4f af       	std	Y+63, r20	; 0x3f
    14a8:	e5 97       	sbiw	r28, 0x35	; 53
    14aa:	e6 96       	adiw	r28, 0x36	; 54
    14ac:	5f af       	std	Y+63, r21	; 0x3f
    14ae:	e6 97       	sbiw	r28, 0x36	; 54
    14b0:	e7 96       	adiw	r28, 0x37	; 55
    14b2:	6f af       	std	Y+63, r22	; 0x3f
    14b4:	e7 97       	sbiw	r28, 0x37	; 55
    14b6:	e8 96       	adiw	r28, 0x38	; 56
    14b8:	7f af       	std	Y+63, r23	; 0x3f
    14ba:	e8 97       	sbiw	r28, 0x38	; 56
    14bc:	e8 96       	adiw	r28, 0x38	; 56
    14be:	6c ac       	ldd	r6, Y+60	; 0x3c
    14c0:	7d ac       	ldd	r7, Y+61	; 0x3d
    14c2:	8e ac       	ldd	r8, Y+62	; 0x3e
    14c4:	9f ac       	ldd	r9, Y+63	; 0x3f
    14c6:	e8 97       	sbiw	r28, 0x38	; 56
    14c8:	2d 96       	adiw	r28, 0x0d	; 13
    14ca:	6c ae       	std	Y+60, r6	; 0x3c
    14cc:	7d ae       	std	Y+61, r7	; 0x3d
    14ce:	8e ae       	std	Y+62, r8	; 0x3e
    14d0:	9f ae       	std	Y+63, r9	; 0x3f
    14d2:	2d 97       	sbiw	r28, 0x0d	; 13
    14d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    14da:	38 a1       	ldd	r19, Y+32	; 0x20
    14dc:	3c 01       	movw	r6, r24
    14de:	49 01       	movw	r8, r18
    14e0:	61 96       	adiw	r28, 0x11	; 17
    14e2:	6c ae       	std	Y+60, r6	; 0x3c
    14e4:	7d ae       	std	Y+61, r7	; 0x3d
    14e6:	8e ae       	std	Y+62, r8	; 0x3e
    14e8:	9f ae       	std	Y+63, r9	; 0x3f
    14ea:	61 97       	sbiw	r28, 0x11	; 17
    14ec:	a1 14       	cp	r10, r1
    14ee:	b1 04       	cpc	r11, r1
    14f0:	c1 04       	cpc	r12, r1
    14f2:	d1 04       	cpc	r13, r1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <__moddi3+0x2c0>
    14f6:	28 c3       	rjmp	.+1616   	; 0x1b48 <__moddi3+0x910>
    14f8:	62 14       	cp	r6, r2
    14fa:	73 04       	cpc	r7, r3
    14fc:	84 04       	cpc	r8, r4
    14fe:	95 04       	cpc	r9, r5
    1500:	08 f0       	brcs	.+2      	; 0x1504 <__moddi3+0x2cc>
    1502:	0e c1       	rjmp	.+540    	; 0x1720 <__moddi3+0x4e8>
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	20 16       	cp	r2, r16
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	30 06       	cpc	r3, r16
    150c:	01 e0       	ldi	r16, 0x01	; 1
    150e:	40 06       	cpc	r4, r16
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	50 06       	cpc	r5, r16
    1514:	88 f4       	brcc	.+34     	; 0x1538 <__moddi3+0x300>
    1516:	1f ef       	ldi	r17, 0xFF	; 255
    1518:	21 16       	cp	r2, r17
    151a:	31 04       	cpc	r3, r1
    151c:	41 04       	cpc	r4, r1
    151e:	51 04       	cpc	r5, r1
    1520:	39 f0       	breq	.+14     	; 0x1530 <__moddi3+0x2f8>
    1522:	30 f0       	brcs	.+12     	; 0x1530 <__moddi3+0x2f8>
    1524:	88 e0       	ldi	r24, 0x08	; 8
    1526:	e8 2e       	mov	r14, r24
    1528:	f1 2c       	mov	r15, r1
    152a:	01 2d       	mov	r16, r1
    152c:	11 2d       	mov	r17, r1
    152e:	18 c0       	rjmp	.+48     	; 0x1560 <__moddi3+0x328>
    1530:	ee 24       	eor	r14, r14
    1532:	ff 24       	eor	r15, r15
    1534:	87 01       	movw	r16, r14
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <__moddi3+0x328>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	22 16       	cp	r2, r18
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	32 06       	cpc	r3, r18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	42 06       	cpc	r4, r18
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	52 06       	cpc	r5, r18
    1548:	30 f0       	brcs	.+12     	; 0x1556 <__moddi3+0x31e>
    154a:	b8 e1       	ldi	r27, 0x18	; 24
    154c:	eb 2e       	mov	r14, r27
    154e:	f1 2c       	mov	r15, r1
    1550:	01 2d       	mov	r16, r1
    1552:	11 2d       	mov	r17, r1
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <__moddi3+0x328>
    1556:	a0 e1       	ldi	r26, 0x10	; 16
    1558:	ea 2e       	mov	r14, r26
    155a:	f1 2c       	mov	r15, r1
    155c:	01 2d       	mov	r16, r1
    155e:	11 2d       	mov	r17, r1
    1560:	d2 01       	movw	r26, r4
    1562:	c1 01       	movw	r24, r2
    1564:	0e 2c       	mov	r0, r14
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <__moddi3+0x338>
    1568:	b6 95       	lsr	r27
    156a:	a7 95       	ror	r26
    156c:	97 95       	ror	r25
    156e:	87 95       	ror	r24
    1570:	0a 94       	dec	r0
    1572:	d2 f7       	brpl	.-12     	; 0x1568 <__moddi3+0x330>
    1574:	83 59       	subi	r24, 0x93	; 147
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	dc 01       	movw	r26, r24
    157a:	2c 91       	ld	r18, X
    157c:	80 e2       	ldi	r24, 0x20	; 32
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	8e 19       	sub	r24, r14
    1586:	9f 09       	sbc	r25, r15
    1588:	a0 0b       	sbc	r26, r16
    158a:	b1 0b       	sbc	r27, r17
    158c:	5c 01       	movw	r10, r24
    158e:	6d 01       	movw	r12, r26
    1590:	a2 1a       	sub	r10, r18
    1592:	b1 08       	sbc	r11, r1
    1594:	c1 08       	sbc	r12, r1
    1596:	d1 08       	sbc	r13, r1
    1598:	65 96       	adiw	r28, 0x15	; 21
    159a:	ac ae       	std	Y+60, r10	; 0x3c
    159c:	bd ae       	std	Y+61, r11	; 0x3d
    159e:	ce ae       	std	Y+62, r12	; 0x3e
    15a0:	df ae       	std	Y+63, r13	; 0x3f
    15a2:	65 97       	sbiw	r28, 0x15	; 21
    15a4:	a1 14       	cp	r10, r1
    15a6:	b1 04       	cpc	r11, r1
    15a8:	c1 04       	cpc	r12, r1
    15aa:	d1 04       	cpc	r13, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <__moddi3+0x378>
    15ae:	45 c0       	rjmp	.+138    	; 0x163a <__moddi3+0x402>
    15b0:	62 96       	adiw	r28, 0x12	; 18
    15b2:	6f ad       	ldd	r22, Y+63	; 0x3f
    15b4:	62 97       	sbiw	r28, 0x12	; 18
    15b6:	06 2e       	mov	r0, r22
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <__moddi3+0x38a>
    15ba:	22 0c       	add	r2, r2
    15bc:	33 1c       	adc	r3, r3
    15be:	44 1c       	adc	r4, r4
    15c0:	55 1c       	adc	r5, r5
    15c2:	0a 94       	dec	r0
    15c4:	d2 f7       	brpl	.-12     	; 0x15ba <__moddi3+0x382>
    15c6:	a4 01       	movw	r20, r8
    15c8:	93 01       	movw	r18, r6
    15ca:	06 2e       	mov	r0, r22
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__moddi3+0x39e>
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	44 1f       	adc	r20, r20
    15d4:	55 1f       	adc	r21, r21
    15d6:	0a 94       	dec	r0
    15d8:	d2 f7       	brpl	.-12     	; 0x15ce <__moddi3+0x396>
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	8a 19       	sub	r24, r10
    15e0:	9b 09       	sbc	r25, r11
    15e2:	e8 96       	adiw	r28, 0x38	; 56
    15e4:	cc ac       	ldd	r12, Y+60	; 0x3c
    15e6:	dd ac       	ldd	r13, Y+61	; 0x3d
    15e8:	ee ac       	ldd	r14, Y+62	; 0x3e
    15ea:	ff ac       	ldd	r15, Y+63	; 0x3f
    15ec:	e8 97       	sbiw	r28, 0x38	; 56
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <__moddi3+0x3c0>
    15f0:	f6 94       	lsr	r15
    15f2:	e7 94       	ror	r14
    15f4:	d7 94       	ror	r13
    15f6:	c7 94       	ror	r12
    15f8:	8a 95       	dec	r24
    15fa:	d2 f7       	brpl	.-12     	; 0x15f0 <__moddi3+0x3b8>
    15fc:	87 01       	movw	r16, r14
    15fe:	76 01       	movw	r14, r12
    1600:	e2 2a       	or	r14, r18
    1602:	f3 2a       	or	r15, r19
    1604:	04 2b       	or	r16, r20
    1606:	15 2b       	or	r17, r21
    1608:	61 96       	adiw	r28, 0x11	; 17
    160a:	ec ae       	std	Y+60, r14	; 0x3c
    160c:	fd ae       	std	Y+61, r15	; 0x3d
    160e:	0e af       	std	Y+62, r16	; 0x3e
    1610:	1f af       	std	Y+63, r17	; 0x3f
    1612:	61 97       	sbiw	r28, 0x11	; 17
    1614:	e8 96       	adiw	r28, 0x38	; 56
    1616:	0c ad       	ldd	r16, Y+60	; 0x3c
    1618:	1d ad       	ldd	r17, Y+61	; 0x3d
    161a:	2e ad       	ldd	r18, Y+62	; 0x3e
    161c:	3f ad       	ldd	r19, Y+63	; 0x3f
    161e:	e8 97       	sbiw	r28, 0x38	; 56
    1620:	04 c0       	rjmp	.+8      	; 0x162a <__moddi3+0x3f2>
    1622:	00 0f       	add	r16, r16
    1624:	11 1f       	adc	r17, r17
    1626:	22 1f       	adc	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	6a 95       	dec	r22
    162c:	d2 f7       	brpl	.-12     	; 0x1622 <__moddi3+0x3ea>
    162e:	2d 96       	adiw	r28, 0x0d	; 13
    1630:	0c af       	std	Y+60, r16	; 0x3c
    1632:	1d af       	std	Y+61, r17	; 0x3d
    1634:	2e af       	std	Y+62, r18	; 0x3e
    1636:	3f af       	std	Y+63, r19	; 0x3f
    1638:	2d 97       	sbiw	r28, 0x0d	; 13
    163a:	32 01       	movw	r6, r4
    163c:	88 24       	eor	r8, r8
    163e:	99 24       	eor	r9, r9
    1640:	a2 01       	movw	r20, r4
    1642:	91 01       	movw	r18, r2
    1644:	40 70       	andi	r20, 0x00	; 0
    1646:	50 70       	andi	r21, 0x00	; 0
    1648:	69 96       	adiw	r28, 0x19	; 25
    164a:	2c af       	std	Y+60, r18	; 0x3c
    164c:	3d af       	std	Y+61, r19	; 0x3d
    164e:	4e af       	std	Y+62, r20	; 0x3e
    1650:	5f af       	std	Y+63, r21	; 0x3f
    1652:	69 97       	sbiw	r28, 0x19	; 25
    1654:	61 96       	adiw	r28, 0x11	; 17
    1656:	6c ad       	ldd	r22, Y+60	; 0x3c
    1658:	7d ad       	ldd	r23, Y+61	; 0x3d
    165a:	8e ad       	ldd	r24, Y+62	; 0x3e
    165c:	9f ad       	ldd	r25, Y+63	; 0x3f
    165e:	61 97       	sbiw	r28, 0x11	; 17
    1660:	a4 01       	movw	r20, r8
    1662:	93 01       	movw	r18, r6
    1664:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1668:	7b 01       	movw	r14, r22
    166a:	8c 01       	movw	r16, r24
    166c:	61 96       	adiw	r28, 0x11	; 17
    166e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1670:	7d ad       	ldd	r23, Y+61	; 0x3d
    1672:	8e ad       	ldd	r24, Y+62	; 0x3e
    1674:	9f ad       	ldd	r25, Y+63	; 0x3f
    1676:	61 97       	sbiw	r28, 0x11	; 17
    1678:	a4 01       	movw	r20, r8
    167a:	93 01       	movw	r18, r6
    167c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1680:	ca 01       	movw	r24, r20
    1682:	b9 01       	movw	r22, r18
    1684:	69 96       	adiw	r28, 0x19	; 25
    1686:	2c ad       	ldd	r18, Y+60	; 0x3c
    1688:	3d ad       	ldd	r19, Y+61	; 0x3d
    168a:	4e ad       	ldd	r20, Y+62	; 0x3e
    168c:	5f ad       	ldd	r21, Y+63	; 0x3f
    168e:	69 97       	sbiw	r28, 0x19	; 25
    1690:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
    1698:	87 01       	movw	r16, r14
    169a:	ff 24       	eor	r15, r15
    169c:	ee 24       	eor	r14, r14
    169e:	2d 96       	adiw	r28, 0x0d	; 13
    16a0:	ac ac       	ldd	r10, Y+60	; 0x3c
    16a2:	bd ac       	ldd	r11, Y+61	; 0x3d
    16a4:	ce ac       	ldd	r12, Y+62	; 0x3e
    16a6:	df ac       	ldd	r13, Y+63	; 0x3f
    16a8:	2d 97       	sbiw	r28, 0x0d	; 13
    16aa:	c6 01       	movw	r24, r12
    16ac:	aa 27       	eor	r26, r26
    16ae:	bb 27       	eor	r27, r27
    16b0:	57 01       	movw	r10, r14
    16b2:	68 01       	movw	r12, r16
    16b4:	a8 2a       	or	r10, r24
    16b6:	b9 2a       	or	r11, r25
    16b8:	ca 2a       	or	r12, r26
    16ba:	db 2a       	or	r13, r27
    16bc:	a2 16       	cp	r10, r18
    16be:	b3 06       	cpc	r11, r19
    16c0:	c4 06       	cpc	r12, r20
    16c2:	d5 06       	cpc	r13, r21
    16c4:	90 f4       	brcc	.+36     	; 0x16ea <__moddi3+0x4b2>
    16c6:	a2 0c       	add	r10, r2
    16c8:	b3 1c       	adc	r11, r3
    16ca:	c4 1c       	adc	r12, r4
    16cc:	d5 1c       	adc	r13, r5
    16ce:	a2 14       	cp	r10, r2
    16d0:	b3 04       	cpc	r11, r3
    16d2:	c4 04       	cpc	r12, r4
    16d4:	d5 04       	cpc	r13, r5
    16d6:	48 f0       	brcs	.+18     	; 0x16ea <__moddi3+0x4b2>
    16d8:	a2 16       	cp	r10, r18
    16da:	b3 06       	cpc	r11, r19
    16dc:	c4 06       	cpc	r12, r20
    16de:	d5 06       	cpc	r13, r21
    16e0:	20 f4       	brcc	.+8      	; 0x16ea <__moddi3+0x4b2>
    16e2:	a2 0c       	add	r10, r2
    16e4:	b3 1c       	adc	r11, r3
    16e6:	c4 1c       	adc	r12, r4
    16e8:	d5 1c       	adc	r13, r5
    16ea:	a2 1a       	sub	r10, r18
    16ec:	b3 0a       	sbc	r11, r19
    16ee:	c4 0a       	sbc	r12, r20
    16f0:	d5 0a       	sbc	r13, r21
    16f2:	c6 01       	movw	r24, r12
    16f4:	b5 01       	movw	r22, r10
    16f6:	a4 01       	movw	r20, r8
    16f8:	93 01       	movw	r18, r6
    16fa:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    16fe:	7b 01       	movw	r14, r22
    1700:	8c 01       	movw	r16, r24
    1702:	c6 01       	movw	r24, r12
    1704:	b5 01       	movw	r22, r10
    1706:	a4 01       	movw	r20, r8
    1708:	93 01       	movw	r18, r6
    170a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    170e:	ca 01       	movw	r24, r20
    1710:	b9 01       	movw	r22, r18
    1712:	69 96       	adiw	r28, 0x19	; 25
    1714:	2c ad       	ldd	r18, Y+60	; 0x3c
    1716:	3d ad       	ldd	r19, Y+61	; 0x3d
    1718:	4e ad       	ldd	r20, Y+62	; 0x3e
    171a:	5f ad       	ldd	r21, Y+63	; 0x3f
    171c:	69 97       	sbiw	r28, 0x19	; 25
    171e:	c8 c1       	rjmp	.+912    	; 0x1ab0 <__moddi3+0x878>
    1720:	21 14       	cp	r2, r1
    1722:	31 04       	cpc	r3, r1
    1724:	41 04       	cpc	r4, r1
    1726:	51 04       	cpc	r5, r1
    1728:	71 f4       	brne	.+28     	; 0x1746 <__moddi3+0x50e>
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    173e:	c9 01       	movw	r24, r18
    1740:	da 01       	movw	r26, r20
    1742:	1c 01       	movw	r2, r24
    1744:	2d 01       	movw	r4, r26
    1746:	00 e0       	ldi	r16, 0x00	; 0
    1748:	20 16       	cp	r2, r16
    174a:	00 e0       	ldi	r16, 0x00	; 0
    174c:	30 06       	cpc	r3, r16
    174e:	01 e0       	ldi	r16, 0x01	; 1
    1750:	40 06       	cpc	r4, r16
    1752:	00 e0       	ldi	r16, 0x00	; 0
    1754:	50 06       	cpc	r5, r16
    1756:	88 f4       	brcc	.+34     	; 0x177a <__moddi3+0x542>
    1758:	1f ef       	ldi	r17, 0xFF	; 255
    175a:	21 16       	cp	r2, r17
    175c:	31 04       	cpc	r3, r1
    175e:	41 04       	cpc	r4, r1
    1760:	51 04       	cpc	r5, r1
    1762:	39 f0       	breq	.+14     	; 0x1772 <__moddi3+0x53a>
    1764:	30 f0       	brcs	.+12     	; 0x1772 <__moddi3+0x53a>
    1766:	68 e0       	ldi	r22, 0x08	; 8
    1768:	e6 2e       	mov	r14, r22
    176a:	f1 2c       	mov	r15, r1
    176c:	01 2d       	mov	r16, r1
    176e:	11 2d       	mov	r17, r1
    1770:	18 c0       	rjmp	.+48     	; 0x17a2 <__moddi3+0x56a>
    1772:	ee 24       	eor	r14, r14
    1774:	ff 24       	eor	r15, r15
    1776:	87 01       	movw	r16, r14
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <__moddi3+0x56a>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	22 16       	cp	r2, r18
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	32 06       	cpc	r3, r18
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	42 06       	cpc	r4, r18
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	52 06       	cpc	r5, r18
    178a:	30 f0       	brcs	.+12     	; 0x1798 <__moddi3+0x560>
    178c:	58 e1       	ldi	r21, 0x18	; 24
    178e:	e5 2e       	mov	r14, r21
    1790:	f1 2c       	mov	r15, r1
    1792:	01 2d       	mov	r16, r1
    1794:	11 2d       	mov	r17, r1
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__moddi3+0x56a>
    1798:	40 e1       	ldi	r20, 0x10	; 16
    179a:	e4 2e       	mov	r14, r20
    179c:	f1 2c       	mov	r15, r1
    179e:	01 2d       	mov	r16, r1
    17a0:	11 2d       	mov	r17, r1
    17a2:	d2 01       	movw	r26, r4
    17a4:	c1 01       	movw	r24, r2
    17a6:	0e 2c       	mov	r0, r14
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__moddi3+0x57a>
    17aa:	b6 95       	lsr	r27
    17ac:	a7 95       	ror	r26
    17ae:	97 95       	ror	r25
    17b0:	87 95       	ror	r24
    17b2:	0a 94       	dec	r0
    17b4:	d2 f7       	brpl	.-12     	; 0x17aa <__moddi3+0x572>
    17b6:	83 59       	subi	r24, 0x93	; 147
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	dc 01       	movw	r26, r24
    17bc:	2c 91       	ld	r18, X
    17be:	30 e2       	ldi	r19, 0x20	; 32
    17c0:	a3 2e       	mov	r10, r19
    17c2:	b1 2c       	mov	r11, r1
    17c4:	c1 2c       	mov	r12, r1
    17c6:	d1 2c       	mov	r13, r1
    17c8:	d6 01       	movw	r26, r12
    17ca:	c5 01       	movw	r24, r10
    17cc:	8e 19       	sub	r24, r14
    17ce:	9f 09       	sbc	r25, r15
    17d0:	a0 0b       	sbc	r26, r16
    17d2:	b1 0b       	sbc	r27, r17
    17d4:	7c 01       	movw	r14, r24
    17d6:	8d 01       	movw	r16, r26
    17d8:	e2 1a       	sub	r14, r18
    17da:	f1 08       	sbc	r15, r1
    17dc:	01 09       	sbc	r16, r1
    17de:	11 09       	sbc	r17, r1
    17e0:	65 96       	adiw	r28, 0x15	; 21
    17e2:	ec ae       	std	Y+60, r14	; 0x3c
    17e4:	fd ae       	std	Y+61, r15	; 0x3d
    17e6:	0e af       	std	Y+62, r16	; 0x3e
    17e8:	1f af       	std	Y+63, r17	; 0x3f
    17ea:	65 97       	sbiw	r28, 0x15	; 21
    17ec:	e1 14       	cp	r14, r1
    17ee:	f1 04       	cpc	r15, r1
    17f0:	01 05       	cpc	r16, r1
    17f2:	11 05       	cpc	r17, r1
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__moddi3+0x5cc>
    17f6:	64 01       	movw	r12, r8
    17f8:	53 01       	movw	r10, r6
    17fa:	a2 18       	sub	r10, r2
    17fc:	b3 08       	sbc	r11, r3
    17fe:	c4 08       	sbc	r12, r4
    1800:	d5 08       	sbc	r13, r5
    1802:	ec c0       	rjmp	.+472    	; 0x19dc <__moddi3+0x7a4>
    1804:	62 96       	adiw	r28, 0x12	; 18
    1806:	ff ac       	ldd	r15, Y+63	; 0x3f
    1808:	62 97       	sbiw	r28, 0x12	; 18
    180a:	e4 96       	adiw	r28, 0x34	; 52
    180c:	ff ae       	std	Y+63, r15	; 0x3f
    180e:	e4 97       	sbiw	r28, 0x34	; 52
    1810:	0f 2c       	mov	r0, r15
    1812:	04 c0       	rjmp	.+8      	; 0x181c <__moddi3+0x5e4>
    1814:	22 0c       	add	r2, r2
    1816:	33 1c       	adc	r3, r3
    1818:	44 1c       	adc	r4, r4
    181a:	55 1c       	adc	r5, r5
    181c:	0a 94       	dec	r0
    181e:	d2 f7       	brpl	.-12     	; 0x1814 <__moddi3+0x5dc>
    1820:	8a 2d       	mov	r24, r10
    1822:	8f 19       	sub	r24, r15
    1824:	64 01       	movw	r12, r8
    1826:	53 01       	movw	r10, r6
    1828:	08 2e       	mov	r0, r24
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <__moddi3+0x5fc>
    182c:	d6 94       	lsr	r13
    182e:	c7 94       	ror	r12
    1830:	b7 94       	ror	r11
    1832:	a7 94       	ror	r10
    1834:	0a 94       	dec	r0
    1836:	d2 f7       	brpl	.-12     	; 0x182c <__moddi3+0x5f4>
    1838:	a4 01       	movw	r20, r8
    183a:	93 01       	movw	r18, r6
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <__moddi3+0x60e>
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	44 1f       	adc	r20, r20
    1844:	55 1f       	adc	r21, r21
    1846:	fa 94       	dec	r15
    1848:	d2 f7       	brpl	.-12     	; 0x183e <__moddi3+0x606>
    184a:	e8 96       	adiw	r28, 0x38	; 56
    184c:	6c ac       	ldd	r6, Y+60	; 0x3c
    184e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1850:	8e ac       	ldd	r8, Y+62	; 0x3e
    1852:	9f ac       	ldd	r9, Y+63	; 0x3f
    1854:	e8 97       	sbiw	r28, 0x38	; 56
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <__moddi3+0x628>
    1858:	96 94       	lsr	r9
    185a:	87 94       	ror	r8
    185c:	77 94       	ror	r7
    185e:	67 94       	ror	r6
    1860:	8a 95       	dec	r24
    1862:	d2 f7       	brpl	.-12     	; 0x1858 <__moddi3+0x620>
    1864:	84 01       	movw	r16, r8
    1866:	73 01       	movw	r14, r6
    1868:	e2 2a       	or	r14, r18
    186a:	f3 2a       	or	r15, r19
    186c:	04 2b       	or	r16, r20
    186e:	15 2b       	or	r17, r21
    1870:	29 96       	adiw	r28, 0x09	; 9
    1872:	ec ae       	std	Y+60, r14	; 0x3c
    1874:	fd ae       	std	Y+61, r15	; 0x3d
    1876:	0e af       	std	Y+62, r16	; 0x3e
    1878:	1f af       	std	Y+63, r17	; 0x3f
    187a:	29 97       	sbiw	r28, 0x09	; 9
    187c:	32 01       	movw	r6, r4
    187e:	88 24       	eor	r8, r8
    1880:	99 24       	eor	r9, r9
    1882:	92 01       	movw	r18, r4
    1884:	81 01       	movw	r16, r2
    1886:	20 70       	andi	r18, 0x00	; 0
    1888:	30 70       	andi	r19, 0x00	; 0
    188a:	6d 96       	adiw	r28, 0x1d	; 29
    188c:	0c af       	std	Y+60, r16	; 0x3c
    188e:	1d af       	std	Y+61, r17	; 0x3d
    1890:	2e af       	std	Y+62, r18	; 0x3e
    1892:	3f af       	std	Y+63, r19	; 0x3f
    1894:	6d 97       	sbiw	r28, 0x1d	; 29
    1896:	c6 01       	movw	r24, r12
    1898:	b5 01       	movw	r22, r10
    189a:	a4 01       	movw	r20, r8
    189c:	93 01       	movw	r18, r6
    189e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    18a2:	7b 01       	movw	r14, r22
    18a4:	8c 01       	movw	r16, r24
    18a6:	c6 01       	movw	r24, r12
    18a8:	b5 01       	movw	r22, r10
    18aa:	a4 01       	movw	r20, r8
    18ac:	93 01       	movw	r18, r6
    18ae:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    18b2:	ca 01       	movw	r24, r20
    18b4:	b9 01       	movw	r22, r18
    18b6:	6d 96       	adiw	r28, 0x1d	; 29
    18b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    18bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18be:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c0:	6d 97       	sbiw	r28, 0x1d	; 29
    18c2:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	87 01       	movw	r16, r14
    18cc:	ff 24       	eor	r15, r15
    18ce:	ee 24       	eor	r14, r14
    18d0:	29 96       	adiw	r28, 0x09	; 9
    18d2:	ac ac       	ldd	r10, Y+60	; 0x3c
    18d4:	bd ac       	ldd	r11, Y+61	; 0x3d
    18d6:	ce ac       	ldd	r12, Y+62	; 0x3e
    18d8:	df ac       	ldd	r13, Y+63	; 0x3f
    18da:	29 97       	sbiw	r28, 0x09	; 9
    18dc:	c6 01       	movw	r24, r12
    18de:	aa 27       	eor	r26, r26
    18e0:	bb 27       	eor	r27, r27
    18e2:	5c 01       	movw	r10, r24
    18e4:	6d 01       	movw	r12, r26
    18e6:	ae 28       	or	r10, r14
    18e8:	bf 28       	or	r11, r15
    18ea:	c0 2a       	or	r12, r16
    18ec:	d1 2a       	or	r13, r17
    18ee:	a2 16       	cp	r10, r18
    18f0:	b3 06       	cpc	r11, r19
    18f2:	c4 06       	cpc	r12, r20
    18f4:	d5 06       	cpc	r13, r21
    18f6:	90 f4       	brcc	.+36     	; 0x191c <__moddi3+0x6e4>
    18f8:	a2 0c       	add	r10, r2
    18fa:	b3 1c       	adc	r11, r3
    18fc:	c4 1c       	adc	r12, r4
    18fe:	d5 1c       	adc	r13, r5
    1900:	a2 14       	cp	r10, r2
    1902:	b3 04       	cpc	r11, r3
    1904:	c4 04       	cpc	r12, r4
    1906:	d5 04       	cpc	r13, r5
    1908:	48 f0       	brcs	.+18     	; 0x191c <__moddi3+0x6e4>
    190a:	a2 16       	cp	r10, r18
    190c:	b3 06       	cpc	r11, r19
    190e:	c4 06       	cpc	r12, r20
    1910:	d5 06       	cpc	r13, r21
    1912:	20 f4       	brcc	.+8      	; 0x191c <__moddi3+0x6e4>
    1914:	a2 0c       	add	r10, r2
    1916:	b3 1c       	adc	r11, r3
    1918:	c4 1c       	adc	r12, r4
    191a:	d5 1c       	adc	r13, r5
    191c:	a2 1a       	sub	r10, r18
    191e:	b3 0a       	sbc	r11, r19
    1920:	c4 0a       	sbc	r12, r20
    1922:	d5 0a       	sbc	r13, r21
    1924:	c6 01       	movw	r24, r12
    1926:	b5 01       	movw	r22, r10
    1928:	a4 01       	movw	r20, r8
    192a:	93 01       	movw	r18, r6
    192c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1930:	7b 01       	movw	r14, r22
    1932:	8c 01       	movw	r16, r24
    1934:	c6 01       	movw	r24, r12
    1936:	b5 01       	movw	r22, r10
    1938:	a4 01       	movw	r20, r8
    193a:	93 01       	movw	r18, r6
    193c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1940:	ca 01       	movw	r24, r20
    1942:	b9 01       	movw	r22, r18
    1944:	6d 96       	adiw	r28, 0x1d	; 29
    1946:	2c ad       	ldd	r18, Y+60	; 0x3c
    1948:	3d ad       	ldd	r19, Y+61	; 0x3d
    194a:	4e ad       	ldd	r20, Y+62	; 0x3e
    194c:	5f ad       	ldd	r21, Y+63	; 0x3f
    194e:	6d 97       	sbiw	r28, 0x1d	; 29
    1950:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	87 01       	movw	r16, r14
    195a:	ff 24       	eor	r15, r15
    195c:	ee 24       	eor	r14, r14
    195e:	29 96       	adiw	r28, 0x09	; 9
    1960:	8c ad       	ldd	r24, Y+60	; 0x3c
    1962:	9d ad       	ldd	r25, Y+61	; 0x3d
    1964:	ae ad       	ldd	r26, Y+62	; 0x3e
    1966:	bf ad       	ldd	r27, Y+63	; 0x3f
    1968:	29 97       	sbiw	r28, 0x09	; 9
    196a:	a0 70       	andi	r26, 0x00	; 0
    196c:	b0 70       	andi	r27, 0x00	; 0
    196e:	57 01       	movw	r10, r14
    1970:	68 01       	movw	r12, r16
    1972:	a8 2a       	or	r10, r24
    1974:	b9 2a       	or	r11, r25
    1976:	ca 2a       	or	r12, r26
    1978:	db 2a       	or	r13, r27
    197a:	a2 16       	cp	r10, r18
    197c:	b3 06       	cpc	r11, r19
    197e:	c4 06       	cpc	r12, r20
    1980:	d5 06       	cpc	r13, r21
    1982:	90 f4       	brcc	.+36     	; 0x19a8 <__moddi3+0x770>
    1984:	a2 0c       	add	r10, r2
    1986:	b3 1c       	adc	r11, r3
    1988:	c4 1c       	adc	r12, r4
    198a:	d5 1c       	adc	r13, r5
    198c:	a2 14       	cp	r10, r2
    198e:	b3 04       	cpc	r11, r3
    1990:	c4 04       	cpc	r12, r4
    1992:	d5 04       	cpc	r13, r5
    1994:	48 f0       	brcs	.+18     	; 0x19a8 <__moddi3+0x770>
    1996:	a2 16       	cp	r10, r18
    1998:	b3 06       	cpc	r11, r19
    199a:	c4 06       	cpc	r12, r20
    199c:	d5 06       	cpc	r13, r21
    199e:	20 f4       	brcc	.+8      	; 0x19a8 <__moddi3+0x770>
    19a0:	a2 0c       	add	r10, r2
    19a2:	b3 1c       	adc	r11, r3
    19a4:	c4 1c       	adc	r12, r4
    19a6:	d5 1c       	adc	r13, r5
    19a8:	e8 96       	adiw	r28, 0x38	; 56
    19aa:	ec ac       	ldd	r14, Y+60	; 0x3c
    19ac:	fd ac       	ldd	r15, Y+61	; 0x3d
    19ae:	0e ad       	ldd	r16, Y+62	; 0x3e
    19b0:	1f ad       	ldd	r17, Y+63	; 0x3f
    19b2:	e8 97       	sbiw	r28, 0x38	; 56
    19b4:	e4 96       	adiw	r28, 0x34	; 52
    19b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    19b8:	e4 97       	sbiw	r28, 0x34	; 52
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <__moddi3+0x78c>
    19bc:	ee 0c       	add	r14, r14
    19be:	ff 1c       	adc	r15, r15
    19c0:	00 1f       	adc	r16, r16
    19c2:	11 1f       	adc	r17, r17
    19c4:	0a 94       	dec	r0
    19c6:	d2 f7       	brpl	.-12     	; 0x19bc <__moddi3+0x784>
    19c8:	2d 96       	adiw	r28, 0x0d	; 13
    19ca:	ec ae       	std	Y+60, r14	; 0x3c
    19cc:	fd ae       	std	Y+61, r15	; 0x3d
    19ce:	0e af       	std	Y+62, r16	; 0x3e
    19d0:	1f af       	std	Y+63, r17	; 0x3f
    19d2:	2d 97       	sbiw	r28, 0x0d	; 13
    19d4:	a2 1a       	sub	r10, r18
    19d6:	b3 0a       	sbc	r11, r19
    19d8:	c4 0a       	sbc	r12, r20
    19da:	d5 0a       	sbc	r13, r21
    19dc:	32 01       	movw	r6, r4
    19de:	88 24       	eor	r8, r8
    19e0:	99 24       	eor	r9, r9
    19e2:	92 01       	movw	r18, r4
    19e4:	81 01       	movw	r16, r2
    19e6:	20 70       	andi	r18, 0x00	; 0
    19e8:	30 70       	andi	r19, 0x00	; 0
    19ea:	a1 96       	adiw	r28, 0x21	; 33
    19ec:	0c af       	std	Y+60, r16	; 0x3c
    19ee:	1d af       	std	Y+61, r17	; 0x3d
    19f0:	2e af       	std	Y+62, r18	; 0x3e
    19f2:	3f af       	std	Y+63, r19	; 0x3f
    19f4:	a1 97       	sbiw	r28, 0x21	; 33
    19f6:	c6 01       	movw	r24, r12
    19f8:	b5 01       	movw	r22, r10
    19fa:	a4 01       	movw	r20, r8
    19fc:	93 01       	movw	r18, r6
    19fe:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1a02:	7b 01       	movw	r14, r22
    1a04:	8c 01       	movw	r16, r24
    1a06:	c6 01       	movw	r24, r12
    1a08:	b5 01       	movw	r22, r10
    1a0a:	a4 01       	movw	r20, r8
    1a0c:	93 01       	movw	r18, r6
    1a0e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1a12:	ca 01       	movw	r24, r20
    1a14:	b9 01       	movw	r22, r18
    1a16:	a1 96       	adiw	r28, 0x21	; 33
    1a18:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a20:	a1 97       	sbiw	r28, 0x21	; 33
    1a22:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	87 01       	movw	r16, r14
    1a2c:	ff 24       	eor	r15, r15
    1a2e:	ee 24       	eor	r14, r14
    1a30:	2d 96       	adiw	r28, 0x0d	; 13
    1a32:	ac ac       	ldd	r10, Y+60	; 0x3c
    1a34:	bd ac       	ldd	r11, Y+61	; 0x3d
    1a36:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a38:	df ac       	ldd	r13, Y+63	; 0x3f
    1a3a:	2d 97       	sbiw	r28, 0x0d	; 13
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	aa 27       	eor	r26, r26
    1a40:	bb 27       	eor	r27, r27
    1a42:	57 01       	movw	r10, r14
    1a44:	68 01       	movw	r12, r16
    1a46:	a8 2a       	or	r10, r24
    1a48:	b9 2a       	or	r11, r25
    1a4a:	ca 2a       	or	r12, r26
    1a4c:	db 2a       	or	r13, r27
    1a4e:	a2 16       	cp	r10, r18
    1a50:	b3 06       	cpc	r11, r19
    1a52:	c4 06       	cpc	r12, r20
    1a54:	d5 06       	cpc	r13, r21
    1a56:	90 f4       	brcc	.+36     	; 0x1a7c <__moddi3+0x844>
    1a58:	a2 0c       	add	r10, r2
    1a5a:	b3 1c       	adc	r11, r3
    1a5c:	c4 1c       	adc	r12, r4
    1a5e:	d5 1c       	adc	r13, r5
    1a60:	a2 14       	cp	r10, r2
    1a62:	b3 04       	cpc	r11, r3
    1a64:	c4 04       	cpc	r12, r4
    1a66:	d5 04       	cpc	r13, r5
    1a68:	48 f0       	brcs	.+18     	; 0x1a7c <__moddi3+0x844>
    1a6a:	a2 16       	cp	r10, r18
    1a6c:	b3 06       	cpc	r11, r19
    1a6e:	c4 06       	cpc	r12, r20
    1a70:	d5 06       	cpc	r13, r21
    1a72:	20 f4       	brcc	.+8      	; 0x1a7c <__moddi3+0x844>
    1a74:	a2 0c       	add	r10, r2
    1a76:	b3 1c       	adc	r11, r3
    1a78:	c4 1c       	adc	r12, r4
    1a7a:	d5 1c       	adc	r13, r5
    1a7c:	a2 1a       	sub	r10, r18
    1a7e:	b3 0a       	sbc	r11, r19
    1a80:	c4 0a       	sbc	r12, r20
    1a82:	d5 0a       	sbc	r13, r21
    1a84:	c6 01       	movw	r24, r12
    1a86:	b5 01       	movw	r22, r10
    1a88:	a4 01       	movw	r20, r8
    1a8a:	93 01       	movw	r18, r6
    1a8c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1a90:	7b 01       	movw	r14, r22
    1a92:	8c 01       	movw	r16, r24
    1a94:	c6 01       	movw	r24, r12
    1a96:	b5 01       	movw	r22, r10
    1a98:	a4 01       	movw	r20, r8
    1a9a:	93 01       	movw	r18, r6
    1a9c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	b9 01       	movw	r22, r18
    1aa4:	a1 96       	adiw	r28, 0x21	; 33
    1aa6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1aa8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1aae:	a1 97       	sbiw	r28, 0x21	; 33
    1ab0:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	87 01       	movw	r16, r14
    1aba:	ff 24       	eor	r15, r15
    1abc:	ee 24       	eor	r14, r14
    1abe:	2d 96       	adiw	r28, 0x0d	; 13
    1ac0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ac2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ac4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ac6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ac8:	2d 97       	sbiw	r28, 0x0d	; 13
    1aca:	a0 70       	andi	r26, 0x00	; 0
    1acc:	b0 70       	andi	r27, 0x00	; 0
    1ace:	e8 2a       	or	r14, r24
    1ad0:	f9 2a       	or	r15, r25
    1ad2:	0a 2b       	or	r16, r26
    1ad4:	1b 2b       	or	r17, r27
    1ad6:	e2 16       	cp	r14, r18
    1ad8:	f3 06       	cpc	r15, r19
    1ada:	04 07       	cpc	r16, r20
    1adc:	15 07       	cpc	r17, r21
    1ade:	90 f4       	brcc	.+36     	; 0x1b04 <__moddi3+0x8cc>
    1ae0:	e2 0c       	add	r14, r2
    1ae2:	f3 1c       	adc	r15, r3
    1ae4:	04 1d       	adc	r16, r4
    1ae6:	15 1d       	adc	r17, r5
    1ae8:	e2 14       	cp	r14, r2
    1aea:	f3 04       	cpc	r15, r3
    1aec:	04 05       	cpc	r16, r4
    1aee:	15 05       	cpc	r17, r5
    1af0:	48 f0       	brcs	.+18     	; 0x1b04 <__moddi3+0x8cc>
    1af2:	e2 16       	cp	r14, r18
    1af4:	f3 06       	cpc	r15, r19
    1af6:	04 07       	cpc	r16, r20
    1af8:	15 07       	cpc	r17, r21
    1afa:	20 f4       	brcc	.+8      	; 0x1b04 <__moddi3+0x8cc>
    1afc:	e2 0c       	add	r14, r2
    1afe:	f3 1c       	adc	r15, r3
    1b00:	04 1d       	adc	r16, r4
    1b02:	15 1d       	adc	r17, r5
    1b04:	e2 1a       	sub	r14, r18
    1b06:	f3 0a       	sbc	r15, r19
    1b08:	04 0b       	sbc	r16, r20
    1b0a:	15 0b       	sbc	r17, r21
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	c7 01       	movw	r24, r14
    1b10:	62 96       	adiw	r28, 0x12	; 18
    1b12:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b14:	62 97       	sbiw	r28, 0x12	; 18
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <__moddi3+0x8e8>
    1b18:	b6 95       	lsr	r27
    1b1a:	a7 95       	ror	r26
    1b1c:	97 95       	ror	r25
    1b1e:	87 95       	ror	r24
    1b20:	0a 94       	dec	r0
    1b22:	d2 f7       	brpl	.-12     	; 0x1b18 <__moddi3+0x8e0>
    1b24:	89 a7       	std	Y+41, r24	; 0x29
    1b26:	9a a7       	std	Y+42, r25	; 0x2a
    1b28:	ab a7       	std	Y+43, r26	; 0x2b
    1b2a:	bc a7       	std	Y+44, r27	; 0x2c
    1b2c:	1d a6       	std	Y+45, r1	; 0x2d
    1b2e:	1e a6       	std	Y+46, r1	; 0x2e
    1b30:	1f a6       	std	Y+47, r1	; 0x2f
    1b32:	18 aa       	std	Y+48, r1	; 0x30
    1b34:	89 8b       	std	Y+17, r24	; 0x11
    1b36:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b38:	8a 8b       	std	Y+18, r24	; 0x12
    1b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b40:	8c 8b       	std	Y+20, r24	; 0x14
    1b42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b44:	8d 8b       	std	Y+21, r24	; 0x15
    1b46:	2f c3       	rjmp	.+1630   	; 0x21a6 <__moddi3+0xf6e>
    1b48:	6a 14       	cp	r6, r10
    1b4a:	7b 04       	cpc	r7, r11
    1b4c:	8c 04       	cpc	r8, r12
    1b4e:	9d 04       	cpc	r9, r13
    1b50:	48 f4       	brcc	.+18     	; 0x1b64 <__moddi3+0x92c>
    1b52:	49 8b       	std	Y+17, r20	; 0x11
    1b54:	5a 8b       	std	Y+18, r21	; 0x12
    1b56:	6b 8b       	std	Y+19, r22	; 0x13
    1b58:	7c 8b       	std	Y+20, r23	; 0x14
    1b5a:	8d 8b       	std	Y+21, r24	; 0x15
    1b5c:	9e 8b       	std	Y+22, r25	; 0x16
    1b5e:	2f 8b       	std	Y+23, r18	; 0x17
    1b60:	38 8f       	std	Y+24, r19	; 0x18
    1b62:	27 c3       	rjmp	.+1614   	; 0x21b2 <__moddi3+0xf7a>
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	a0 16       	cp	r10, r16
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	b0 06       	cpc	r11, r16
    1b6c:	01 e0       	ldi	r16, 0x01	; 1
    1b6e:	c0 06       	cpc	r12, r16
    1b70:	00 e0       	ldi	r16, 0x00	; 0
    1b72:	d0 06       	cpc	r13, r16
    1b74:	88 f4       	brcc	.+34     	; 0x1b98 <__moddi3+0x960>
    1b76:	1f ef       	ldi	r17, 0xFF	; 255
    1b78:	a1 16       	cp	r10, r17
    1b7a:	b1 04       	cpc	r11, r1
    1b7c:	c1 04       	cpc	r12, r1
    1b7e:	d1 04       	cpc	r13, r1
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <__moddi3+0x958>
    1b82:	30 f0       	brcs	.+12     	; 0x1b90 <__moddi3+0x958>
    1b84:	28 e0       	ldi	r18, 0x08	; 8
    1b86:	e2 2e       	mov	r14, r18
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	01 2d       	mov	r16, r1
    1b8c:	11 2d       	mov	r17, r1
    1b8e:	18 c0       	rjmp	.+48     	; 0x1bc0 <__moddi3+0x988>
    1b90:	ee 24       	eor	r14, r14
    1b92:	ff 24       	eor	r15, r15
    1b94:	87 01       	movw	r16, r14
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <__moddi3+0x988>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	a2 16       	cp	r10, r18
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	b2 06       	cpc	r11, r18
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	c2 06       	cpc	r12, r18
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    1ba6:	d2 06       	cpc	r13, r18
    1ba8:	30 f0       	brcs	.+12     	; 0x1bb6 <__moddi3+0x97e>
    1baa:	98 e1       	ldi	r25, 0x18	; 24
    1bac:	e9 2e       	mov	r14, r25
    1bae:	f1 2c       	mov	r15, r1
    1bb0:	01 2d       	mov	r16, r1
    1bb2:	11 2d       	mov	r17, r1
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <__moddi3+0x988>
    1bb6:	80 e1       	ldi	r24, 0x10	; 16
    1bb8:	e8 2e       	mov	r14, r24
    1bba:	f1 2c       	mov	r15, r1
    1bbc:	01 2d       	mov	r16, r1
    1bbe:	11 2d       	mov	r17, r1
    1bc0:	d6 01       	movw	r26, r12
    1bc2:	c5 01       	movw	r24, r10
    1bc4:	0e 2c       	mov	r0, r14
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <__moddi3+0x998>
    1bc8:	b6 95       	lsr	r27
    1bca:	a7 95       	ror	r26
    1bcc:	97 95       	ror	r25
    1bce:	87 95       	ror	r24
    1bd0:	0a 94       	dec	r0
    1bd2:	d2 f7       	brpl	.-12     	; 0x1bc8 <__moddi3+0x990>
    1bd4:	83 59       	subi	r24, 0x93	; 147
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	dc 01       	movw	r26, r24
    1bda:	2c 91       	ld	r18, X
    1bdc:	80 e2       	ldi	r24, 0x20	; 32
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	8e 19       	sub	r24, r14
    1be6:	9f 09       	sbc	r25, r15
    1be8:	a0 0b       	sbc	r26, r16
    1bea:	b1 0b       	sbc	r27, r17
    1bec:	82 1b       	sub	r24, r18
    1bee:	91 09       	sbc	r25, r1
    1bf0:	a1 09       	sbc	r26, r1
    1bf2:	b1 09       	sbc	r27, r1
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	a1 05       	cpc	r26, r1
    1bf8:	b1 05       	cpc	r27, r1
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <__moddi3+0x9c6>
    1bfc:	59 c0       	rjmp	.+178    	; 0x1cb0 <__moddi3+0xa78>
    1bfe:	a6 14       	cp	r10, r6
    1c00:	b7 04       	cpc	r11, r7
    1c02:	c8 04       	cpc	r12, r8
    1c04:	d9 04       	cpc	r13, r9
    1c06:	70 f0       	brcs	.+28     	; 0x1c24 <__moddi3+0x9ec>
    1c08:	e8 96       	adiw	r28, 0x38	; 56
    1c0a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1c0c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1c0e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1c10:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c12:	e8 97       	sbiw	r28, 0x38	; 56
    1c14:	e2 14       	cp	r14, r2
    1c16:	f3 04       	cpc	r15, r3
    1c18:	04 05       	cpc	r16, r4
    1c1a:	15 05       	cpc	r17, r5
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <__moddi3+0x9ec>
    1c1e:	d8 01       	movw	r26, r16
    1c20:	c7 01       	movw	r24, r14
    1c22:	2f c0       	rjmp	.+94     	; 0x1c82 <__moddi3+0xa4a>
    1c24:	e8 96       	adiw	r28, 0x38	; 56
    1c26:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c28:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c2e:	e8 97       	sbiw	r28, 0x38	; 56
    1c30:	82 19       	sub	r24, r2
    1c32:	93 09       	sbc	r25, r3
    1c34:	a4 09       	sbc	r26, r4
    1c36:	b5 09       	sbc	r27, r5
    1c38:	a4 01       	movw	r20, r8
    1c3a:	93 01       	movw	r18, r6
    1c3c:	2a 19       	sub	r18, r10
    1c3e:	3b 09       	sbc	r19, r11
    1c40:	4c 09       	sbc	r20, r12
    1c42:	5d 09       	sbc	r21, r13
    1c44:	aa 24       	eor	r10, r10
    1c46:	bb 24       	eor	r11, r11
    1c48:	65 01       	movw	r12, r10
    1c4a:	e8 96       	adiw	r28, 0x38	; 56
    1c4c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c4e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1c50:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c52:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c54:	e8 97       	sbiw	r28, 0x38	; 56
    1c56:	68 16       	cp	r6, r24
    1c58:	79 06       	cpc	r7, r25
    1c5a:	8a 06       	cpc	r8, r26
    1c5c:	9b 06       	cpc	r9, r27
    1c5e:	28 f4       	brcc	.+10     	; 0x1c6a <__moddi3+0xa32>
    1c60:	11 e0       	ldi	r17, 0x01	; 1
    1c62:	a1 2e       	mov	r10, r17
    1c64:	b1 2c       	mov	r11, r1
    1c66:	c1 2c       	mov	r12, r1
    1c68:	d1 2c       	mov	r13, r1
    1c6a:	79 01       	movw	r14, r18
    1c6c:	8a 01       	movw	r16, r20
    1c6e:	ea 18       	sub	r14, r10
    1c70:	fb 08       	sbc	r15, r11
    1c72:	0c 09       	sbc	r16, r12
    1c74:	1d 09       	sbc	r17, r13
    1c76:	61 96       	adiw	r28, 0x11	; 17
    1c78:	ec ae       	std	Y+60, r14	; 0x3c
    1c7a:	fd ae       	std	Y+61, r15	; 0x3d
    1c7c:	0e af       	std	Y+62, r16	; 0x3e
    1c7e:	1f af       	std	Y+63, r17	; 0x3f
    1c80:	61 97       	sbiw	r28, 0x11	; 17
    1c82:	89 a7       	std	Y+41, r24	; 0x29
    1c84:	9a a7       	std	Y+42, r25	; 0x2a
    1c86:	ab a7       	std	Y+43, r26	; 0x2b
    1c88:	bc a7       	std	Y+44, r27	; 0x2c
    1c8a:	61 96       	adiw	r28, 0x11	; 17
    1c8c:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c8e:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c90:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c92:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c94:	61 97       	sbiw	r28, 0x11	; 17
    1c96:	0d a7       	std	Y+45, r16	; 0x2d
    1c98:	1e a7       	std	Y+46, r17	; 0x2e
    1c9a:	2f a7       	std	Y+47, r18	; 0x2f
    1c9c:	38 ab       	std	Y+48, r19	; 0x30
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
    1ca0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ca2:	8a 8b       	std	Y+18, r24	; 0x12
    1ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1caa:	8c 8b       	std	Y+20, r24	; 0x14
    1cac:	0d 8b       	std	Y+21, r16	; 0x15
    1cae:	7b c2       	rjmp	.+1270   	; 0x21a6 <__moddi3+0xf6e>
    1cb0:	e3 96       	adiw	r28, 0x33	; 51
    1cb2:	8f af       	std	Y+63, r24	; 0x3f
    1cb4:	e3 97       	sbiw	r28, 0x33	; 51
    1cb6:	a6 01       	movw	r20, r12
    1cb8:	95 01       	movw	r18, r10
    1cba:	08 2e       	mov	r0, r24
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <__moddi3+0xa8e>
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	44 1f       	adc	r20, r20
    1cc4:	55 1f       	adc	r21, r21
    1cc6:	0a 94       	dec	r0
    1cc8:	d2 f7       	brpl	.-12     	; 0x1cbe <__moddi3+0xa86>
    1cca:	10 e2       	ldi	r17, 0x20	; 32
    1ccc:	18 1b       	sub	r17, r24
    1cce:	e2 96       	adiw	r28, 0x32	; 50
    1cd0:	1f af       	std	Y+63, r17	; 0x3f
    1cd2:	e2 97       	sbiw	r28, 0x32	; 50
    1cd4:	d2 01       	movw	r26, r4
    1cd6:	c1 01       	movw	r24, r2
    1cd8:	01 2e       	mov	r0, r17
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <__moddi3+0xaac>
    1cdc:	b6 95       	lsr	r27
    1cde:	a7 95       	ror	r26
    1ce0:	97 95       	ror	r25
    1ce2:	87 95       	ror	r24
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <__moddi3+0xaa4>
    1ce8:	5c 01       	movw	r10, r24
    1cea:	6d 01       	movw	r12, r26
    1cec:	a2 2a       	or	r10, r18
    1cee:	b3 2a       	or	r11, r19
    1cf0:	c4 2a       	or	r12, r20
    1cf2:	d5 2a       	or	r13, r21
    1cf4:	25 96       	adiw	r28, 0x05	; 5
    1cf6:	ac ae       	std	Y+60, r10	; 0x3c
    1cf8:	bd ae       	std	Y+61, r11	; 0x3d
    1cfa:	ce ae       	std	Y+62, r12	; 0x3e
    1cfc:	df ae       	std	Y+63, r13	; 0x3f
    1cfe:	25 97       	sbiw	r28, 0x05	; 5
    1d00:	72 01       	movw	r14, r4
    1d02:	61 01       	movw	r12, r2
    1d04:	e3 96       	adiw	r28, 0x33	; 51
    1d06:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d08:	e3 97       	sbiw	r28, 0x33	; 51
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__moddi3+0xadc>
    1d0c:	cc 0c       	add	r12, r12
    1d0e:	dd 1c       	adc	r13, r13
    1d10:	ee 1c       	adc	r14, r14
    1d12:	ff 1c       	adc	r15, r15
    1d14:	0a 94       	dec	r0
    1d16:	d2 f7       	brpl	.-12     	; 0x1d0c <__moddi3+0xad4>
    1d18:	21 96       	adiw	r28, 0x01	; 1
    1d1a:	cc ae       	std	Y+60, r12	; 0x3c
    1d1c:	dd ae       	std	Y+61, r13	; 0x3d
    1d1e:	ee ae       	std	Y+62, r14	; 0x3e
    1d20:	ff ae       	std	Y+63, r15	; 0x3f
    1d22:	21 97       	sbiw	r28, 0x01	; 1
    1d24:	64 01       	movw	r12, r8
    1d26:	53 01       	movw	r10, r6
    1d28:	01 2e       	mov	r0, r17
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <__moddi3+0xafc>
    1d2c:	d6 94       	lsr	r13
    1d2e:	c7 94       	ror	r12
    1d30:	b7 94       	ror	r11
    1d32:	a7 94       	ror	r10
    1d34:	0a 94       	dec	r0
    1d36:	d2 f7       	brpl	.-12     	; 0x1d2c <__moddi3+0xaf4>
    1d38:	a4 01       	movw	r20, r8
    1d3a:	93 01       	movw	r18, r6
    1d3c:	e3 96       	adiw	r28, 0x33	; 51
    1d3e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d40:	e3 97       	sbiw	r28, 0x33	; 51
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <__moddi3+0xb14>
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	44 1f       	adc	r20, r20
    1d4a:	55 1f       	adc	r21, r21
    1d4c:	0a 94       	dec	r0
    1d4e:	d2 f7       	brpl	.-12     	; 0x1d44 <__moddi3+0xb0c>
    1d50:	e8 96       	adiw	r28, 0x38	; 56
    1d52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d5a:	e8 97       	sbiw	r28, 0x38	; 56
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__moddi3+0xb2e>
    1d5e:	b6 95       	lsr	r27
    1d60:	a7 95       	ror	r26
    1d62:	97 95       	ror	r25
    1d64:	87 95       	ror	r24
    1d66:	1a 95       	dec	r17
    1d68:	d2 f7       	brpl	.-12     	; 0x1d5e <__moddi3+0xb26>
    1d6a:	7c 01       	movw	r14, r24
    1d6c:	8d 01       	movw	r16, r26
    1d6e:	e2 2a       	or	r14, r18
    1d70:	f3 2a       	or	r15, r19
    1d72:	04 2b       	or	r16, r20
    1d74:	15 2b       	or	r17, r21
    1d76:	e9 ae       	std	Y+57, r14	; 0x39
    1d78:	fa ae       	std	Y+58, r15	; 0x3a
    1d7a:	0b af       	std	Y+59, r16	; 0x3b
    1d7c:	1c af       	std	Y+60, r17	; 0x3c
    1d7e:	e8 96       	adiw	r28, 0x38	; 56
    1d80:	0c ad       	ldd	r16, Y+60	; 0x3c
    1d82:	1d ad       	ldd	r17, Y+61	; 0x3d
    1d84:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d86:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d88:	e8 97       	sbiw	r28, 0x38	; 56
    1d8a:	e3 96       	adiw	r28, 0x33	; 51
    1d8c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d8e:	e3 97       	sbiw	r28, 0x33	; 51
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <__moddi3+0xb62>
    1d92:	00 0f       	add	r16, r16
    1d94:	11 1f       	adc	r17, r17
    1d96:	22 1f       	adc	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	0a 94       	dec	r0
    1d9c:	d2 f7       	brpl	.-12     	; 0x1d92 <__moddi3+0xb5a>
    1d9e:	0d ab       	std	Y+53, r16	; 0x35
    1da0:	1e ab       	std	Y+54, r17	; 0x36
    1da2:	2f ab       	std	Y+55, r18	; 0x37
    1da4:	38 af       	std	Y+56, r19	; 0x38
    1da6:	25 96       	adiw	r28, 0x05	; 5
    1da8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1daa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1dac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1db0:	25 97       	sbiw	r28, 0x05	; 5
    1db2:	3a 01       	movw	r6, r20
    1db4:	88 24       	eor	r8, r8
    1db6:	99 24       	eor	r9, r9
    1db8:	40 70       	andi	r20, 0x00	; 0
    1dba:	50 70       	andi	r21, 0x00	; 0
    1dbc:	a5 96       	adiw	r28, 0x25	; 37
    1dbe:	2c af       	std	Y+60, r18	; 0x3c
    1dc0:	3d af       	std	Y+61, r19	; 0x3d
    1dc2:	4e af       	std	Y+62, r20	; 0x3e
    1dc4:	5f af       	std	Y+63, r21	; 0x3f
    1dc6:	a5 97       	sbiw	r28, 0x25	; 37
    1dc8:	c6 01       	movw	r24, r12
    1dca:	b5 01       	movw	r22, r10
    1dcc:	a4 01       	movw	r20, r8
    1dce:	93 01       	movw	r18, r6
    1dd0:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1dd4:	7b 01       	movw	r14, r22
    1dd6:	8c 01       	movw	r16, r24
    1dd8:	c6 01       	movw	r24, r12
    1dda:	b5 01       	movw	r22, r10
    1ddc:	a4 01       	movw	r20, r8
    1dde:	93 01       	movw	r18, r6
    1de0:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1de4:	c9 01       	movw	r24, r18
    1de6:	da 01       	movw	r26, r20
    1de8:	1c 01       	movw	r2, r24
    1dea:	2d 01       	movw	r4, r26
    1dec:	c2 01       	movw	r24, r4
    1dee:	b1 01       	movw	r22, r2
    1df0:	a5 96       	adiw	r28, 0x25	; 37
    1df2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1df4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1df6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1df8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dfa:	a5 97       	sbiw	r28, 0x25	; 37
    1dfc:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	87 01       	movw	r16, r14
    1e06:	ff 24       	eor	r15, r15
    1e08:	ee 24       	eor	r14, r14
    1e0a:	a9 ac       	ldd	r10, Y+57	; 0x39
    1e0c:	ba ac       	ldd	r11, Y+58	; 0x3a
    1e0e:	cb ac       	ldd	r12, Y+59	; 0x3b
    1e10:	dc ac       	ldd	r13, Y+60	; 0x3c
    1e12:	c6 01       	movw	r24, r12
    1e14:	aa 27       	eor	r26, r26
    1e16:	bb 27       	eor	r27, r27
    1e18:	57 01       	movw	r10, r14
    1e1a:	68 01       	movw	r12, r16
    1e1c:	a8 2a       	or	r10, r24
    1e1e:	b9 2a       	or	r11, r25
    1e20:	ca 2a       	or	r12, r26
    1e22:	db 2a       	or	r13, r27
    1e24:	a2 16       	cp	r10, r18
    1e26:	b3 06       	cpc	r11, r19
    1e28:	c4 06       	cpc	r12, r20
    1e2a:	d5 06       	cpc	r13, r21
    1e2c:	10 f5       	brcc	.+68     	; 0x1e72 <__moddi3+0xc3a>
    1e2e:	08 94       	sec
    1e30:	21 08       	sbc	r2, r1
    1e32:	31 08       	sbc	r3, r1
    1e34:	41 08       	sbc	r4, r1
    1e36:	51 08       	sbc	r5, r1
    1e38:	25 96       	adiw	r28, 0x05	; 5
    1e3a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1e3c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1e3e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e40:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e42:	25 97       	sbiw	r28, 0x05	; 5
    1e44:	ae 0c       	add	r10, r14
    1e46:	bf 1c       	adc	r11, r15
    1e48:	c0 1e       	adc	r12, r16
    1e4a:	d1 1e       	adc	r13, r17
    1e4c:	ae 14       	cp	r10, r14
    1e4e:	bf 04       	cpc	r11, r15
    1e50:	c0 06       	cpc	r12, r16
    1e52:	d1 06       	cpc	r13, r17
    1e54:	70 f0       	brcs	.+28     	; 0x1e72 <__moddi3+0xc3a>
    1e56:	a2 16       	cp	r10, r18
    1e58:	b3 06       	cpc	r11, r19
    1e5a:	c4 06       	cpc	r12, r20
    1e5c:	d5 06       	cpc	r13, r21
    1e5e:	48 f4       	brcc	.+18     	; 0x1e72 <__moddi3+0xc3a>
    1e60:	08 94       	sec
    1e62:	21 08       	sbc	r2, r1
    1e64:	31 08       	sbc	r3, r1
    1e66:	41 08       	sbc	r4, r1
    1e68:	51 08       	sbc	r5, r1
    1e6a:	ae 0c       	add	r10, r14
    1e6c:	bf 1c       	adc	r11, r15
    1e6e:	c0 1e       	adc	r12, r16
    1e70:	d1 1e       	adc	r13, r17
    1e72:	a2 1a       	sub	r10, r18
    1e74:	b3 0a       	sbc	r11, r19
    1e76:	c4 0a       	sbc	r12, r20
    1e78:	d5 0a       	sbc	r13, r21
    1e7a:	c6 01       	movw	r24, r12
    1e7c:	b5 01       	movw	r22, r10
    1e7e:	a4 01       	movw	r20, r8
    1e80:	93 01       	movw	r18, r6
    1e82:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1e86:	7b 01       	movw	r14, r22
    1e88:	8c 01       	movw	r16, r24
    1e8a:	c6 01       	movw	r24, r12
    1e8c:	b5 01       	movw	r22, r10
    1e8e:	a4 01       	movw	r20, r8
    1e90:	93 01       	movw	r18, r6
    1e92:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    1e96:	c9 01       	movw	r24, r18
    1e98:	da 01       	movw	r26, r20
    1e9a:	3c 01       	movw	r6, r24
    1e9c:	4d 01       	movw	r8, r26
    1e9e:	c4 01       	movw	r24, r8
    1ea0:	b3 01       	movw	r22, r6
    1ea2:	a5 96       	adiw	r28, 0x25	; 37
    1ea4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ea6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ea8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eaa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eac:	a5 97       	sbiw	r28, 0x25	; 37
    1eae:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1eb2:	9b 01       	movw	r18, r22
    1eb4:	ac 01       	movw	r20, r24
    1eb6:	87 01       	movw	r16, r14
    1eb8:	ff 24       	eor	r15, r15
    1eba:	ee 24       	eor	r14, r14
    1ebc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ebe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ec0:	ab ad       	ldd	r26, Y+59	; 0x3b
    1ec2:	bc ad       	ldd	r27, Y+60	; 0x3c
    1ec4:	a0 70       	andi	r26, 0x00	; 0
    1ec6:	b0 70       	andi	r27, 0x00	; 0
    1ec8:	57 01       	movw	r10, r14
    1eca:	68 01       	movw	r12, r16
    1ecc:	a8 2a       	or	r10, r24
    1ece:	b9 2a       	or	r11, r25
    1ed0:	ca 2a       	or	r12, r26
    1ed2:	db 2a       	or	r13, r27
    1ed4:	a2 16       	cp	r10, r18
    1ed6:	b3 06       	cpc	r11, r19
    1ed8:	c4 06       	cpc	r12, r20
    1eda:	d5 06       	cpc	r13, r21
    1edc:	10 f5       	brcc	.+68     	; 0x1f22 <__moddi3+0xcea>
    1ede:	08 94       	sec
    1ee0:	61 08       	sbc	r6, r1
    1ee2:	71 08       	sbc	r7, r1
    1ee4:	81 08       	sbc	r8, r1
    1ee6:	91 08       	sbc	r9, r1
    1ee8:	25 96       	adiw	r28, 0x05	; 5
    1eea:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eec:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ef2:	25 97       	sbiw	r28, 0x05	; 5
    1ef4:	a6 0e       	add	r10, r22
    1ef6:	b7 1e       	adc	r11, r23
    1ef8:	c8 1e       	adc	r12, r24
    1efa:	d9 1e       	adc	r13, r25
    1efc:	a6 16       	cp	r10, r22
    1efe:	b7 06       	cpc	r11, r23
    1f00:	c8 06       	cpc	r12, r24
    1f02:	d9 06       	cpc	r13, r25
    1f04:	70 f0       	brcs	.+28     	; 0x1f22 <__moddi3+0xcea>
    1f06:	a2 16       	cp	r10, r18
    1f08:	b3 06       	cpc	r11, r19
    1f0a:	c4 06       	cpc	r12, r20
    1f0c:	d5 06       	cpc	r13, r21
    1f0e:	48 f4       	brcc	.+18     	; 0x1f22 <__moddi3+0xcea>
    1f10:	08 94       	sec
    1f12:	61 08       	sbc	r6, r1
    1f14:	71 08       	sbc	r7, r1
    1f16:	81 08       	sbc	r8, r1
    1f18:	91 08       	sbc	r9, r1
    1f1a:	a6 0e       	add	r10, r22
    1f1c:	b7 1e       	adc	r11, r23
    1f1e:	c8 1e       	adc	r12, r24
    1f20:	d9 1e       	adc	r13, r25
    1f22:	d6 01       	movw	r26, r12
    1f24:	c5 01       	movw	r24, r10
    1f26:	82 1b       	sub	r24, r18
    1f28:	93 0b       	sbc	r25, r19
    1f2a:	a4 0b       	sbc	r26, r20
    1f2c:	b5 0b       	sbc	r27, r21
    1f2e:	89 ab       	std	Y+49, r24	; 0x31
    1f30:	9a ab       	std	Y+50, r25	; 0x32
    1f32:	ab ab       	std	Y+51, r26	; 0x33
    1f34:	bc ab       	std	Y+52, r27	; 0x34
    1f36:	d1 01       	movw	r26, r2
    1f38:	99 27       	eor	r25, r25
    1f3a:	88 27       	eor	r24, r24
    1f3c:	84 01       	movw	r16, r8
    1f3e:	73 01       	movw	r14, r6
    1f40:	e8 2a       	or	r14, r24
    1f42:	f9 2a       	or	r15, r25
    1f44:	0a 2b       	or	r16, r26
    1f46:	1b 2b       	or	r17, r27
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	a8 2e       	mov	r10, r24
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	b8 2e       	mov	r11, r24
    1f50:	c1 2c       	mov	r12, r1
    1f52:	d1 2c       	mov	r13, r1
    1f54:	ae 20       	and	r10, r14
    1f56:	bf 20       	and	r11, r15
    1f58:	c0 22       	and	r12, r16
    1f5a:	d1 22       	and	r13, r17
    1f5c:	78 01       	movw	r14, r16
    1f5e:	00 27       	eor	r16, r16
    1f60:	11 27       	eor	r17, r17
    1f62:	21 96       	adiw	r28, 0x01	; 1
    1f64:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f66:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f68:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f6a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f6c:	21 97       	sbiw	r28, 0x01	; 1
    1f6e:	2f ef       	ldi	r18, 0xFF	; 255
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	62 22       	and	r6, r18
    1f78:	73 22       	and	r7, r19
    1f7a:	84 22       	and	r8, r20
    1f7c:	95 22       	and	r9, r21
    1f7e:	21 96       	adiw	r28, 0x01	; 1
    1f80:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f82:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f84:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f86:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f88:	21 97       	sbiw	r28, 0x01	; 1
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	66 27       	eor	r22, r22
    1f8e:	77 27       	eor	r23, r23
    1f90:	ad 96       	adiw	r28, 0x2d	; 45
    1f92:	4c af       	std	Y+60, r20	; 0x3c
    1f94:	5d af       	std	Y+61, r21	; 0x3d
    1f96:	6e af       	std	Y+62, r22	; 0x3e
    1f98:	7f af       	std	Y+63, r23	; 0x3f
    1f9a:	ad 97       	sbiw	r28, 0x2d	; 45
    1f9c:	c6 01       	movw	r24, r12
    1f9e:	b5 01       	movw	r22, r10
    1fa0:	a4 01       	movw	r20, r8
    1fa2:	93 01       	movw	r18, r6
    1fa4:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1fa8:	a9 96       	adiw	r28, 0x29	; 41
    1faa:	6c af       	std	Y+60, r22	; 0x3c
    1fac:	7d af       	std	Y+61, r23	; 0x3d
    1fae:	8e af       	std	Y+62, r24	; 0x3e
    1fb0:	9f af       	std	Y+63, r25	; 0x3f
    1fb2:	a9 97       	sbiw	r28, 0x29	; 41
    1fb4:	c6 01       	movw	r24, r12
    1fb6:	b5 01       	movw	r22, r10
    1fb8:	ad 96       	adiw	r28, 0x2d	; 45
    1fba:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fc2:	ad 97       	sbiw	r28, 0x2d	; 45
    1fc4:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1fc8:	1b 01       	movw	r2, r22
    1fca:	2c 01       	movw	r4, r24
    1fcc:	c8 01       	movw	r24, r16
    1fce:	b7 01       	movw	r22, r14
    1fd0:	a4 01       	movw	r20, r8
    1fd2:	93 01       	movw	r18, r6
    1fd4:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1fd8:	5b 01       	movw	r10, r22
    1fda:	6c 01       	movw	r12, r24
    1fdc:	c8 01       	movw	r24, r16
    1fde:	b7 01       	movw	r22, r14
    1fe0:	ad 96       	adiw	r28, 0x2d	; 45
    1fe2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fe4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fe6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fe8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fea:	ad 97       	sbiw	r28, 0x2d	; 45
    1fec:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    1ff0:	7b 01       	movw	r14, r22
    1ff2:	8c 01       	movw	r16, r24
    1ff4:	a6 01       	movw	r20, r12
    1ff6:	95 01       	movw	r18, r10
    1ff8:	22 0d       	add	r18, r2
    1ffa:	33 1d       	adc	r19, r3
    1ffc:	44 1d       	adc	r20, r4
    1ffe:	55 1d       	adc	r21, r5
    2000:	a9 96       	adiw	r28, 0x29	; 41
    2002:	6c ac       	ldd	r6, Y+60	; 0x3c
    2004:	7d ac       	ldd	r7, Y+61	; 0x3d
    2006:	8e ac       	ldd	r8, Y+62	; 0x3e
    2008:	9f ac       	ldd	r9, Y+63	; 0x3f
    200a:	a9 97       	sbiw	r28, 0x29	; 41
    200c:	c4 01       	movw	r24, r8
    200e:	aa 27       	eor	r26, r26
    2010:	bb 27       	eor	r27, r27
    2012:	28 0f       	add	r18, r24
    2014:	39 1f       	adc	r19, r25
    2016:	4a 1f       	adc	r20, r26
    2018:	5b 1f       	adc	r21, r27
    201a:	2a 15       	cp	r18, r10
    201c:	3b 05       	cpc	r19, r11
    201e:	4c 05       	cpc	r20, r12
    2020:	5d 05       	cpc	r21, r13
    2022:	48 f4       	brcc	.+18     	; 0x2036 <__moddi3+0xdfe>
    2024:	81 2c       	mov	r8, r1
    2026:	91 2c       	mov	r9, r1
    2028:	e1 e0       	ldi	r30, 0x01	; 1
    202a:	ae 2e       	mov	r10, r30
    202c:	b1 2c       	mov	r11, r1
    202e:	e8 0c       	add	r14, r8
    2030:	f9 1c       	adc	r15, r9
    2032:	0a 1d       	adc	r16, r10
    2034:	1b 1d       	adc	r17, r11
    2036:	ca 01       	movw	r24, r20
    2038:	aa 27       	eor	r26, r26
    203a:	bb 27       	eor	r27, r27
    203c:	57 01       	movw	r10, r14
    203e:	68 01       	movw	r12, r16
    2040:	a8 0e       	add	r10, r24
    2042:	b9 1e       	adc	r11, r25
    2044:	ca 1e       	adc	r12, r26
    2046:	db 1e       	adc	r13, r27
    2048:	a9 01       	movw	r20, r18
    204a:	33 27       	eor	r19, r19
    204c:	22 27       	eor	r18, r18
    204e:	a9 96       	adiw	r28, 0x29	; 41
    2050:	8c ad       	ldd	r24, Y+60	; 0x3c
    2052:	9d ad       	ldd	r25, Y+61	; 0x3d
    2054:	ae ad       	ldd	r26, Y+62	; 0x3e
    2056:	bf ad       	ldd	r27, Y+63	; 0x3f
    2058:	a9 97       	sbiw	r28, 0x29	; 41
    205a:	a0 70       	andi	r26, 0x00	; 0
    205c:	b0 70       	andi	r27, 0x00	; 0
    205e:	28 0f       	add	r18, r24
    2060:	39 1f       	adc	r19, r25
    2062:	4a 1f       	adc	r20, r26
    2064:	5b 1f       	adc	r21, r27
    2066:	e9 a8       	ldd	r14, Y+49	; 0x31
    2068:	fa a8       	ldd	r15, Y+50	; 0x32
    206a:	0b a9       	ldd	r16, Y+51	; 0x33
    206c:	1c a9       	ldd	r17, Y+52	; 0x34
    206e:	ea 14       	cp	r14, r10
    2070:	fb 04       	cpc	r15, r11
    2072:	0c 05       	cpc	r16, r12
    2074:	1d 05       	cpc	r17, r13
    2076:	70 f0       	brcs	.+28     	; 0x2094 <__moddi3+0xe5c>
    2078:	ae 14       	cp	r10, r14
    207a:	bf 04       	cpc	r11, r15
    207c:	c0 06       	cpc	r12, r16
    207e:	d1 06       	cpc	r13, r17
    2080:	89 f5       	brne	.+98     	; 0x20e4 <__moddi3+0xeac>
    2082:	6d a9       	ldd	r22, Y+53	; 0x35
    2084:	7e a9       	ldd	r23, Y+54	; 0x36
    2086:	8f a9       	ldd	r24, Y+55	; 0x37
    2088:	98 ad       	ldd	r25, Y+56	; 0x38
    208a:	62 17       	cp	r22, r18
    208c:	73 07       	cpc	r23, r19
    208e:	84 07       	cpc	r24, r20
    2090:	95 07       	cpc	r25, r21
    2092:	40 f5       	brcc	.+80     	; 0x20e4 <__moddi3+0xeac>
    2094:	da 01       	movw	r26, r20
    2096:	c9 01       	movw	r24, r18
    2098:	21 96       	adiw	r28, 0x01	; 1
    209a:	6c ac       	ldd	r6, Y+60	; 0x3c
    209c:	7d ac       	ldd	r7, Y+61	; 0x3d
    209e:	8e ac       	ldd	r8, Y+62	; 0x3e
    20a0:	9f ac       	ldd	r9, Y+63	; 0x3f
    20a2:	21 97       	sbiw	r28, 0x01	; 1
    20a4:	86 19       	sub	r24, r6
    20a6:	97 09       	sbc	r25, r7
    20a8:	a8 09       	sbc	r26, r8
    20aa:	b9 09       	sbc	r27, r9
    20ac:	25 96       	adiw	r28, 0x05	; 5
    20ae:	ec ac       	ldd	r14, Y+60	; 0x3c
    20b0:	fd ac       	ldd	r15, Y+61	; 0x3d
    20b2:	0e ad       	ldd	r16, Y+62	; 0x3e
    20b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    20b6:	25 97       	sbiw	r28, 0x05	; 5
    20b8:	ae 18       	sub	r10, r14
    20ba:	bf 08       	sbc	r11, r15
    20bc:	c0 0a       	sbc	r12, r16
    20be:	d1 0a       	sbc	r13, r17
    20c0:	ee 24       	eor	r14, r14
    20c2:	ff 24       	eor	r15, r15
    20c4:	87 01       	movw	r16, r14
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	4a 07       	cpc	r20, r26
    20cc:	5b 07       	cpc	r21, r27
    20ce:	28 f4       	brcc	.+10     	; 0x20da <__moddi3+0xea2>
    20d0:	21 e0       	ldi	r18, 0x01	; 1
    20d2:	e2 2e       	mov	r14, r18
    20d4:	f1 2c       	mov	r15, r1
    20d6:	01 2d       	mov	r16, r1
    20d8:	11 2d       	mov	r17, r1
    20da:	ae 18       	sub	r10, r14
    20dc:	bf 08       	sbc	r11, r15
    20de:	c0 0a       	sbc	r12, r16
    20e0:	d1 0a       	sbc	r13, r17
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <__moddi3+0xeb0>
    20e4:	da 01       	movw	r26, r20
    20e6:	c9 01       	movw	r24, r18
    20e8:	6d a8       	ldd	r6, Y+53	; 0x35
    20ea:	7e a8       	ldd	r7, Y+54	; 0x36
    20ec:	8f a8       	ldd	r8, Y+55	; 0x37
    20ee:	98 ac       	ldd	r9, Y+56	; 0x38
    20f0:	68 1a       	sub	r6, r24
    20f2:	79 0a       	sbc	r7, r25
    20f4:	8a 0a       	sbc	r8, r26
    20f6:	9b 0a       	sbc	r9, r27
    20f8:	09 a9       	ldd	r16, Y+49	; 0x31
    20fa:	1a a9       	ldd	r17, Y+50	; 0x32
    20fc:	2b a9       	ldd	r18, Y+51	; 0x33
    20fe:	3c a9       	ldd	r19, Y+52	; 0x34
    2100:	0a 19       	sub	r16, r10
    2102:	1b 09       	sbc	r17, r11
    2104:	2c 09       	sbc	r18, r12
    2106:	3d 09       	sbc	r19, r13
    2108:	58 01       	movw	r10, r16
    210a:	69 01       	movw	r12, r18
    210c:	22 24       	eor	r2, r2
    210e:	33 24       	eor	r3, r3
    2110:	21 01       	movw	r4, r2
    2112:	2d a9       	ldd	r18, Y+53	; 0x35
    2114:	3e a9       	ldd	r19, Y+54	; 0x36
    2116:	4f a9       	ldd	r20, Y+55	; 0x37
    2118:	58 ad       	ldd	r21, Y+56	; 0x38
    211a:	26 15       	cp	r18, r6
    211c:	37 05       	cpc	r19, r7
    211e:	48 05       	cpc	r20, r8
    2120:	59 05       	cpc	r21, r9
    2122:	28 f4       	brcc	.+10     	; 0x212e <__moddi3+0xef6>
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	28 2e       	mov	r2, r24
    2128:	31 2c       	mov	r3, r1
    212a:	41 2c       	mov	r4, r1
    212c:	51 2c       	mov	r5, r1
    212e:	86 01       	movw	r16, r12
    2130:	75 01       	movw	r14, r10
    2132:	e2 18       	sub	r14, r2
    2134:	f3 08       	sbc	r15, r3
    2136:	04 09       	sbc	r16, r4
    2138:	15 09       	sbc	r17, r5
    213a:	a8 01       	movw	r20, r16
    213c:	97 01       	movw	r18, r14
    213e:	e2 96       	adiw	r28, 0x32	; 50
    2140:	0f ac       	ldd	r0, Y+63	; 0x3f
    2142:	e2 97       	sbiw	r28, 0x32	; 50
    2144:	04 c0       	rjmp	.+8      	; 0x214e <__moddi3+0xf16>
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	44 1f       	adc	r20, r20
    214c:	55 1f       	adc	r21, r21
    214e:	0a 94       	dec	r0
    2150:	d2 f7       	brpl	.-12     	; 0x2146 <__moddi3+0xf0e>
    2152:	d4 01       	movw	r26, r8
    2154:	c3 01       	movw	r24, r6
    2156:	e3 96       	adiw	r28, 0x33	; 51
    2158:	0f ac       	ldd	r0, Y+63	; 0x3f
    215a:	e3 97       	sbiw	r28, 0x33	; 51
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <__moddi3+0xf2e>
    215e:	b6 95       	lsr	r27
    2160:	a7 95       	ror	r26
    2162:	97 95       	ror	r25
    2164:	87 95       	ror	r24
    2166:	0a 94       	dec	r0
    2168:	d2 f7       	brpl	.-12     	; 0x215e <__moddi3+0xf26>
    216a:	28 2b       	or	r18, r24
    216c:	39 2b       	or	r19, r25
    216e:	4a 2b       	or	r20, r26
    2170:	5b 2b       	or	r21, r27
    2172:	29 a7       	std	Y+41, r18	; 0x29
    2174:	3a a7       	std	Y+42, r19	; 0x2a
    2176:	4b a7       	std	Y+43, r20	; 0x2b
    2178:	5c a7       	std	Y+44, r21	; 0x2c
    217a:	e3 96       	adiw	r28, 0x33	; 51
    217c:	0f ac       	ldd	r0, Y+63	; 0x3f
    217e:	e3 97       	sbiw	r28, 0x33	; 51
    2180:	04 c0       	rjmp	.+8      	; 0x218a <__moddi3+0xf52>
    2182:	16 95       	lsr	r17
    2184:	07 95       	ror	r16
    2186:	f7 94       	ror	r15
    2188:	e7 94       	ror	r14
    218a:	0a 94       	dec	r0
    218c:	d2 f7       	brpl	.-12     	; 0x2182 <__moddi3+0xf4a>
    218e:	ed a6       	std	Y+45, r14	; 0x2d
    2190:	fe a6       	std	Y+46, r15	; 0x2e
    2192:	0f a7       	std	Y+47, r16	; 0x2f
    2194:	18 ab       	std	Y+48, r17	; 0x30
    2196:	29 8b       	std	Y+17, r18	; 0x11
    2198:	8a a5       	ldd	r24, Y+42	; 0x2a
    219a:	8a 8b       	std	Y+18, r24	; 0x12
    219c:	8b a5       	ldd	r24, Y+43	; 0x2b
    219e:	8b 8b       	std	Y+19, r24	; 0x13
    21a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    21a2:	8c 8b       	std	Y+20, r24	; 0x14
    21a4:	ed 8a       	std	Y+21, r14	; 0x15
    21a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    21a8:	8e 8b       	std	Y+22, r24	; 0x16
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	8f 8b       	std	Y+23, r24	; 0x17
    21ae:	88 a9       	ldd	r24, Y+48	; 0x30
    21b0:	88 8f       	std	Y+24, r24	; 0x18
    21b2:	e1 96       	adiw	r28, 0x31	; 49
    21b4:	4c ad       	ldd	r20, Y+60	; 0x3c
    21b6:	5d ad       	ldd	r21, Y+61	; 0x3d
    21b8:	6e ad       	ldd	r22, Y+62	; 0x3e
    21ba:	7f ad       	ldd	r23, Y+63	; 0x3f
    21bc:	e1 97       	sbiw	r28, 0x31	; 49
    21be:	41 15       	cp	r20, r1
    21c0:	51 05       	cpc	r21, r1
    21c2:	61 05       	cpc	r22, r1
    21c4:	71 05       	cpc	r23, r1
    21c6:	09 f4       	brne	.+2      	; 0x21ca <__moddi3+0xf92>
    21c8:	67 c0       	rjmp	.+206    	; 0x2298 <__moddi3+0x1060>
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	2a 89       	ldd	r18, Y+18	; 0x12
    21ce:	3b 89       	ldd	r19, Y+19	; 0x13
    21d0:	4c 89       	ldd	r20, Y+20	; 0x14
    21d2:	5d 89       	ldd	r21, Y+21	; 0x15
    21d4:	ae 89       	ldd	r26, Y+22	; 0x16
    21d6:	bf 89       	ldd	r27, Y+23	; 0x17
    21d8:	18 8d       	ldd	r17, Y+24	; 0x18
    21da:	f8 2f       	mov	r31, r24
    21dc:	f1 95       	neg	r31
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	1f 16       	cp	r1, r31
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <__moddi3+0xfae>
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	82 2f       	mov	r24, r18
    21e8:	81 95       	neg	r24
    21ea:	21 e0       	ldi	r18, 0x01	; 1
    21ec:	18 16       	cp	r1, r24
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <__moddi3+0xfba>
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	e8 2f       	mov	r30, r24
    21f4:	e9 1b       	sub	r30, r25
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	8e 17       	cp	r24, r30
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <__moddi3+0xfc6>
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	29 2b       	or	r18, r25
    2200:	83 2f       	mov	r24, r19
    2202:	81 95       	neg	r24
    2204:	31 e0       	ldi	r19, 0x01	; 1
    2206:	18 16       	cp	r1, r24
    2208:	08 f0       	brcs	.+2      	; 0x220c <__moddi3+0xfd4>
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	78 2f       	mov	r23, r24
    220e:	72 1b       	sub	r23, r18
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	87 17       	cp	r24, r23
    2214:	08 f0       	brcs	.+2      	; 0x2218 <__moddi3+0xfe0>
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	39 2b       	or	r19, r25
    221a:	84 2f       	mov	r24, r20
    221c:	81 95       	neg	r24
    221e:	21 e0       	ldi	r18, 0x01	; 1
    2220:	18 16       	cp	r1, r24
    2222:	08 f0       	brcs	.+2      	; 0x2226 <__moddi3+0xfee>
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	68 2f       	mov	r22, r24
    2228:	63 1b       	sub	r22, r19
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	86 17       	cp	r24, r22
    222e:	08 f0       	brcs	.+2      	; 0x2232 <__moddi3+0xffa>
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	29 2b       	or	r18, r25
    2234:	85 2f       	mov	r24, r21
    2236:	81 95       	neg	r24
    2238:	31 e0       	ldi	r19, 0x01	; 1
    223a:	18 16       	cp	r1, r24
    223c:	08 f0       	brcs	.+2      	; 0x2240 <__moddi3+0x1008>
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	58 2f       	mov	r21, r24
    2242:	52 1b       	sub	r21, r18
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	85 17       	cp	r24, r21
    2248:	08 f0       	brcs	.+2      	; 0x224c <__moddi3+0x1014>
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	39 2b       	or	r19, r25
    224e:	8a 2f       	mov	r24, r26
    2250:	81 95       	neg	r24
    2252:	21 e0       	ldi	r18, 0x01	; 1
    2254:	18 16       	cp	r1, r24
    2256:	08 f0       	brcs	.+2      	; 0x225a <__moddi3+0x1022>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	48 2f       	mov	r20, r24
    225c:	43 1b       	sub	r20, r19
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	84 17       	cp	r24, r20
    2262:	08 f0       	brcs	.+2      	; 0x2266 <__moddi3+0x102e>
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	29 2b       	or	r18, r25
    2268:	8b 2f       	mov	r24, r27
    226a:	81 95       	neg	r24
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	18 16       	cp	r1, r24
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__moddi3+0x103c>
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	38 2f       	mov	r19, r24
    2276:	32 1b       	sub	r19, r18
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	83 17       	cp	r24, r19
    227c:	08 f0       	brcs	.+2      	; 0x2280 <__moddi3+0x1048>
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	92 2b       	or	r25, r18
    2282:	81 2f       	mov	r24, r17
    2284:	81 95       	neg	r24
    2286:	89 1b       	sub	r24, r25
    2288:	f9 8b       	std	Y+17, r31	; 0x11
    228a:	ea 8b       	std	Y+18, r30	; 0x12
    228c:	7b 8b       	std	Y+19, r23	; 0x13
    228e:	6c 8b       	std	Y+20, r22	; 0x14
    2290:	5d 8b       	std	Y+21, r21	; 0x15
    2292:	4e 8b       	std	Y+22, r20	; 0x16
    2294:	3f 8b       	std	Y+23, r19	; 0x17
    2296:	88 8f       	std	Y+24, r24	; 0x18
    2298:	29 89       	ldd	r18, Y+17	; 0x11
    229a:	3a 89       	ldd	r19, Y+18	; 0x12
    229c:	4b 89       	ldd	r20, Y+19	; 0x13
    229e:	5c 89       	ldd	r21, Y+20	; 0x14
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	c9 58       	subi	r28, 0x89	; 137
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	e2 e1       	ldi	r30, 0x12	; 18
    22ae:	0c 94 0b 3e 	jmp	0x7c16	; 0x7c16 <__epilogue_restores__>

000022b2 <__udivdi3>:
    22b2:	ae e5       	ldi	r26, 0x5E	; 94
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ef e5       	ldi	r30, 0x5F	; 95
    22b8:	f1 e1       	ldi	r31, 0x11	; 17
    22ba:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__prologue_saves__>
    22be:	a8 e0       	ldi	r26, 0x08	; 8
    22c0:	4e 01       	movw	r8, r28
    22c2:	08 94       	sec
    22c4:	81 1c       	adc	r8, r1
    22c6:	91 1c       	adc	r9, r1
    22c8:	f4 01       	movw	r30, r8
    22ca:	6a 2e       	mov	r6, r26
    22cc:	11 92       	st	Z+, r1
    22ce:	6a 94       	dec	r6
    22d0:	e9 f7       	brne	.-6      	; 0x22cc <__udivdi3+0x1a>
    22d2:	29 83       	std	Y+1, r18	; 0x01
    22d4:	3a 83       	std	Y+2, r19	; 0x02
    22d6:	4b 83       	std	Y+3, r20	; 0x03
    22d8:	5c 83       	std	Y+4, r21	; 0x04
    22da:	6d 83       	std	Y+5, r22	; 0x05
    22dc:	7e 83       	std	Y+6, r23	; 0x06
    22de:	8f 83       	std	Y+7, r24	; 0x07
    22e0:	98 87       	std	Y+8, r25	; 0x08
    22e2:	ce 01       	movw	r24, r28
    22e4:	09 96       	adiw	r24, 0x09	; 9
    22e6:	fc 01       	movw	r30, r24
    22e8:	11 92       	st	Z+, r1
    22ea:	aa 95       	dec	r26
    22ec:	e9 f7       	brne	.-6      	; 0x22e8 <__udivdi3+0x36>
    22ee:	a9 86       	std	Y+9, r10	; 0x09
    22f0:	ba 86       	std	Y+10, r11	; 0x0a
    22f2:	cb 86       	std	Y+11, r12	; 0x0b
    22f4:	dc 86       	std	Y+12, r13	; 0x0c
    22f6:	ed 86       	std	Y+13, r14	; 0x0d
    22f8:	fe 86       	std	Y+14, r15	; 0x0e
    22fa:	0f 87       	std	Y+15, r16	; 0x0f
    22fc:	18 8b       	std	Y+16, r17	; 0x10
    22fe:	29 84       	ldd	r2, Y+9	; 0x09
    2300:	3a 84       	ldd	r3, Y+10	; 0x0a
    2302:	4b 84       	ldd	r4, Y+11	; 0x0b
    2304:	5c 84       	ldd	r5, Y+12	; 0x0c
    2306:	ed 84       	ldd	r14, Y+13	; 0x0d
    2308:	fe 84       	ldd	r15, Y+14	; 0x0e
    230a:	0f 85       	ldd	r16, Y+15	; 0x0f
    230c:	18 89       	ldd	r17, Y+16	; 0x10
    230e:	69 80       	ldd	r6, Y+1	; 0x01
    2310:	7a 80       	ldd	r7, Y+2	; 0x02
    2312:	8b 80       	ldd	r8, Y+3	; 0x03
    2314:	9c 80       	ldd	r9, Y+4	; 0x04
    2316:	6d a6       	std	Y+45, r6	; 0x2d
    2318:	7e a6       	std	Y+46, r7	; 0x2e
    231a:	8f a6       	std	Y+47, r8	; 0x2f
    231c:	98 aa       	std	Y+48, r9	; 0x30
    231e:	6d 80       	ldd	r6, Y+5	; 0x05
    2320:	7e 80       	ldd	r7, Y+6	; 0x06
    2322:	8f 80       	ldd	r8, Y+7	; 0x07
    2324:	98 84       	ldd	r9, Y+8	; 0x08
    2326:	e1 14       	cp	r14, r1
    2328:	f1 04       	cpc	r15, r1
    232a:	01 05       	cpc	r16, r1
    232c:	11 05       	cpc	r17, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <__udivdi3+0x80>
    2330:	b3 c3       	rjmp	.+1894   	; 0x2a98 <__udivdi3+0x7e6>
    2332:	62 14       	cp	r6, r2
    2334:	73 04       	cpc	r7, r3
    2336:	84 04       	cpc	r8, r4
    2338:	95 04       	cpc	r9, r5
    233a:	08 f0       	brcs	.+2      	; 0x233e <__udivdi3+0x8c>
    233c:	3d c1       	rjmp	.+634    	; 0x25b8 <__udivdi3+0x306>
    233e:	00 e0       	ldi	r16, 0x00	; 0
    2340:	20 16       	cp	r2, r16
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	30 06       	cpc	r3, r16
    2346:	01 e0       	ldi	r16, 0x01	; 1
    2348:	40 06       	cpc	r4, r16
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	50 06       	cpc	r5, r16
    234e:	88 f4       	brcc	.+34     	; 0x2372 <__udivdi3+0xc0>
    2350:	1f ef       	ldi	r17, 0xFF	; 255
    2352:	21 16       	cp	r2, r17
    2354:	31 04       	cpc	r3, r1
    2356:	41 04       	cpc	r4, r1
    2358:	51 04       	cpc	r5, r1
    235a:	39 f0       	breq	.+14     	; 0x236a <__udivdi3+0xb8>
    235c:	30 f0       	brcs	.+12     	; 0x236a <__udivdi3+0xb8>
    235e:	48 e0       	ldi	r20, 0x08	; 8
    2360:	e4 2e       	mov	r14, r20
    2362:	f1 2c       	mov	r15, r1
    2364:	01 2d       	mov	r16, r1
    2366:	11 2d       	mov	r17, r1
    2368:	18 c0       	rjmp	.+48     	; 0x239a <__udivdi3+0xe8>
    236a:	ee 24       	eor	r14, r14
    236c:	ff 24       	eor	r15, r15
    236e:	87 01       	movw	r16, r14
    2370:	14 c0       	rjmp	.+40     	; 0x239a <__udivdi3+0xe8>
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	22 16       	cp	r2, r18
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	32 06       	cpc	r3, r18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	42 06       	cpc	r4, r18
    237e:	21 e0       	ldi	r18, 0x01	; 1
    2380:	52 06       	cpc	r5, r18
    2382:	30 f0       	brcs	.+12     	; 0x2390 <__udivdi3+0xde>
    2384:	38 e1       	ldi	r19, 0x18	; 24
    2386:	e3 2e       	mov	r14, r19
    2388:	f1 2c       	mov	r15, r1
    238a:	01 2d       	mov	r16, r1
    238c:	11 2d       	mov	r17, r1
    238e:	05 c0       	rjmp	.+10     	; 0x239a <__udivdi3+0xe8>
    2390:	20 e1       	ldi	r18, 0x10	; 16
    2392:	e2 2e       	mov	r14, r18
    2394:	f1 2c       	mov	r15, r1
    2396:	01 2d       	mov	r16, r1
    2398:	11 2d       	mov	r17, r1
    239a:	d2 01       	movw	r26, r4
    239c:	c1 01       	movw	r24, r2
    239e:	0e 2c       	mov	r0, r14
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <__udivdi3+0xf8>
    23a2:	b6 95       	lsr	r27
    23a4:	a7 95       	ror	r26
    23a6:	97 95       	ror	r25
    23a8:	87 95       	ror	r24
    23aa:	0a 94       	dec	r0
    23ac:	d2 f7       	brpl	.-12     	; 0x23a2 <__udivdi3+0xf0>
    23ae:	83 59       	subi	r24, 0x93	; 147
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	dc 01       	movw	r26, r24
    23b4:	2c 91       	ld	r18, X
    23b6:	80 e2       	ldi	r24, 0x20	; 32
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	8e 19       	sub	r24, r14
    23c0:	9f 09       	sbc	r25, r15
    23c2:	a0 0b       	sbc	r26, r16
    23c4:	b1 0b       	sbc	r27, r17
    23c6:	7c 01       	movw	r14, r24
    23c8:	8d 01       	movw	r16, r26
    23ca:	e2 1a       	sub	r14, r18
    23cc:	f1 08       	sbc	r15, r1
    23ce:	01 09       	sbc	r16, r1
    23d0:	11 09       	sbc	r17, r1
    23d2:	e1 14       	cp	r14, r1
    23d4:	f1 04       	cpc	r15, r1
    23d6:	01 05       	cpc	r16, r1
    23d8:	11 05       	cpc	r17, r1
    23da:	a1 f1       	breq	.+104    	; 0x2444 <__udivdi3+0x192>
    23dc:	0e 2c       	mov	r0, r14
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <__udivdi3+0x136>
    23e0:	22 0c       	add	r2, r2
    23e2:	33 1c       	adc	r3, r3
    23e4:	44 1c       	adc	r4, r4
    23e6:	55 1c       	adc	r5, r5
    23e8:	0a 94       	dec	r0
    23ea:	d2 f7       	brpl	.-12     	; 0x23e0 <__udivdi3+0x12e>
    23ec:	a4 01       	movw	r20, r8
    23ee:	93 01       	movw	r18, r6
    23f0:	0e 2c       	mov	r0, r14
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <__udivdi3+0x14a>
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	44 1f       	adc	r20, r20
    23fa:	55 1f       	adc	r21, r21
    23fc:	0a 94       	dec	r0
    23fe:	d2 f7       	brpl	.-12     	; 0x23f4 <__udivdi3+0x142>
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	8e 19       	sub	r24, r14
    2406:	9f 09       	sbc	r25, r15
    2408:	6d a4       	ldd	r6, Y+45	; 0x2d
    240a:	7e a4       	ldd	r7, Y+46	; 0x2e
    240c:	8f a4       	ldd	r8, Y+47	; 0x2f
    240e:	98 a8       	ldd	r9, Y+48	; 0x30
    2410:	04 c0       	rjmp	.+8      	; 0x241a <__udivdi3+0x168>
    2412:	96 94       	lsr	r9
    2414:	87 94       	ror	r8
    2416:	77 94       	ror	r7
    2418:	67 94       	ror	r6
    241a:	8a 95       	dec	r24
    241c:	d2 f7       	brpl	.-12     	; 0x2412 <__udivdi3+0x160>
    241e:	62 2a       	or	r6, r18
    2420:	73 2a       	or	r7, r19
    2422:	84 2a       	or	r8, r20
    2424:	95 2a       	or	r9, r21
    2426:	ad a4       	ldd	r10, Y+45	; 0x2d
    2428:	be a4       	ldd	r11, Y+46	; 0x2e
    242a:	cf a4       	ldd	r12, Y+47	; 0x2f
    242c:	d8 a8       	ldd	r13, Y+48	; 0x30
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <__udivdi3+0x186>
    2430:	aa 0c       	add	r10, r10
    2432:	bb 1c       	adc	r11, r11
    2434:	cc 1c       	adc	r12, r12
    2436:	dd 1c       	adc	r13, r13
    2438:	ea 94       	dec	r14
    243a:	d2 f7       	brpl	.-12     	; 0x2430 <__udivdi3+0x17e>
    243c:	ad a6       	std	Y+45, r10	; 0x2d
    243e:	be a6       	std	Y+46, r11	; 0x2e
    2440:	cf a6       	std	Y+47, r12	; 0x2f
    2442:	d8 aa       	std	Y+48, r13	; 0x30
    2444:	62 01       	movw	r12, r4
    2446:	ee 24       	eor	r14, r14
    2448:	ff 24       	eor	r15, r15
    244a:	cd aa       	std	Y+53, r12	; 0x35
    244c:	de aa       	std	Y+54, r13	; 0x36
    244e:	ef aa       	std	Y+55, r14	; 0x37
    2450:	f8 ae       	std	Y+56, r15	; 0x38
    2452:	92 01       	movw	r18, r4
    2454:	81 01       	movw	r16, r2
    2456:	20 70       	andi	r18, 0x00	; 0
    2458:	30 70       	andi	r19, 0x00	; 0
    245a:	09 af       	std	Y+57, r16	; 0x39
    245c:	1a af       	std	Y+58, r17	; 0x3a
    245e:	2b af       	std	Y+59, r18	; 0x3b
    2460:	3c af       	std	Y+60, r19	; 0x3c
    2462:	c4 01       	movw	r24, r8
    2464:	b3 01       	movw	r22, r6
    2466:	a7 01       	movw	r20, r14
    2468:	96 01       	movw	r18, r12
    246a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    246e:	7b 01       	movw	r14, r22
    2470:	8c 01       	movw	r16, r24
    2472:	c4 01       	movw	r24, r8
    2474:	b3 01       	movw	r22, r6
    2476:	2d a9       	ldd	r18, Y+53	; 0x35
    2478:	3e a9       	ldd	r19, Y+54	; 0x36
    247a:	4f a9       	ldd	r20, Y+55	; 0x37
    247c:	58 ad       	ldd	r21, Y+56	; 0x38
    247e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2482:	c9 01       	movw	r24, r18
    2484:	da 01       	movw	r26, r20
    2486:	3c 01       	movw	r6, r24
    2488:	4d 01       	movw	r8, r26
    248a:	c4 01       	movw	r24, r8
    248c:	b3 01       	movw	r22, r6
    248e:	29 ad       	ldd	r18, Y+57	; 0x39
    2490:	3a ad       	ldd	r19, Y+58	; 0x3a
    2492:	4b ad       	ldd	r20, Y+59	; 0x3b
    2494:	5c ad       	ldd	r21, Y+60	; 0x3c
    2496:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	87 01       	movw	r16, r14
    24a0:	ff 24       	eor	r15, r15
    24a2:	ee 24       	eor	r14, r14
    24a4:	ad a4       	ldd	r10, Y+45	; 0x2d
    24a6:	be a4       	ldd	r11, Y+46	; 0x2e
    24a8:	cf a4       	ldd	r12, Y+47	; 0x2f
    24aa:	d8 a8       	ldd	r13, Y+48	; 0x30
    24ac:	c6 01       	movw	r24, r12
    24ae:	aa 27       	eor	r26, r26
    24b0:	bb 27       	eor	r27, r27
    24b2:	57 01       	movw	r10, r14
    24b4:	68 01       	movw	r12, r16
    24b6:	a8 2a       	or	r10, r24
    24b8:	b9 2a       	or	r11, r25
    24ba:	ca 2a       	or	r12, r26
    24bc:	db 2a       	or	r13, r27
    24be:	a2 16       	cp	r10, r18
    24c0:	b3 06       	cpc	r11, r19
    24c2:	c4 06       	cpc	r12, r20
    24c4:	d5 06       	cpc	r13, r21
    24c6:	e0 f4       	brcc	.+56     	; 0x2500 <__udivdi3+0x24e>
    24c8:	08 94       	sec
    24ca:	61 08       	sbc	r6, r1
    24cc:	71 08       	sbc	r7, r1
    24ce:	81 08       	sbc	r8, r1
    24d0:	91 08       	sbc	r9, r1
    24d2:	a2 0c       	add	r10, r2
    24d4:	b3 1c       	adc	r11, r3
    24d6:	c4 1c       	adc	r12, r4
    24d8:	d5 1c       	adc	r13, r5
    24da:	a2 14       	cp	r10, r2
    24dc:	b3 04       	cpc	r11, r3
    24de:	c4 04       	cpc	r12, r4
    24e0:	d5 04       	cpc	r13, r5
    24e2:	70 f0       	brcs	.+28     	; 0x2500 <__udivdi3+0x24e>
    24e4:	a2 16       	cp	r10, r18
    24e6:	b3 06       	cpc	r11, r19
    24e8:	c4 06       	cpc	r12, r20
    24ea:	d5 06       	cpc	r13, r21
    24ec:	48 f4       	brcc	.+18     	; 0x2500 <__udivdi3+0x24e>
    24ee:	08 94       	sec
    24f0:	61 08       	sbc	r6, r1
    24f2:	71 08       	sbc	r7, r1
    24f4:	81 08       	sbc	r8, r1
    24f6:	91 08       	sbc	r9, r1
    24f8:	a2 0c       	add	r10, r2
    24fa:	b3 1c       	adc	r11, r3
    24fc:	c4 1c       	adc	r12, r4
    24fe:	d5 1c       	adc	r13, r5
    2500:	a2 1a       	sub	r10, r18
    2502:	b3 0a       	sbc	r11, r19
    2504:	c4 0a       	sbc	r12, r20
    2506:	d5 0a       	sbc	r13, r21
    2508:	c6 01       	movw	r24, r12
    250a:	b5 01       	movw	r22, r10
    250c:	2d a9       	ldd	r18, Y+53	; 0x35
    250e:	3e a9       	ldd	r19, Y+54	; 0x36
    2510:	4f a9       	ldd	r20, Y+55	; 0x37
    2512:	58 ad       	ldd	r21, Y+56	; 0x38
    2514:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2518:	7b 01       	movw	r14, r22
    251a:	8c 01       	movw	r16, r24
    251c:	c6 01       	movw	r24, r12
    251e:	b5 01       	movw	r22, r10
    2520:	2d a9       	ldd	r18, Y+53	; 0x35
    2522:	3e a9       	ldd	r19, Y+54	; 0x36
    2524:	4f a9       	ldd	r20, Y+55	; 0x37
    2526:	58 ad       	ldd	r21, Y+56	; 0x38
    2528:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    252c:	c9 01       	movw	r24, r18
    252e:	da 01       	movw	r26, r20
    2530:	5c 01       	movw	r10, r24
    2532:	6d 01       	movw	r12, r26
    2534:	c6 01       	movw	r24, r12
    2536:	b5 01       	movw	r22, r10
    2538:	29 ad       	ldd	r18, Y+57	; 0x39
    253a:	3a ad       	ldd	r19, Y+58	; 0x3a
    253c:	4b ad       	ldd	r20, Y+59	; 0x3b
    253e:	5c ad       	ldd	r21, Y+60	; 0x3c
    2540:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	87 01       	movw	r16, r14
    254a:	ff 24       	eor	r15, r15
    254c:	ee 24       	eor	r14, r14
    254e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2550:	9e a5       	ldd	r25, Y+46	; 0x2e
    2552:	af a5       	ldd	r26, Y+47	; 0x2f
    2554:	b8 a9       	ldd	r27, Y+48	; 0x30
    2556:	a0 70       	andi	r26, 0x00	; 0
    2558:	b0 70       	andi	r27, 0x00	; 0
    255a:	e8 2a       	or	r14, r24
    255c:	f9 2a       	or	r15, r25
    255e:	0a 2b       	or	r16, r26
    2560:	1b 2b       	or	r17, r27
    2562:	e2 16       	cp	r14, r18
    2564:	f3 06       	cpc	r15, r19
    2566:	04 07       	cpc	r16, r20
    2568:	15 07       	cpc	r17, r21
    256a:	c0 f4       	brcc	.+48     	; 0x259c <__udivdi3+0x2ea>
    256c:	08 94       	sec
    256e:	a1 08       	sbc	r10, r1
    2570:	b1 08       	sbc	r11, r1
    2572:	c1 08       	sbc	r12, r1
    2574:	d1 08       	sbc	r13, r1
    2576:	e2 0c       	add	r14, r2
    2578:	f3 1c       	adc	r15, r3
    257a:	04 1d       	adc	r16, r4
    257c:	15 1d       	adc	r17, r5
    257e:	e2 14       	cp	r14, r2
    2580:	f3 04       	cpc	r15, r3
    2582:	04 05       	cpc	r16, r4
    2584:	15 05       	cpc	r17, r5
    2586:	50 f0       	brcs	.+20     	; 0x259c <__udivdi3+0x2ea>
    2588:	e2 16       	cp	r14, r18
    258a:	f3 06       	cpc	r15, r19
    258c:	04 07       	cpc	r16, r20
    258e:	15 07       	cpc	r17, r21
    2590:	28 f4       	brcc	.+10     	; 0x259c <__udivdi3+0x2ea>
    2592:	08 94       	sec
    2594:	a1 08       	sbc	r10, r1
    2596:	b1 08       	sbc	r11, r1
    2598:	c1 08       	sbc	r12, r1
    259a:	d1 08       	sbc	r13, r1
    259c:	d3 01       	movw	r26, r6
    259e:	99 27       	eor	r25, r25
    25a0:	88 27       	eor	r24, r24
    25a2:	86 01       	movw	r16, r12
    25a4:	75 01       	movw	r14, r10
    25a6:	e8 2a       	or	r14, r24
    25a8:	f9 2a       	or	r15, r25
    25aa:	0a 2b       	or	r16, r26
    25ac:	1b 2b       	or	r17, r27
    25ae:	e9 aa       	std	Y+49, r14	; 0x31
    25b0:	fa aa       	std	Y+50, r15	; 0x32
    25b2:	0b ab       	std	Y+51, r16	; 0x33
    25b4:	1c ab       	std	Y+52, r17	; 0x34
    25b6:	cf c4       	rjmp	.+2462   	; 0x2f56 <__udivdi3+0xca4>
    25b8:	21 14       	cp	r2, r1
    25ba:	31 04       	cpc	r3, r1
    25bc:	41 04       	cpc	r4, r1
    25be:	51 04       	cpc	r5, r1
    25c0:	71 f4       	brne	.+28     	; 0x25de <__udivdi3+0x32c>
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    25d6:	c9 01       	movw	r24, r18
    25d8:	da 01       	movw	r26, r20
    25da:	1c 01       	movw	r2, r24
    25dc:	2d 01       	movw	r4, r26
    25de:	00 e0       	ldi	r16, 0x00	; 0
    25e0:	20 16       	cp	r2, r16
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	30 06       	cpc	r3, r16
    25e6:	01 e0       	ldi	r16, 0x01	; 1
    25e8:	40 06       	cpc	r4, r16
    25ea:	00 e0       	ldi	r16, 0x00	; 0
    25ec:	50 06       	cpc	r5, r16
    25ee:	88 f4       	brcc	.+34     	; 0x2612 <__udivdi3+0x360>
    25f0:	1f ef       	ldi	r17, 0xFF	; 255
    25f2:	21 16       	cp	r2, r17
    25f4:	31 04       	cpc	r3, r1
    25f6:	41 04       	cpc	r4, r1
    25f8:	51 04       	cpc	r5, r1
    25fa:	31 f0       	breq	.+12     	; 0x2608 <__udivdi3+0x356>
    25fc:	28 f0       	brcs	.+10     	; 0x2608 <__udivdi3+0x356>
    25fe:	48 e0       	ldi	r20, 0x08	; 8
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	17 c0       	rjmp	.+46     	; 0x2636 <__udivdi3+0x384>
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	12 c0       	rjmp	.+36     	; 0x2636 <__udivdi3+0x384>
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	22 16       	cp	r2, r18
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	32 06       	cpc	r3, r18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	42 06       	cpc	r4, r18
    261e:	21 e0       	ldi	r18, 0x01	; 1
    2620:	52 06       	cpc	r5, r18
    2622:	28 f0       	brcs	.+10     	; 0x262e <__udivdi3+0x37c>
    2624:	48 e1       	ldi	r20, 0x18	; 24
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <__udivdi3+0x384>
    262e:	40 e1       	ldi	r20, 0x10	; 16
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	d2 01       	movw	r26, r4
    2638:	c1 01       	movw	r24, r2
    263a:	04 2e       	mov	r0, r20
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <__udivdi3+0x394>
    263e:	b6 95       	lsr	r27
    2640:	a7 95       	ror	r26
    2642:	97 95       	ror	r25
    2644:	87 95       	ror	r24
    2646:	0a 94       	dec	r0
    2648:	d2 f7       	brpl	.-12     	; 0x263e <__udivdi3+0x38c>
    264a:	83 59       	subi	r24, 0x93	; 147
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	dc 01       	movw	r26, r24
    2650:	2c 91       	ld	r18, X
    2652:	e0 e2       	ldi	r30, 0x20	; 32
    2654:	ee 2e       	mov	r14, r30
    2656:	f1 2c       	mov	r15, r1
    2658:	01 2d       	mov	r16, r1
    265a:	11 2d       	mov	r17, r1
    265c:	d8 01       	movw	r26, r16
    265e:	c7 01       	movw	r24, r14
    2660:	84 1b       	sub	r24, r20
    2662:	95 0b       	sbc	r25, r21
    2664:	a6 0b       	sbc	r26, r22
    2666:	b7 0b       	sbc	r27, r23
    2668:	82 1b       	sub	r24, r18
    266a:	91 09       	sbc	r25, r1
    266c:	a1 09       	sbc	r26, r1
    266e:	b1 09       	sbc	r27, r1
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	a1 05       	cpc	r26, r1
    2674:	b1 05       	cpc	r27, r1
    2676:	61 f4       	brne	.+24     	; 0x2690 <__udivdi3+0x3de>
    2678:	64 01       	movw	r12, r8
    267a:	53 01       	movw	r10, r6
    267c:	a2 18       	sub	r10, r2
    267e:	b3 08       	sbc	r11, r3
    2680:	c4 08       	sbc	r12, r4
    2682:	d5 08       	sbc	r13, r5
    2684:	31 e0       	ldi	r19, 0x01	; 1
    2686:	63 2e       	mov	r6, r19
    2688:	71 2c       	mov	r7, r1
    268a:	81 2c       	mov	r8, r1
    268c:	91 2c       	mov	r9, r1
    268e:	1e c1       	rjmp	.+572    	; 0x28cc <__udivdi3+0x61a>
    2690:	6f 96       	adiw	r28, 0x1f	; 31
    2692:	8f af       	std	Y+63, r24	; 0x3f
    2694:	6f 97       	sbiw	r28, 0x1f	; 31
    2696:	08 2e       	mov	r0, r24
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <__udivdi3+0x3f0>
    269a:	22 0c       	add	r2, r2
    269c:	33 1c       	adc	r3, r3
    269e:	44 1c       	adc	r4, r4
    26a0:	55 1c       	adc	r5, r5
    26a2:	0a 94       	dec	r0
    26a4:	d2 f7       	brpl	.-12     	; 0x269a <__udivdi3+0x3e8>
    26a6:	ee 2d       	mov	r30, r14
    26a8:	e8 1b       	sub	r30, r24
    26aa:	64 01       	movw	r12, r8
    26ac:	53 01       	movw	r10, r6
    26ae:	0e 2e       	mov	r0, r30
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <__udivdi3+0x408>
    26b2:	d6 94       	lsr	r13
    26b4:	c7 94       	ror	r12
    26b6:	b7 94       	ror	r11
    26b8:	a7 94       	ror	r10
    26ba:	0a 94       	dec	r0
    26bc:	d2 f7       	brpl	.-12     	; 0x26b2 <__udivdi3+0x400>
    26be:	a4 01       	movw	r20, r8
    26c0:	93 01       	movw	r18, r6
    26c2:	6f 96       	adiw	r28, 0x1f	; 31
    26c4:	0f ac       	ldd	r0, Y+63	; 0x3f
    26c6:	6f 97       	sbiw	r28, 0x1f	; 31
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <__udivdi3+0x420>
    26ca:	22 0f       	add	r18, r18
    26cc:	33 1f       	adc	r19, r19
    26ce:	44 1f       	adc	r20, r20
    26d0:	55 1f       	adc	r21, r21
    26d2:	0a 94       	dec	r0
    26d4:	d2 f7       	brpl	.-12     	; 0x26ca <__udivdi3+0x418>
    26d6:	6d a4       	ldd	r6, Y+45	; 0x2d
    26d8:	7e a4       	ldd	r7, Y+46	; 0x2e
    26da:	8f a4       	ldd	r8, Y+47	; 0x2f
    26dc:	98 a8       	ldd	r9, Y+48	; 0x30
    26de:	0e 2e       	mov	r0, r30
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <__udivdi3+0x438>
    26e2:	96 94       	lsr	r9
    26e4:	87 94       	ror	r8
    26e6:	77 94       	ror	r7
    26e8:	67 94       	ror	r6
    26ea:	0a 94       	dec	r0
    26ec:	d2 f7       	brpl	.-12     	; 0x26e2 <__udivdi3+0x430>
    26ee:	84 01       	movw	r16, r8
    26f0:	73 01       	movw	r14, r6
    26f2:	e2 2a       	or	r14, r18
    26f4:	f3 2a       	or	r15, r19
    26f6:	04 2b       	or	r16, r20
    26f8:	15 2b       	or	r17, r21
    26fa:	e9 a6       	std	Y+41, r14	; 0x29
    26fc:	fa a6       	std	Y+42, r15	; 0x2a
    26fe:	0b a7       	std	Y+43, r16	; 0x2b
    2700:	1c a7       	std	Y+44, r17	; 0x2c
    2702:	32 01       	movw	r6, r4
    2704:	88 24       	eor	r8, r8
    2706:	99 24       	eor	r9, r9
    2708:	92 01       	movw	r18, r4
    270a:	81 01       	movw	r16, r2
    270c:	20 70       	andi	r18, 0x00	; 0
    270e:	30 70       	andi	r19, 0x00	; 0
    2710:	21 96       	adiw	r28, 0x01	; 1
    2712:	0c af       	std	Y+60, r16	; 0x3c
    2714:	1d af       	std	Y+61, r17	; 0x3d
    2716:	2e af       	std	Y+62, r18	; 0x3e
    2718:	3f af       	std	Y+63, r19	; 0x3f
    271a:	21 97       	sbiw	r28, 0x01	; 1
    271c:	c6 01       	movw	r24, r12
    271e:	b5 01       	movw	r22, r10
    2720:	a4 01       	movw	r20, r8
    2722:	93 01       	movw	r18, r6
    2724:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2728:	7b 01       	movw	r14, r22
    272a:	8c 01       	movw	r16, r24
    272c:	c6 01       	movw	r24, r12
    272e:	b5 01       	movw	r22, r10
    2730:	a4 01       	movw	r20, r8
    2732:	93 01       	movw	r18, r6
    2734:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2738:	c9 01       	movw	r24, r18
    273a:	da 01       	movw	r26, r20
    273c:	25 96       	adiw	r28, 0x05	; 5
    273e:	8c af       	std	Y+60, r24	; 0x3c
    2740:	9d af       	std	Y+61, r25	; 0x3d
    2742:	ae af       	std	Y+62, r26	; 0x3e
    2744:	bf af       	std	Y+63, r27	; 0x3f
    2746:	25 97       	sbiw	r28, 0x05	; 5
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	21 96       	adiw	r28, 0x01	; 1
    274e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2750:	3d ad       	ldd	r19, Y+61	; 0x3d
    2752:	4e ad       	ldd	r20, Y+62	; 0x3e
    2754:	5f ad       	ldd	r21, Y+63	; 0x3f
    2756:	21 97       	sbiw	r28, 0x01	; 1
    2758:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	87 01       	movw	r16, r14
    2762:	ff 24       	eor	r15, r15
    2764:	ee 24       	eor	r14, r14
    2766:	a9 a4       	ldd	r10, Y+41	; 0x29
    2768:	ba a4       	ldd	r11, Y+42	; 0x2a
    276a:	cb a4       	ldd	r12, Y+43	; 0x2b
    276c:	dc a4       	ldd	r13, Y+44	; 0x2c
    276e:	c6 01       	movw	r24, r12
    2770:	aa 27       	eor	r26, r26
    2772:	bb 27       	eor	r27, r27
    2774:	5c 01       	movw	r10, r24
    2776:	6d 01       	movw	r12, r26
    2778:	ae 28       	or	r10, r14
    277a:	bf 28       	or	r11, r15
    277c:	c0 2a       	or	r12, r16
    277e:	d1 2a       	or	r13, r17
    2780:	a2 16       	cp	r10, r18
    2782:	b3 06       	cpc	r11, r19
    2784:	c4 06       	cpc	r12, r20
    2786:	d5 06       	cpc	r13, r21
    2788:	60 f5       	brcc	.+88     	; 0x27e2 <__udivdi3+0x530>
    278a:	25 96       	adiw	r28, 0x05	; 5
    278c:	6c ad       	ldd	r22, Y+60	; 0x3c
    278e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2790:	8e ad       	ldd	r24, Y+62	; 0x3e
    2792:	9f ad       	ldd	r25, Y+63	; 0x3f
    2794:	25 97       	sbiw	r28, 0x05	; 5
    2796:	61 50       	subi	r22, 0x01	; 1
    2798:	70 40       	sbci	r23, 0x00	; 0
    279a:	80 40       	sbci	r24, 0x00	; 0
    279c:	90 40       	sbci	r25, 0x00	; 0
    279e:	25 96       	adiw	r28, 0x05	; 5
    27a0:	6c af       	std	Y+60, r22	; 0x3c
    27a2:	7d af       	std	Y+61, r23	; 0x3d
    27a4:	8e af       	std	Y+62, r24	; 0x3e
    27a6:	9f af       	std	Y+63, r25	; 0x3f
    27a8:	25 97       	sbiw	r28, 0x05	; 5
    27aa:	a2 0c       	add	r10, r2
    27ac:	b3 1c       	adc	r11, r3
    27ae:	c4 1c       	adc	r12, r4
    27b0:	d5 1c       	adc	r13, r5
    27b2:	a2 14       	cp	r10, r2
    27b4:	b3 04       	cpc	r11, r3
    27b6:	c4 04       	cpc	r12, r4
    27b8:	d5 04       	cpc	r13, r5
    27ba:	98 f0       	brcs	.+38     	; 0x27e2 <__udivdi3+0x530>
    27bc:	a2 16       	cp	r10, r18
    27be:	b3 06       	cpc	r11, r19
    27c0:	c4 06       	cpc	r12, r20
    27c2:	d5 06       	cpc	r13, r21
    27c4:	70 f4       	brcc	.+28     	; 0x27e2 <__udivdi3+0x530>
    27c6:	61 50       	subi	r22, 0x01	; 1
    27c8:	70 40       	sbci	r23, 0x00	; 0
    27ca:	80 40       	sbci	r24, 0x00	; 0
    27cc:	90 40       	sbci	r25, 0x00	; 0
    27ce:	25 96       	adiw	r28, 0x05	; 5
    27d0:	6c af       	std	Y+60, r22	; 0x3c
    27d2:	7d af       	std	Y+61, r23	; 0x3d
    27d4:	8e af       	std	Y+62, r24	; 0x3e
    27d6:	9f af       	std	Y+63, r25	; 0x3f
    27d8:	25 97       	sbiw	r28, 0x05	; 5
    27da:	a2 0c       	add	r10, r2
    27dc:	b3 1c       	adc	r11, r3
    27de:	c4 1c       	adc	r12, r4
    27e0:	d5 1c       	adc	r13, r5
    27e2:	a2 1a       	sub	r10, r18
    27e4:	b3 0a       	sbc	r11, r19
    27e6:	c4 0a       	sbc	r12, r20
    27e8:	d5 0a       	sbc	r13, r21
    27ea:	c6 01       	movw	r24, r12
    27ec:	b5 01       	movw	r22, r10
    27ee:	a4 01       	movw	r20, r8
    27f0:	93 01       	movw	r18, r6
    27f2:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    27f6:	7b 01       	movw	r14, r22
    27f8:	8c 01       	movw	r16, r24
    27fa:	c6 01       	movw	r24, r12
    27fc:	b5 01       	movw	r22, r10
    27fe:	a4 01       	movw	r20, r8
    2800:	93 01       	movw	r18, r6
    2802:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2806:	c9 01       	movw	r24, r18
    2808:	da 01       	movw	r26, r20
    280a:	3c 01       	movw	r6, r24
    280c:	4d 01       	movw	r8, r26
    280e:	c4 01       	movw	r24, r8
    2810:	b3 01       	movw	r22, r6
    2812:	21 96       	adiw	r28, 0x01	; 1
    2814:	2c ad       	ldd	r18, Y+60	; 0x3c
    2816:	3d ad       	ldd	r19, Y+61	; 0x3d
    2818:	4e ad       	ldd	r20, Y+62	; 0x3e
    281a:	5f ad       	ldd	r21, Y+63	; 0x3f
    281c:	21 97       	sbiw	r28, 0x01	; 1
    281e:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2822:	9b 01       	movw	r18, r22
    2824:	ac 01       	movw	r20, r24
    2826:	87 01       	movw	r16, r14
    2828:	ff 24       	eor	r15, r15
    282a:	ee 24       	eor	r14, r14
    282c:	89 a5       	ldd	r24, Y+41	; 0x29
    282e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2830:	ab a5       	ldd	r26, Y+43	; 0x2b
    2832:	bc a5       	ldd	r27, Y+44	; 0x2c
    2834:	a0 70       	andi	r26, 0x00	; 0
    2836:	b0 70       	andi	r27, 0x00	; 0
    2838:	57 01       	movw	r10, r14
    283a:	68 01       	movw	r12, r16
    283c:	a8 2a       	or	r10, r24
    283e:	b9 2a       	or	r11, r25
    2840:	ca 2a       	or	r12, r26
    2842:	db 2a       	or	r13, r27
    2844:	a2 16       	cp	r10, r18
    2846:	b3 06       	cpc	r11, r19
    2848:	c4 06       	cpc	r12, r20
    284a:	d5 06       	cpc	r13, r21
    284c:	e0 f4       	brcc	.+56     	; 0x2886 <__udivdi3+0x5d4>
    284e:	08 94       	sec
    2850:	61 08       	sbc	r6, r1
    2852:	71 08       	sbc	r7, r1
    2854:	81 08       	sbc	r8, r1
    2856:	91 08       	sbc	r9, r1
    2858:	a2 0c       	add	r10, r2
    285a:	b3 1c       	adc	r11, r3
    285c:	c4 1c       	adc	r12, r4
    285e:	d5 1c       	adc	r13, r5
    2860:	a2 14       	cp	r10, r2
    2862:	b3 04       	cpc	r11, r3
    2864:	c4 04       	cpc	r12, r4
    2866:	d5 04       	cpc	r13, r5
    2868:	70 f0       	brcs	.+28     	; 0x2886 <__udivdi3+0x5d4>
    286a:	a2 16       	cp	r10, r18
    286c:	b3 06       	cpc	r11, r19
    286e:	c4 06       	cpc	r12, r20
    2870:	d5 06       	cpc	r13, r21
    2872:	48 f4       	brcc	.+18     	; 0x2886 <__udivdi3+0x5d4>
    2874:	08 94       	sec
    2876:	61 08       	sbc	r6, r1
    2878:	71 08       	sbc	r7, r1
    287a:	81 08       	sbc	r8, r1
    287c:	91 08       	sbc	r9, r1
    287e:	a2 0c       	add	r10, r2
    2880:	b3 1c       	adc	r11, r3
    2882:	c4 1c       	adc	r12, r4
    2884:	d5 1c       	adc	r13, r5
    2886:	8d a5       	ldd	r24, Y+45	; 0x2d
    2888:	9e a5       	ldd	r25, Y+46	; 0x2e
    288a:	af a5       	ldd	r26, Y+47	; 0x2f
    288c:	b8 a9       	ldd	r27, Y+48	; 0x30
    288e:	6f 96       	adiw	r28, 0x1f	; 31
    2890:	0f ac       	ldd	r0, Y+63	; 0x3f
    2892:	6f 97       	sbiw	r28, 0x1f	; 31
    2894:	04 c0       	rjmp	.+8      	; 0x289e <__udivdi3+0x5ec>
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	aa 1f       	adc	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	0a 94       	dec	r0
    28a0:	d2 f7       	brpl	.-12     	; 0x2896 <__udivdi3+0x5e4>
    28a2:	8d a7       	std	Y+45, r24	; 0x2d
    28a4:	9e a7       	std	Y+46, r25	; 0x2e
    28a6:	af a7       	std	Y+47, r26	; 0x2f
    28a8:	b8 ab       	std	Y+48, r27	; 0x30
    28aa:	a2 1a       	sub	r10, r18
    28ac:	b3 0a       	sbc	r11, r19
    28ae:	c4 0a       	sbc	r12, r20
    28b0:	d5 0a       	sbc	r13, r21
    28b2:	25 96       	adiw	r28, 0x05	; 5
    28b4:	ec ac       	ldd	r14, Y+60	; 0x3c
    28b6:	fd ac       	ldd	r15, Y+61	; 0x3d
    28b8:	0e ad       	ldd	r16, Y+62	; 0x3e
    28ba:	1f ad       	ldd	r17, Y+63	; 0x3f
    28bc:	25 97       	sbiw	r28, 0x05	; 5
    28be:	d7 01       	movw	r26, r14
    28c0:	99 27       	eor	r25, r25
    28c2:	88 27       	eor	r24, r24
    28c4:	68 2a       	or	r6, r24
    28c6:	79 2a       	or	r7, r25
    28c8:	8a 2a       	or	r8, r26
    28ca:	9b 2a       	or	r9, r27
    28cc:	82 01       	movw	r16, r4
    28ce:	22 27       	eor	r18, r18
    28d0:	33 27       	eor	r19, r19
    28d2:	29 96       	adiw	r28, 0x09	; 9
    28d4:	0c af       	std	Y+60, r16	; 0x3c
    28d6:	1d af       	std	Y+61, r17	; 0x3d
    28d8:	2e af       	std	Y+62, r18	; 0x3e
    28da:	3f af       	std	Y+63, r19	; 0x3f
    28dc:	29 97       	sbiw	r28, 0x09	; 9
    28de:	a2 01       	movw	r20, r4
    28e0:	91 01       	movw	r18, r2
    28e2:	40 70       	andi	r20, 0x00	; 0
    28e4:	50 70       	andi	r21, 0x00	; 0
    28e6:	2d 96       	adiw	r28, 0x0d	; 13
    28e8:	2c af       	std	Y+60, r18	; 0x3c
    28ea:	3d af       	std	Y+61, r19	; 0x3d
    28ec:	4e af       	std	Y+62, r20	; 0x3e
    28ee:	5f af       	std	Y+63, r21	; 0x3f
    28f0:	2d 97       	sbiw	r28, 0x0d	; 13
    28f2:	c6 01       	movw	r24, r12
    28f4:	b5 01       	movw	r22, r10
    28f6:	29 96       	adiw	r28, 0x09	; 9
    28f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    28fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    28fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    28fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2900:	29 97       	sbiw	r28, 0x09	; 9
    2902:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2906:	7b 01       	movw	r14, r22
    2908:	8c 01       	movw	r16, r24
    290a:	c6 01       	movw	r24, r12
    290c:	b5 01       	movw	r22, r10
    290e:	29 96       	adiw	r28, 0x09	; 9
    2910:	2c ad       	ldd	r18, Y+60	; 0x3c
    2912:	3d ad       	ldd	r19, Y+61	; 0x3d
    2914:	4e ad       	ldd	r20, Y+62	; 0x3e
    2916:	5f ad       	ldd	r21, Y+63	; 0x3f
    2918:	29 97       	sbiw	r28, 0x09	; 9
    291a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    291e:	c9 01       	movw	r24, r18
    2920:	da 01       	movw	r26, r20
    2922:	61 96       	adiw	r28, 0x11	; 17
    2924:	8c af       	std	Y+60, r24	; 0x3c
    2926:	9d af       	std	Y+61, r25	; 0x3d
    2928:	ae af       	std	Y+62, r26	; 0x3e
    292a:	bf af       	std	Y+63, r27	; 0x3f
    292c:	61 97       	sbiw	r28, 0x11	; 17
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	2d 96       	adiw	r28, 0x0d	; 13
    2934:	2c ad       	ldd	r18, Y+60	; 0x3c
    2936:	3d ad       	ldd	r19, Y+61	; 0x3d
    2938:	4e ad       	ldd	r20, Y+62	; 0x3e
    293a:	5f ad       	ldd	r21, Y+63	; 0x3f
    293c:	2d 97       	sbiw	r28, 0x0d	; 13
    293e:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2942:	9b 01       	movw	r18, r22
    2944:	ac 01       	movw	r20, r24
    2946:	87 01       	movw	r16, r14
    2948:	ff 24       	eor	r15, r15
    294a:	ee 24       	eor	r14, r14
    294c:	ad a4       	ldd	r10, Y+45	; 0x2d
    294e:	be a4       	ldd	r11, Y+46	; 0x2e
    2950:	cf a4       	ldd	r12, Y+47	; 0x2f
    2952:	d8 a8       	ldd	r13, Y+48	; 0x30
    2954:	c6 01       	movw	r24, r12
    2956:	aa 27       	eor	r26, r26
    2958:	bb 27       	eor	r27, r27
    295a:	57 01       	movw	r10, r14
    295c:	68 01       	movw	r12, r16
    295e:	a8 2a       	or	r10, r24
    2960:	b9 2a       	or	r11, r25
    2962:	ca 2a       	or	r12, r26
    2964:	db 2a       	or	r13, r27
    2966:	a2 16       	cp	r10, r18
    2968:	b3 06       	cpc	r11, r19
    296a:	c4 06       	cpc	r12, r20
    296c:	d5 06       	cpc	r13, r21
    296e:	60 f5       	brcc	.+88     	; 0x29c8 <__udivdi3+0x716>
    2970:	61 96       	adiw	r28, 0x11	; 17
    2972:	6c ad       	ldd	r22, Y+60	; 0x3c
    2974:	7d ad       	ldd	r23, Y+61	; 0x3d
    2976:	8e ad       	ldd	r24, Y+62	; 0x3e
    2978:	9f ad       	ldd	r25, Y+63	; 0x3f
    297a:	61 97       	sbiw	r28, 0x11	; 17
    297c:	61 50       	subi	r22, 0x01	; 1
    297e:	70 40       	sbci	r23, 0x00	; 0
    2980:	80 40       	sbci	r24, 0x00	; 0
    2982:	90 40       	sbci	r25, 0x00	; 0
    2984:	61 96       	adiw	r28, 0x11	; 17
    2986:	6c af       	std	Y+60, r22	; 0x3c
    2988:	7d af       	std	Y+61, r23	; 0x3d
    298a:	8e af       	std	Y+62, r24	; 0x3e
    298c:	9f af       	std	Y+63, r25	; 0x3f
    298e:	61 97       	sbiw	r28, 0x11	; 17
    2990:	a2 0c       	add	r10, r2
    2992:	b3 1c       	adc	r11, r3
    2994:	c4 1c       	adc	r12, r4
    2996:	d5 1c       	adc	r13, r5
    2998:	a2 14       	cp	r10, r2
    299a:	b3 04       	cpc	r11, r3
    299c:	c4 04       	cpc	r12, r4
    299e:	d5 04       	cpc	r13, r5
    29a0:	98 f0       	brcs	.+38     	; 0x29c8 <__udivdi3+0x716>
    29a2:	a2 16       	cp	r10, r18
    29a4:	b3 06       	cpc	r11, r19
    29a6:	c4 06       	cpc	r12, r20
    29a8:	d5 06       	cpc	r13, r21
    29aa:	70 f4       	brcc	.+28     	; 0x29c8 <__udivdi3+0x716>
    29ac:	61 50       	subi	r22, 0x01	; 1
    29ae:	70 40       	sbci	r23, 0x00	; 0
    29b0:	80 40       	sbci	r24, 0x00	; 0
    29b2:	90 40       	sbci	r25, 0x00	; 0
    29b4:	61 96       	adiw	r28, 0x11	; 17
    29b6:	6c af       	std	Y+60, r22	; 0x3c
    29b8:	7d af       	std	Y+61, r23	; 0x3d
    29ba:	8e af       	std	Y+62, r24	; 0x3e
    29bc:	9f af       	std	Y+63, r25	; 0x3f
    29be:	61 97       	sbiw	r28, 0x11	; 17
    29c0:	a2 0c       	add	r10, r2
    29c2:	b3 1c       	adc	r11, r3
    29c4:	c4 1c       	adc	r12, r4
    29c6:	d5 1c       	adc	r13, r5
    29c8:	a2 1a       	sub	r10, r18
    29ca:	b3 0a       	sbc	r11, r19
    29cc:	c4 0a       	sbc	r12, r20
    29ce:	d5 0a       	sbc	r13, r21
    29d0:	c6 01       	movw	r24, r12
    29d2:	b5 01       	movw	r22, r10
    29d4:	29 96       	adiw	r28, 0x09	; 9
    29d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    29d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    29da:	4e ad       	ldd	r20, Y+62	; 0x3e
    29dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    29de:	29 97       	sbiw	r28, 0x09	; 9
    29e0:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    29e4:	7b 01       	movw	r14, r22
    29e6:	8c 01       	movw	r16, r24
    29e8:	c6 01       	movw	r24, r12
    29ea:	b5 01       	movw	r22, r10
    29ec:	29 96       	adiw	r28, 0x09	; 9
    29ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    29f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    29f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    29f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    29f6:	29 97       	sbiw	r28, 0x09	; 9
    29f8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    29fc:	c9 01       	movw	r24, r18
    29fe:	da 01       	movw	r26, r20
    2a00:	5c 01       	movw	r10, r24
    2a02:	6d 01       	movw	r12, r26
    2a04:	c6 01       	movw	r24, r12
    2a06:	b5 01       	movw	r22, r10
    2a08:	2d 96       	adiw	r28, 0x0d	; 13
    2a0a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a0c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2a0e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a10:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a12:	2d 97       	sbiw	r28, 0x0d	; 13
    2a14:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2a18:	9b 01       	movw	r18, r22
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	87 01       	movw	r16, r14
    2a1e:	ff 24       	eor	r15, r15
    2a20:	ee 24       	eor	r14, r14
    2a22:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a24:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a26:	af a5       	ldd	r26, Y+47	; 0x2f
    2a28:	b8 a9       	ldd	r27, Y+48	; 0x30
    2a2a:	a0 70       	andi	r26, 0x00	; 0
    2a2c:	b0 70       	andi	r27, 0x00	; 0
    2a2e:	e8 2a       	or	r14, r24
    2a30:	f9 2a       	or	r15, r25
    2a32:	0a 2b       	or	r16, r26
    2a34:	1b 2b       	or	r17, r27
    2a36:	e2 16       	cp	r14, r18
    2a38:	f3 06       	cpc	r15, r19
    2a3a:	04 07       	cpc	r16, r20
    2a3c:	15 07       	cpc	r17, r21
    2a3e:	c0 f4       	brcc	.+48     	; 0x2a70 <__udivdi3+0x7be>
    2a40:	08 94       	sec
    2a42:	a1 08       	sbc	r10, r1
    2a44:	b1 08       	sbc	r11, r1
    2a46:	c1 08       	sbc	r12, r1
    2a48:	d1 08       	sbc	r13, r1
    2a4a:	e2 0c       	add	r14, r2
    2a4c:	f3 1c       	adc	r15, r3
    2a4e:	04 1d       	adc	r16, r4
    2a50:	15 1d       	adc	r17, r5
    2a52:	e2 14       	cp	r14, r2
    2a54:	f3 04       	cpc	r15, r3
    2a56:	04 05       	cpc	r16, r4
    2a58:	15 05       	cpc	r17, r5
    2a5a:	50 f0       	brcs	.+20     	; 0x2a70 <__udivdi3+0x7be>
    2a5c:	e2 16       	cp	r14, r18
    2a5e:	f3 06       	cpc	r15, r19
    2a60:	04 07       	cpc	r16, r20
    2a62:	15 07       	cpc	r17, r21
    2a64:	28 f4       	brcc	.+10     	; 0x2a70 <__udivdi3+0x7be>
    2a66:	08 94       	sec
    2a68:	a1 08       	sbc	r10, r1
    2a6a:	b1 08       	sbc	r11, r1
    2a6c:	c1 08       	sbc	r12, r1
    2a6e:	d1 08       	sbc	r13, r1
    2a70:	61 96       	adiw	r28, 0x11	; 17
    2a72:	ec ac       	ldd	r14, Y+60	; 0x3c
    2a74:	fd ac       	ldd	r15, Y+61	; 0x3d
    2a76:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a78:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a7a:	61 97       	sbiw	r28, 0x11	; 17
    2a7c:	d7 01       	movw	r26, r14
    2a7e:	99 27       	eor	r25, r25
    2a80:	88 27       	eor	r24, r24
    2a82:	96 01       	movw	r18, r12
    2a84:	85 01       	movw	r16, r10
    2a86:	08 2b       	or	r16, r24
    2a88:	19 2b       	or	r17, r25
    2a8a:	2a 2b       	or	r18, r26
    2a8c:	3b 2b       	or	r19, r27
    2a8e:	09 ab       	std	Y+49, r16	; 0x31
    2a90:	1a ab       	std	Y+50, r17	; 0x32
    2a92:	2b ab       	std	Y+51, r18	; 0x33
    2a94:	3c ab       	std	Y+52, r19	; 0x34
    2a96:	62 c2       	rjmp	.+1220   	; 0x2f5c <__udivdi3+0xcaa>
    2a98:	6e 14       	cp	r6, r14
    2a9a:	7f 04       	cpc	r7, r15
    2a9c:	80 06       	cpc	r8, r16
    2a9e:	91 06       	cpc	r9, r17
    2aa0:	08 f4       	brcc	.+2      	; 0x2aa4 <__udivdi3+0x7f2>
    2aa2:	51 c2       	rjmp	.+1186   	; 0x2f46 <__udivdi3+0xc94>
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	e2 16       	cp	r14, r18
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	f2 06       	cpc	r15, r18
    2aac:	21 e0       	ldi	r18, 0x01	; 1
    2aae:	02 07       	cpc	r16, r18
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	12 07       	cpc	r17, r18
    2ab4:	88 f4       	brcc	.+34     	; 0x2ad8 <__udivdi3+0x826>
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	e3 16       	cp	r14, r19
    2aba:	f1 04       	cpc	r15, r1
    2abc:	01 05       	cpc	r16, r1
    2abe:	11 05       	cpc	r17, r1
    2ac0:	31 f0       	breq	.+12     	; 0x2ace <__udivdi3+0x81c>
    2ac2:	28 f0       	brcs	.+10     	; 0x2ace <__udivdi3+0x81c>
    2ac4:	48 e0       	ldi	r20, 0x08	; 8
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	17 c0       	rjmp	.+46     	; 0x2afc <__udivdi3+0x84a>
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	12 c0       	rjmp	.+36     	; 0x2afc <__udivdi3+0x84a>
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	e4 16       	cp	r14, r20
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	f4 06       	cpc	r15, r20
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	04 07       	cpc	r16, r20
    2ae4:	41 e0       	ldi	r20, 0x01	; 1
    2ae6:	14 07       	cpc	r17, r20
    2ae8:	28 f0       	brcs	.+10     	; 0x2af4 <__udivdi3+0x842>
    2aea:	48 e1       	ldi	r20, 0x18	; 24
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	04 c0       	rjmp	.+8      	; 0x2afc <__udivdi3+0x84a>
    2af4:	40 e1       	ldi	r20, 0x10	; 16
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	d8 01       	movw	r26, r16
    2afe:	c7 01       	movw	r24, r14
    2b00:	04 2e       	mov	r0, r20
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <__udivdi3+0x85a>
    2b04:	b6 95       	lsr	r27
    2b06:	a7 95       	ror	r26
    2b08:	97 95       	ror	r25
    2b0a:	87 95       	ror	r24
    2b0c:	0a 94       	dec	r0
    2b0e:	d2 f7       	brpl	.-12     	; 0x2b04 <__udivdi3+0x852>
    2b10:	83 59       	subi	r24, 0x93	; 147
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	dc 01       	movw	r26, r24
    2b16:	2c 91       	ld	r18, X
    2b18:	30 e2       	ldi	r19, 0x20	; 32
    2b1a:	a3 2e       	mov	r10, r19
    2b1c:	b1 2c       	mov	r11, r1
    2b1e:	c1 2c       	mov	r12, r1
    2b20:	d1 2c       	mov	r13, r1
    2b22:	d6 01       	movw	r26, r12
    2b24:	c5 01       	movw	r24, r10
    2b26:	84 1b       	sub	r24, r20
    2b28:	95 0b       	sbc	r25, r21
    2b2a:	a6 0b       	sbc	r26, r22
    2b2c:	b7 0b       	sbc	r27, r23
    2b2e:	82 1b       	sub	r24, r18
    2b30:	91 09       	sbc	r25, r1
    2b32:	a1 09       	sbc	r26, r1
    2b34:	b1 09       	sbc	r27, r1
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	a1 05       	cpc	r26, r1
    2b3a:	b1 05       	cpc	r27, r1
    2b3c:	89 f4       	brne	.+34     	; 0x2b60 <__udivdi3+0x8ae>
    2b3e:	e6 14       	cp	r14, r6
    2b40:	f7 04       	cpc	r15, r7
    2b42:	08 05       	cpc	r16, r8
    2b44:	19 05       	cpc	r17, r9
    2b46:	08 f4       	brcc	.+2      	; 0x2b4a <__udivdi3+0x898>
    2b48:	f2 c1       	rjmp	.+996    	; 0x2f2e <__udivdi3+0xc7c>
    2b4a:	6d a4       	ldd	r6, Y+45	; 0x2d
    2b4c:	7e a4       	ldd	r7, Y+46	; 0x2e
    2b4e:	8f a4       	ldd	r8, Y+47	; 0x2f
    2b50:	98 a8       	ldd	r9, Y+48	; 0x30
    2b52:	62 14       	cp	r6, r2
    2b54:	73 04       	cpc	r7, r3
    2b56:	84 04       	cpc	r8, r4
    2b58:	95 04       	cpc	r9, r5
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <__udivdi3+0x8ac>
    2b5c:	e8 c1       	rjmp	.+976    	; 0x2f2e <__udivdi3+0xc7c>
    2b5e:	f3 c1       	rjmp	.+998    	; 0x2f46 <__udivdi3+0xc94>
    2b60:	6e 96       	adiw	r28, 0x1e	; 30
    2b62:	8f af       	std	Y+63, r24	; 0x3f
    2b64:	6e 97       	sbiw	r28, 0x1e	; 30
    2b66:	08 2e       	mov	r0, r24
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <__udivdi3+0x8c0>
    2b6a:	ee 0c       	add	r14, r14
    2b6c:	ff 1c       	adc	r15, r15
    2b6e:	00 1f       	adc	r16, r16
    2b70:	11 1f       	adc	r17, r17
    2b72:	0a 94       	dec	r0
    2b74:	d2 f7       	brpl	.-12     	; 0x2b6a <__udivdi3+0x8b8>
    2b76:	6a 2d       	mov	r22, r10
    2b78:	68 1b       	sub	r22, r24
    2b7a:	d2 01       	movw	r26, r4
    2b7c:	c1 01       	movw	r24, r2
    2b7e:	06 2e       	mov	r0, r22
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <__udivdi3+0x8d8>
    2b82:	b6 95       	lsr	r27
    2b84:	a7 95       	ror	r26
    2b86:	97 95       	ror	r25
    2b88:	87 95       	ror	r24
    2b8a:	0a 94       	dec	r0
    2b8c:	d2 f7       	brpl	.-12     	; 0x2b82 <__udivdi3+0x8d0>
    2b8e:	5c 01       	movw	r10, r24
    2b90:	6d 01       	movw	r12, r26
    2b92:	ae 28       	or	r10, r14
    2b94:	bf 28       	or	r11, r15
    2b96:	c0 2a       	or	r12, r16
    2b98:	d1 2a       	or	r13, r17
    2b9a:	ad a2       	std	Y+37, r10	; 0x25
    2b9c:	be a2       	std	Y+38, r11	; 0x26
    2b9e:	cf a2       	std	Y+39, r12	; 0x27
    2ba0:	d8 a6       	std	Y+40, r13	; 0x28
    2ba2:	72 01       	movw	r14, r4
    2ba4:	61 01       	movw	r12, r2
    2ba6:	6e 96       	adiw	r28, 0x1e	; 30
    2ba8:	0f ac       	ldd	r0, Y+63	; 0x3f
    2baa:	6e 97       	sbiw	r28, 0x1e	; 30
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <__udivdi3+0x904>
    2bae:	cc 0c       	add	r12, r12
    2bb0:	dd 1c       	adc	r13, r13
    2bb2:	ee 1c       	adc	r14, r14
    2bb4:	ff 1c       	adc	r15, r15
    2bb6:	0a 94       	dec	r0
    2bb8:	d2 f7       	brpl	.-12     	; 0x2bae <__udivdi3+0x8fc>
    2bba:	c9 a2       	std	Y+33, r12	; 0x21
    2bbc:	da a2       	std	Y+34, r13	; 0x22
    2bbe:	eb a2       	std	Y+35, r14	; 0x23
    2bc0:	fc a2       	std	Y+36, r15	; 0x24
    2bc2:	64 01       	movw	r12, r8
    2bc4:	53 01       	movw	r10, r6
    2bc6:	06 2e       	mov	r0, r22
    2bc8:	04 c0       	rjmp	.+8      	; 0x2bd2 <__udivdi3+0x920>
    2bca:	d6 94       	lsr	r13
    2bcc:	c7 94       	ror	r12
    2bce:	b7 94       	ror	r11
    2bd0:	a7 94       	ror	r10
    2bd2:	0a 94       	dec	r0
    2bd4:	d2 f7       	brpl	.-12     	; 0x2bca <__udivdi3+0x918>
    2bd6:	d4 01       	movw	r26, r8
    2bd8:	c3 01       	movw	r24, r6
    2bda:	6e 96       	adiw	r28, 0x1e	; 30
    2bdc:	0f ac       	ldd	r0, Y+63	; 0x3f
    2bde:	6e 97       	sbiw	r28, 0x1e	; 30
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <__udivdi3+0x938>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	aa 1f       	adc	r26, r26
    2be8:	bb 1f       	adc	r27, r27
    2bea:	0a 94       	dec	r0
    2bec:	d2 f7       	brpl	.-12     	; 0x2be2 <__udivdi3+0x930>
    2bee:	ed a4       	ldd	r14, Y+45	; 0x2d
    2bf0:	fe a4       	ldd	r15, Y+46	; 0x2e
    2bf2:	0f a5       	ldd	r16, Y+47	; 0x2f
    2bf4:	18 a9       	ldd	r17, Y+48	; 0x30
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <__udivdi3+0x94e>
    2bf8:	16 95       	lsr	r17
    2bfa:	07 95       	ror	r16
    2bfc:	f7 94       	ror	r15
    2bfe:	e7 94       	ror	r14
    2c00:	6a 95       	dec	r22
    2c02:	d2 f7       	brpl	.-12     	; 0x2bf8 <__udivdi3+0x946>
    2c04:	37 01       	movw	r6, r14
    2c06:	48 01       	movw	r8, r16
    2c08:	68 2a       	or	r6, r24
    2c0a:	79 2a       	or	r7, r25
    2c0c:	8a 2a       	or	r8, r26
    2c0e:	9b 2a       	or	r9, r27
    2c10:	6d 8e       	std	Y+29, r6	; 0x1d
    2c12:	7e 8e       	std	Y+30, r7	; 0x1e
    2c14:	8f 8e       	std	Y+31, r8	; 0x1f
    2c16:	98 a2       	std	Y+32, r9	; 0x20
    2c18:	ed a0       	ldd	r14, Y+37	; 0x25
    2c1a:	fe a0       	ldd	r15, Y+38	; 0x26
    2c1c:	0f a1       	ldd	r16, Y+39	; 0x27
    2c1e:	18 a5       	ldd	r17, Y+40	; 0x28
    2c20:	38 01       	movw	r6, r16
    2c22:	88 24       	eor	r8, r8
    2c24:	99 24       	eor	r9, r9
    2c26:	98 01       	movw	r18, r16
    2c28:	87 01       	movw	r16, r14
    2c2a:	20 70       	andi	r18, 0x00	; 0
    2c2c:	30 70       	andi	r19, 0x00	; 0
    2c2e:	65 96       	adiw	r28, 0x15	; 21
    2c30:	0c af       	std	Y+60, r16	; 0x3c
    2c32:	1d af       	std	Y+61, r17	; 0x3d
    2c34:	2e af       	std	Y+62, r18	; 0x3e
    2c36:	3f af       	std	Y+63, r19	; 0x3f
    2c38:	65 97       	sbiw	r28, 0x15	; 21
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	b5 01       	movw	r22, r10
    2c3e:	a4 01       	movw	r20, r8
    2c40:	93 01       	movw	r18, r6
    2c42:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2c46:	7b 01       	movw	r14, r22
    2c48:	8c 01       	movw	r16, r24
    2c4a:	c6 01       	movw	r24, r12
    2c4c:	b5 01       	movw	r22, r10
    2c4e:	a4 01       	movw	r20, r8
    2c50:	93 01       	movw	r18, r6
    2c52:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2c56:	c9 01       	movw	r24, r18
    2c58:	da 01       	movw	r26, r20
    2c5a:	1c 01       	movw	r2, r24
    2c5c:	2d 01       	movw	r4, r26
    2c5e:	c2 01       	movw	r24, r4
    2c60:	b1 01       	movw	r22, r2
    2c62:	65 96       	adiw	r28, 0x15	; 21
    2c64:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c66:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c68:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c6a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c6c:	65 97       	sbiw	r28, 0x15	; 21
    2c6e:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2c72:	9b 01       	movw	r18, r22
    2c74:	ac 01       	movw	r20, r24
    2c76:	87 01       	movw	r16, r14
    2c78:	ff 24       	eor	r15, r15
    2c7a:	ee 24       	eor	r14, r14
    2c7c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    2c7e:	be 8c       	ldd	r11, Y+30	; 0x1e
    2c80:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2c82:	d8 a0       	ldd	r13, Y+32	; 0x20
    2c84:	c6 01       	movw	r24, r12
    2c86:	aa 27       	eor	r26, r26
    2c88:	bb 27       	eor	r27, r27
    2c8a:	57 01       	movw	r10, r14
    2c8c:	68 01       	movw	r12, r16
    2c8e:	a8 2a       	or	r10, r24
    2c90:	b9 2a       	or	r11, r25
    2c92:	ca 2a       	or	r12, r26
    2c94:	db 2a       	or	r13, r27
    2c96:	a2 16       	cp	r10, r18
    2c98:	b3 06       	cpc	r11, r19
    2c9a:	c4 06       	cpc	r12, r20
    2c9c:	d5 06       	cpc	r13, r21
    2c9e:	00 f5       	brcc	.+64     	; 0x2ce0 <__udivdi3+0xa2e>
    2ca0:	08 94       	sec
    2ca2:	21 08       	sbc	r2, r1
    2ca4:	31 08       	sbc	r3, r1
    2ca6:	41 08       	sbc	r4, r1
    2ca8:	51 08       	sbc	r5, r1
    2caa:	ed a0       	ldd	r14, Y+37	; 0x25
    2cac:	fe a0       	ldd	r15, Y+38	; 0x26
    2cae:	0f a1       	ldd	r16, Y+39	; 0x27
    2cb0:	18 a5       	ldd	r17, Y+40	; 0x28
    2cb2:	ae 0c       	add	r10, r14
    2cb4:	bf 1c       	adc	r11, r15
    2cb6:	c0 1e       	adc	r12, r16
    2cb8:	d1 1e       	adc	r13, r17
    2cba:	ae 14       	cp	r10, r14
    2cbc:	bf 04       	cpc	r11, r15
    2cbe:	c0 06       	cpc	r12, r16
    2cc0:	d1 06       	cpc	r13, r17
    2cc2:	70 f0       	brcs	.+28     	; 0x2ce0 <__udivdi3+0xa2e>
    2cc4:	a2 16       	cp	r10, r18
    2cc6:	b3 06       	cpc	r11, r19
    2cc8:	c4 06       	cpc	r12, r20
    2cca:	d5 06       	cpc	r13, r21
    2ccc:	48 f4       	brcc	.+18     	; 0x2ce0 <__udivdi3+0xa2e>
    2cce:	08 94       	sec
    2cd0:	21 08       	sbc	r2, r1
    2cd2:	31 08       	sbc	r3, r1
    2cd4:	41 08       	sbc	r4, r1
    2cd6:	51 08       	sbc	r5, r1
    2cd8:	ae 0c       	add	r10, r14
    2cda:	bf 1c       	adc	r11, r15
    2cdc:	c0 1e       	adc	r12, r16
    2cde:	d1 1e       	adc	r13, r17
    2ce0:	a2 1a       	sub	r10, r18
    2ce2:	b3 0a       	sbc	r11, r19
    2ce4:	c4 0a       	sbc	r12, r20
    2ce6:	d5 0a       	sbc	r13, r21
    2ce8:	c6 01       	movw	r24, r12
    2cea:	b5 01       	movw	r22, r10
    2cec:	a4 01       	movw	r20, r8
    2cee:	93 01       	movw	r18, r6
    2cf0:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2cf4:	7b 01       	movw	r14, r22
    2cf6:	8c 01       	movw	r16, r24
    2cf8:	c6 01       	movw	r24, r12
    2cfa:	b5 01       	movw	r22, r10
    2cfc:	a4 01       	movw	r20, r8
    2cfe:	93 01       	movw	r18, r6
    2d00:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    2d04:	c9 01       	movw	r24, r18
    2d06:	da 01       	movw	r26, r20
    2d08:	3c 01       	movw	r6, r24
    2d0a:	4d 01       	movw	r8, r26
    2d0c:	c4 01       	movw	r24, r8
    2d0e:	b3 01       	movw	r22, r6
    2d10:	65 96       	adiw	r28, 0x15	; 21
    2d12:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d14:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d16:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d18:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d1a:	65 97       	sbiw	r28, 0x15	; 21
    2d1c:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	87 01       	movw	r16, r14
    2d26:	ff 24       	eor	r15, r15
    2d28:	ee 24       	eor	r14, r14
    2d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d30:	b8 a1       	ldd	r27, Y+32	; 0x20
    2d32:	a0 70       	andi	r26, 0x00	; 0
    2d34:	b0 70       	andi	r27, 0x00	; 0
    2d36:	57 01       	movw	r10, r14
    2d38:	68 01       	movw	r12, r16
    2d3a:	a8 2a       	or	r10, r24
    2d3c:	b9 2a       	or	r11, r25
    2d3e:	ca 2a       	or	r12, r26
    2d40:	db 2a       	or	r13, r27
    2d42:	a2 16       	cp	r10, r18
    2d44:	b3 06       	cpc	r11, r19
    2d46:	c4 06       	cpc	r12, r20
    2d48:	d5 06       	cpc	r13, r21
    2d4a:	00 f5       	brcc	.+64     	; 0x2d8c <__udivdi3+0xada>
    2d4c:	08 94       	sec
    2d4e:	61 08       	sbc	r6, r1
    2d50:	71 08       	sbc	r7, r1
    2d52:	81 08       	sbc	r8, r1
    2d54:	91 08       	sbc	r9, r1
    2d56:	6d a1       	ldd	r22, Y+37	; 0x25
    2d58:	7e a1       	ldd	r23, Y+38	; 0x26
    2d5a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d5c:	98 a5       	ldd	r25, Y+40	; 0x28
    2d5e:	a6 0e       	add	r10, r22
    2d60:	b7 1e       	adc	r11, r23
    2d62:	c8 1e       	adc	r12, r24
    2d64:	d9 1e       	adc	r13, r25
    2d66:	a6 16       	cp	r10, r22
    2d68:	b7 06       	cpc	r11, r23
    2d6a:	c8 06       	cpc	r12, r24
    2d6c:	d9 06       	cpc	r13, r25
    2d6e:	70 f0       	brcs	.+28     	; 0x2d8c <__udivdi3+0xada>
    2d70:	a2 16       	cp	r10, r18
    2d72:	b3 06       	cpc	r11, r19
    2d74:	c4 06       	cpc	r12, r20
    2d76:	d5 06       	cpc	r13, r21
    2d78:	48 f4       	brcc	.+18     	; 0x2d8c <__udivdi3+0xada>
    2d7a:	08 94       	sec
    2d7c:	61 08       	sbc	r6, r1
    2d7e:	71 08       	sbc	r7, r1
    2d80:	81 08       	sbc	r8, r1
    2d82:	91 08       	sbc	r9, r1
    2d84:	a6 0e       	add	r10, r22
    2d86:	b7 1e       	adc	r11, r23
    2d88:	c8 1e       	adc	r12, r24
    2d8a:	d9 1e       	adc	r13, r25
    2d8c:	d6 01       	movw	r26, r12
    2d8e:	c5 01       	movw	r24, r10
    2d90:	82 1b       	sub	r24, r18
    2d92:	93 0b       	sbc	r25, r19
    2d94:	a4 0b       	sbc	r26, r20
    2d96:	b5 0b       	sbc	r27, r21
    2d98:	89 8f       	std	Y+25, r24	; 0x19
    2d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d9e:	bc 8f       	std	Y+28, r27	; 0x1c
    2da0:	d1 01       	movw	r26, r2
    2da2:	99 27       	eor	r25, r25
    2da4:	88 27       	eor	r24, r24
    2da6:	64 01       	movw	r12, r8
    2da8:	53 01       	movw	r10, r6
    2daa:	a8 2a       	or	r10, r24
    2dac:	b9 2a       	or	r11, r25
    2dae:	ca 2a       	or	r12, r26
    2db0:	db 2a       	or	r13, r27
    2db2:	a9 aa       	std	Y+49, r10	; 0x31
    2db4:	ba aa       	std	Y+50, r11	; 0x32
    2db6:	cb aa       	std	Y+51, r12	; 0x33
    2db8:	dc aa       	std	Y+52, r13	; 0x34
    2dba:	86 01       	movw	r16, r12
    2dbc:	75 01       	movw	r14, r10
    2dbe:	2f ef       	ldi	r18, 0xFF	; 255
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	e2 22       	and	r14, r18
    2dc8:	f3 22       	and	r15, r19
    2dca:	04 23       	and	r16, r20
    2dcc:	15 23       	and	r17, r21
    2dce:	a6 01       	movw	r20, r12
    2dd0:	66 27       	eor	r22, r22
    2dd2:	77 27       	eor	r23, r23
    2dd4:	6d 96       	adiw	r28, 0x1d	; 29
    2dd6:	4c af       	std	Y+60, r20	; 0x3c
    2dd8:	5d af       	std	Y+61, r21	; 0x3d
    2dda:	6e af       	std	Y+62, r22	; 0x3e
    2ddc:	7f af       	std	Y+63, r23	; 0x3f
    2dde:	6d 97       	sbiw	r28, 0x1d	; 29
    2de0:	a9 a0       	ldd	r10, Y+33	; 0x21
    2de2:	ba a0       	ldd	r11, Y+34	; 0x22
    2de4:	cb a0       	ldd	r12, Y+35	; 0x23
    2de6:	dc a0       	ldd	r13, Y+36	; 0x24
    2de8:	6f ef       	ldi	r22, 0xFF	; 255
    2dea:	7f ef       	ldi	r23, 0xFF	; 255
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a6 22       	and	r10, r22
    2df2:	b7 22       	and	r11, r23
    2df4:	c8 22       	and	r12, r24
    2df6:	d9 22       	and	r13, r25
    2df8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfc:	ab a1       	ldd	r26, Y+35	; 0x23
    2dfe:	bc a1       	ldd	r27, Y+36	; 0x24
    2e00:	1d 01       	movw	r2, r26
    2e02:	44 24       	eor	r4, r4
    2e04:	55 24       	eor	r5, r5
    2e06:	c8 01       	movw	r24, r16
    2e08:	b7 01       	movw	r22, r14
    2e0a:	a6 01       	movw	r20, r12
    2e0c:	95 01       	movw	r18, r10
    2e0e:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2e12:	69 96       	adiw	r28, 0x19	; 25
    2e14:	6c af       	std	Y+60, r22	; 0x3c
    2e16:	7d af       	std	Y+61, r23	; 0x3d
    2e18:	8e af       	std	Y+62, r24	; 0x3e
    2e1a:	9f af       	std	Y+63, r25	; 0x3f
    2e1c:	69 97       	sbiw	r28, 0x19	; 25
    2e1e:	c8 01       	movw	r24, r16
    2e20:	b7 01       	movw	r22, r14
    2e22:	a2 01       	movw	r20, r4
    2e24:	91 01       	movw	r18, r2
    2e26:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2e2a:	3b 01       	movw	r6, r22
    2e2c:	4c 01       	movw	r8, r24
    2e2e:	6d 96       	adiw	r28, 0x1d	; 29
    2e30:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e32:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e34:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e36:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e38:	6d 97       	sbiw	r28, 0x1d	; 29
    2e3a:	a6 01       	movw	r20, r12
    2e3c:	95 01       	movw	r18, r10
    2e3e:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2e42:	7b 01       	movw	r14, r22
    2e44:	8c 01       	movw	r16, r24
    2e46:	6d 96       	adiw	r28, 0x1d	; 29
    2e48:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e4a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e50:	6d 97       	sbiw	r28, 0x1d	; 29
    2e52:	a2 01       	movw	r20, r4
    2e54:	91 01       	movw	r18, r2
    2e56:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    2e5a:	5b 01       	movw	r10, r22
    2e5c:	6c 01       	movw	r12, r24
    2e5e:	a8 01       	movw	r20, r16
    2e60:	97 01       	movw	r18, r14
    2e62:	26 0d       	add	r18, r6
    2e64:	37 1d       	adc	r19, r7
    2e66:	48 1d       	adc	r20, r8
    2e68:	59 1d       	adc	r21, r9
    2e6a:	69 96       	adiw	r28, 0x19	; 25
    2e6c:	6c ac       	ldd	r6, Y+60	; 0x3c
    2e6e:	7d ac       	ldd	r7, Y+61	; 0x3d
    2e70:	8e ac       	ldd	r8, Y+62	; 0x3e
    2e72:	9f ac       	ldd	r9, Y+63	; 0x3f
    2e74:	69 97       	sbiw	r28, 0x19	; 25
    2e76:	c4 01       	movw	r24, r8
    2e78:	aa 27       	eor	r26, r26
    2e7a:	bb 27       	eor	r27, r27
    2e7c:	28 0f       	add	r18, r24
    2e7e:	39 1f       	adc	r19, r25
    2e80:	4a 1f       	adc	r20, r26
    2e82:	5b 1f       	adc	r21, r27
    2e84:	2e 15       	cp	r18, r14
    2e86:	3f 05       	cpc	r19, r15
    2e88:	40 07       	cpc	r20, r16
    2e8a:	51 07       	cpc	r21, r17
    2e8c:	48 f4       	brcc	.+18     	; 0x2ea0 <__udivdi3+0xbee>
    2e8e:	e1 2c       	mov	r14, r1
    2e90:	f1 2c       	mov	r15, r1
    2e92:	61 e0       	ldi	r22, 0x01	; 1
    2e94:	06 2f       	mov	r16, r22
    2e96:	11 2d       	mov	r17, r1
    2e98:	ae 0c       	add	r10, r14
    2e9a:	bf 1c       	adc	r11, r15
    2e9c:	c0 1e       	adc	r12, r16
    2e9e:	d1 1e       	adc	r13, r17
    2ea0:	ca 01       	movw	r24, r20
    2ea2:	aa 27       	eor	r26, r26
    2ea4:	bb 27       	eor	r27, r27
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	6a 0d       	add	r22, r10
    2eac:	7b 1d       	adc	r23, r11
    2eae:	8c 1d       	adc	r24, r12
    2eb0:	9d 1d       	adc	r25, r13
    2eb2:	69 8c       	ldd	r6, Y+25	; 0x19
    2eb4:	7a 8c       	ldd	r7, Y+26	; 0x1a
    2eb6:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2eb8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    2eba:	66 16       	cp	r6, r22
    2ebc:	77 06       	cpc	r7, r23
    2ebe:	88 06       	cpc	r8, r24
    2ec0:	99 06       	cpc	r9, r25
    2ec2:	40 f1       	brcs	.+80     	; 0x2f14 <__udivdi3+0xc62>
    2ec4:	66 15       	cp	r22, r6
    2ec6:	77 05       	cpc	r23, r7
    2ec8:	88 05       	cpc	r24, r8
    2eca:	99 05       	cpc	r25, r9
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <__udivdi3+0xc1e>
    2ece:	43 c0       	rjmp	.+134    	; 0x2f56 <__udivdi3+0xca4>
    2ed0:	d9 01       	movw	r26, r18
    2ed2:	99 27       	eor	r25, r25
    2ed4:	88 27       	eor	r24, r24
    2ed6:	69 96       	adiw	r28, 0x19	; 25
    2ed8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2eda:	3d ad       	ldd	r19, Y+61	; 0x3d
    2edc:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ede:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ee0:	69 97       	sbiw	r28, 0x19	; 25
    2ee2:	40 70       	andi	r20, 0x00	; 0
    2ee4:	50 70       	andi	r21, 0x00	; 0
    2ee6:	82 0f       	add	r24, r18
    2ee8:	93 1f       	adc	r25, r19
    2eea:	a4 1f       	adc	r26, r20
    2eec:	b5 1f       	adc	r27, r21
    2eee:	2d a5       	ldd	r18, Y+45	; 0x2d
    2ef0:	3e a5       	ldd	r19, Y+46	; 0x2e
    2ef2:	4f a5       	ldd	r20, Y+47	; 0x2f
    2ef4:	58 a9       	ldd	r21, Y+48	; 0x30
    2ef6:	6e 96       	adiw	r28, 0x1e	; 30
    2ef8:	0f ac       	ldd	r0, Y+63	; 0x3f
    2efa:	6e 97       	sbiw	r28, 0x1e	; 30
    2efc:	04 c0       	rjmp	.+8      	; 0x2f06 <__udivdi3+0xc54>
    2efe:	22 0f       	add	r18, r18
    2f00:	33 1f       	adc	r19, r19
    2f02:	44 1f       	adc	r20, r20
    2f04:	55 1f       	adc	r21, r21
    2f06:	0a 94       	dec	r0
    2f08:	d2 f7       	brpl	.-12     	; 0x2efe <__udivdi3+0xc4c>
    2f0a:	28 17       	cp	r18, r24
    2f0c:	39 07       	cpc	r19, r25
    2f0e:	4a 07       	cpc	r20, r26
    2f10:	5b 07       	cpc	r21, r27
    2f12:	08 f5       	brcc	.+66     	; 0x2f56 <__udivdi3+0xca4>
    2f14:	09 a9       	ldd	r16, Y+49	; 0x31
    2f16:	1a a9       	ldd	r17, Y+50	; 0x32
    2f18:	2b a9       	ldd	r18, Y+51	; 0x33
    2f1a:	3c a9       	ldd	r19, Y+52	; 0x34
    2f1c:	01 50       	subi	r16, 0x01	; 1
    2f1e:	10 40       	sbci	r17, 0x00	; 0
    2f20:	20 40       	sbci	r18, 0x00	; 0
    2f22:	30 40       	sbci	r19, 0x00	; 0
    2f24:	09 ab       	std	Y+49, r16	; 0x31
    2f26:	1a ab       	std	Y+50, r17	; 0x32
    2f28:	2b ab       	std	Y+51, r18	; 0x33
    2f2a:	3c ab       	std	Y+52, r19	; 0x34
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <__udivdi3+0xca4>
    2f2e:	66 24       	eor	r6, r6
    2f30:	77 24       	eor	r7, r7
    2f32:	43 01       	movw	r8, r6
    2f34:	21 e0       	ldi	r18, 0x01	; 1
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	29 ab       	std	Y+49, r18	; 0x31
    2f3e:	3a ab       	std	Y+50, r19	; 0x32
    2f40:	4b ab       	std	Y+51, r20	; 0x33
    2f42:	5c ab       	std	Y+52, r21	; 0x34
    2f44:	0b c0       	rjmp	.+22     	; 0x2f5c <__udivdi3+0xcaa>
    2f46:	66 24       	eor	r6, r6
    2f48:	77 24       	eor	r7, r7
    2f4a:	43 01       	movw	r8, r6
    2f4c:	19 aa       	std	Y+49, r1	; 0x31
    2f4e:	1a aa       	std	Y+50, r1	; 0x32
    2f50:	1b aa       	std	Y+51, r1	; 0x33
    2f52:	1c aa       	std	Y+52, r1	; 0x34
    2f54:	03 c0       	rjmp	.+6      	; 0x2f5c <__udivdi3+0xcaa>
    2f56:	66 24       	eor	r6, r6
    2f58:	77 24       	eor	r7, r7
    2f5a:	43 01       	movw	r8, r6
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	71 96       	adiw	r30, 0x11	; 17
    2f60:	88 e0       	ldi	r24, 0x08	; 8
    2f62:	df 01       	movw	r26, r30
    2f64:	1d 92       	st	X+, r1
    2f66:	8a 95       	dec	r24
    2f68:	e9 f7       	brne	.-6      	; 0x2f64 <__udivdi3+0xcb2>
    2f6a:	a9 a8       	ldd	r10, Y+49	; 0x31
    2f6c:	ba a8       	ldd	r11, Y+50	; 0x32
    2f6e:	cb a8       	ldd	r12, Y+51	; 0x33
    2f70:	dc a8       	ldd	r13, Y+52	; 0x34
    2f72:	a9 8a       	std	Y+17, r10	; 0x11
    2f74:	ba 8a       	std	Y+18, r11	; 0x12
    2f76:	cb 8a       	std	Y+19, r12	; 0x13
    2f78:	dc 8a       	std	Y+20, r13	; 0x14
    2f7a:	6d 8a       	std	Y+21, r6	; 0x15
    2f7c:	7e 8a       	std	Y+22, r7	; 0x16
    2f7e:	8f 8a       	std	Y+23, r8	; 0x17
    2f80:	98 8e       	std	Y+24, r9	; 0x18
    2f82:	29 a9       	ldd	r18, Y+49	; 0x31
    2f84:	3a 89       	ldd	r19, Y+18	; 0x12
    2f86:	4b 89       	ldd	r20, Y+19	; 0x13
    2f88:	5c 89       	ldd	r21, Y+20	; 0x14
    2f8a:	66 2d       	mov	r22, r6
    2f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	c2 5a       	subi	r28, 0xA2	; 162
    2f94:	df 4f       	sbci	r29, 0xFF	; 255
    2f96:	e2 e1       	ldi	r30, 0x12	; 18
    2f98:	0c 94 0b 3e 	jmp	0x7c16	; 0x7c16 <__epilogue_restores__>

00002f9c <__umoddi3>:
    2f9c:	ab e5       	ldi	r26, 0x5B	; 91
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e4 ed       	ldi	r30, 0xD4	; 212
    2fa2:	f7 e1       	ldi	r31, 0x17	; 23
    2fa4:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__prologue_saves__>
    2fa8:	a8 e0       	ldi	r26, 0x08	; 8
    2faa:	4e 01       	movw	r8, r28
    2fac:	08 94       	sec
    2fae:	81 1c       	adc	r8, r1
    2fb0:	91 1c       	adc	r9, r1
    2fb2:	f4 01       	movw	r30, r8
    2fb4:	6a 2e       	mov	r6, r26
    2fb6:	11 92       	st	Z+, r1
    2fb8:	6a 94       	dec	r6
    2fba:	e9 f7       	brne	.-6      	; 0x2fb6 <__umoddi3+0x1a>
    2fbc:	29 83       	std	Y+1, r18	; 0x01
    2fbe:	3a 83       	std	Y+2, r19	; 0x02
    2fc0:	4b 83       	std	Y+3, r20	; 0x03
    2fc2:	5c 83       	std	Y+4, r21	; 0x04
    2fc4:	6d 83       	std	Y+5, r22	; 0x05
    2fc6:	7e 83       	std	Y+6, r23	; 0x06
    2fc8:	8f 83       	std	Y+7, r24	; 0x07
    2fca:	98 87       	std	Y+8, r25	; 0x08
    2fcc:	ce 01       	movw	r24, r28
    2fce:	09 96       	adiw	r24, 0x09	; 9
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	11 92       	st	Z+, r1
    2fd4:	aa 95       	dec	r26
    2fd6:	e9 f7       	brne	.-6      	; 0x2fd2 <__umoddi3+0x36>
    2fd8:	a9 86       	std	Y+9, r10	; 0x09
    2fda:	ba 86       	std	Y+10, r11	; 0x0a
    2fdc:	cb 86       	std	Y+11, r12	; 0x0b
    2fde:	dc 86       	std	Y+12, r13	; 0x0c
    2fe0:	ed 86       	std	Y+13, r14	; 0x0d
    2fe2:	fe 86       	std	Y+14, r15	; 0x0e
    2fe4:	0f 87       	std	Y+15, r16	; 0x0f
    2fe6:	18 8b       	std	Y+16, r17	; 0x10
    2fe8:	29 84       	ldd	r2, Y+9	; 0x09
    2fea:	3a 84       	ldd	r3, Y+10	; 0x0a
    2fec:	4b 84       	ldd	r4, Y+11	; 0x0b
    2fee:	5c 84       	ldd	r5, Y+12	; 0x0c
    2ff0:	ad 84       	ldd	r10, Y+13	; 0x0d
    2ff2:	be 84       	ldd	r11, Y+14	; 0x0e
    2ff4:	cf 84       	ldd	r12, Y+15	; 0x0f
    2ff6:	d8 88       	ldd	r13, Y+16	; 0x10
    2ff8:	29 81       	ldd	r18, Y+1	; 0x01
    2ffa:	3a 81       	ldd	r19, Y+2	; 0x02
    2ffc:	4b 81       	ldd	r20, Y+3	; 0x03
    2ffe:	5c 81       	ldd	r21, Y+4	; 0x04
    3000:	69 96       	adiw	r28, 0x19	; 25
    3002:	2f af       	std	Y+63, r18	; 0x3f
    3004:	69 97       	sbiw	r28, 0x19	; 25
    3006:	6a 96       	adiw	r28, 0x1a	; 26
    3008:	3f af       	std	Y+63, r19	; 0x3f
    300a:	6a 97       	sbiw	r28, 0x1a	; 26
    300c:	6b 96       	adiw	r28, 0x1b	; 27
    300e:	4f af       	std	Y+63, r20	; 0x3f
    3010:	6b 97       	sbiw	r28, 0x1b	; 27
    3012:	6c 96       	adiw	r28, 0x1c	; 28
    3014:	5f af       	std	Y+63, r21	; 0x3f
    3016:	6c 97       	sbiw	r28, 0x1c	; 28
    3018:	6c 96       	adiw	r28, 0x1c	; 28
    301a:	6c ac       	ldd	r6, Y+60	; 0x3c
    301c:	7d ac       	ldd	r7, Y+61	; 0x3d
    301e:	8e ac       	ldd	r8, Y+62	; 0x3e
    3020:	9f ac       	ldd	r9, Y+63	; 0x3f
    3022:	6c 97       	sbiw	r28, 0x1c	; 28
    3024:	69 aa       	std	Y+49, r6	; 0x31
    3026:	7a aa       	std	Y+50, r7	; 0x32
    3028:	8b aa       	std	Y+51, r8	; 0x33
    302a:	9c aa       	std	Y+52, r9	; 0x34
    302c:	6d 81       	ldd	r22, Y+5	; 0x05
    302e:	7e 81       	ldd	r23, Y+6	; 0x06
    3030:	8f 81       	ldd	r24, Y+7	; 0x07
    3032:	98 85       	ldd	r25, Y+8	; 0x08
    3034:	3b 01       	movw	r6, r22
    3036:	4c 01       	movw	r8, r24
    3038:	6d aa       	std	Y+53, r6	; 0x35
    303a:	7e aa       	std	Y+54, r7	; 0x36
    303c:	8f aa       	std	Y+55, r8	; 0x37
    303e:	98 ae       	std	Y+56, r9	; 0x38
    3040:	a1 14       	cp	r10, r1
    3042:	b1 04       	cpc	r11, r1
    3044:	c1 04       	cpc	r12, r1
    3046:	d1 04       	cpc	r13, r1
    3048:	09 f0       	breq	.+2      	; 0x304c <__umoddi3+0xb0>
    304a:	04 c3       	rjmp	.+1544   	; 0x3654 <__umoddi3+0x6b8>
    304c:	62 14       	cp	r6, r2
    304e:	73 04       	cpc	r7, r3
    3050:	84 04       	cpc	r8, r4
    3052:	95 04       	cpc	r9, r5
    3054:	08 f0       	brcs	.+2      	; 0x3058 <__umoddi3+0xbc>
    3056:	00 c1       	rjmp	.+512    	; 0x3258 <__umoddi3+0x2bc>
    3058:	00 e0       	ldi	r16, 0x00	; 0
    305a:	20 16       	cp	r2, r16
    305c:	00 e0       	ldi	r16, 0x00	; 0
    305e:	30 06       	cpc	r3, r16
    3060:	01 e0       	ldi	r16, 0x01	; 1
    3062:	40 06       	cpc	r4, r16
    3064:	00 e0       	ldi	r16, 0x00	; 0
    3066:	50 06       	cpc	r5, r16
    3068:	88 f4       	brcc	.+34     	; 0x308c <__umoddi3+0xf0>
    306a:	1f ef       	ldi	r17, 0xFF	; 255
    306c:	21 16       	cp	r2, r17
    306e:	31 04       	cpc	r3, r1
    3070:	41 04       	cpc	r4, r1
    3072:	51 04       	cpc	r5, r1
    3074:	39 f0       	breq	.+14     	; 0x3084 <__umoddi3+0xe8>
    3076:	30 f0       	brcs	.+12     	; 0x3084 <__umoddi3+0xe8>
    3078:	88 e0       	ldi	r24, 0x08	; 8
    307a:	e8 2e       	mov	r14, r24
    307c:	f1 2c       	mov	r15, r1
    307e:	01 2d       	mov	r16, r1
    3080:	11 2d       	mov	r17, r1
    3082:	18 c0       	rjmp	.+48     	; 0x30b4 <__umoddi3+0x118>
    3084:	ee 24       	eor	r14, r14
    3086:	ff 24       	eor	r15, r15
    3088:	87 01       	movw	r16, r14
    308a:	14 c0       	rjmp	.+40     	; 0x30b4 <__umoddi3+0x118>
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	24 16       	cp	r2, r20
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	34 06       	cpc	r3, r20
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	44 06       	cpc	r4, r20
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	54 06       	cpc	r5, r20
    309c:	30 f0       	brcs	.+12     	; 0x30aa <__umoddi3+0x10e>
    309e:	b8 e1       	ldi	r27, 0x18	; 24
    30a0:	eb 2e       	mov	r14, r27
    30a2:	f1 2c       	mov	r15, r1
    30a4:	01 2d       	mov	r16, r1
    30a6:	11 2d       	mov	r17, r1
    30a8:	05 c0       	rjmp	.+10     	; 0x30b4 <__umoddi3+0x118>
    30aa:	a0 e1       	ldi	r26, 0x10	; 16
    30ac:	ea 2e       	mov	r14, r26
    30ae:	f1 2c       	mov	r15, r1
    30b0:	01 2d       	mov	r16, r1
    30b2:	11 2d       	mov	r17, r1
    30b4:	d2 01       	movw	r26, r4
    30b6:	c1 01       	movw	r24, r2
    30b8:	0e 2c       	mov	r0, r14
    30ba:	04 c0       	rjmp	.+8      	; 0x30c4 <__umoddi3+0x128>
    30bc:	b6 95       	lsr	r27
    30be:	a7 95       	ror	r26
    30c0:	97 95       	ror	r25
    30c2:	87 95       	ror	r24
    30c4:	0a 94       	dec	r0
    30c6:	d2 f7       	brpl	.-12     	; 0x30bc <__umoddi3+0x120>
    30c8:	83 59       	subi	r24, 0x93	; 147
    30ca:	9f 4f       	sbci	r25, 0xFF	; 255
    30cc:	dc 01       	movw	r26, r24
    30ce:	2c 91       	ld	r18, X
    30d0:	80 e2       	ldi	r24, 0x20	; 32
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e0       	ldi	r26, 0x00	; 0
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	8e 19       	sub	r24, r14
    30da:	9f 09       	sbc	r25, r15
    30dc:	a0 0b       	sbc	r26, r16
    30de:	b1 0b       	sbc	r27, r17
    30e0:	5c 01       	movw	r10, r24
    30e2:	6d 01       	movw	r12, r26
    30e4:	a2 1a       	sub	r10, r18
    30e6:	b1 08       	sbc	r11, r1
    30e8:	c1 08       	sbc	r12, r1
    30ea:	d1 08       	sbc	r13, r1
    30ec:	a9 ae       	std	Y+57, r10	; 0x39
    30ee:	ba ae       	std	Y+58, r11	; 0x3a
    30f0:	cb ae       	std	Y+59, r12	; 0x3b
    30f2:	dc ae       	std	Y+60, r13	; 0x3c
    30f4:	a1 14       	cp	r10, r1
    30f6:	b1 04       	cpc	r11, r1
    30f8:	c1 04       	cpc	r12, r1
    30fa:	d1 04       	cpc	r13, r1
    30fc:	09 f4       	brne	.+2      	; 0x3100 <__umoddi3+0x164>
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <__umoddi3+0x1e2>
    3100:	69 ad       	ldd	r22, Y+57	; 0x39
    3102:	06 2e       	mov	r0, r22
    3104:	04 c0       	rjmp	.+8      	; 0x310e <__umoddi3+0x172>
    3106:	22 0c       	add	r2, r2
    3108:	33 1c       	adc	r3, r3
    310a:	44 1c       	adc	r4, r4
    310c:	55 1c       	adc	r5, r5
    310e:	0a 94       	dec	r0
    3110:	d2 f7       	brpl	.-12     	; 0x3106 <__umoddi3+0x16a>
    3112:	a4 01       	movw	r20, r8
    3114:	93 01       	movw	r18, r6
    3116:	06 2e       	mov	r0, r22
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <__umoddi3+0x186>
    311a:	22 0f       	add	r18, r18
    311c:	33 1f       	adc	r19, r19
    311e:	44 1f       	adc	r20, r20
    3120:	55 1f       	adc	r21, r21
    3122:	0a 94       	dec	r0
    3124:	d2 f7       	brpl	.-12     	; 0x311a <__umoddi3+0x17e>
    3126:	80 e2       	ldi	r24, 0x20	; 32
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	8a 19       	sub	r24, r10
    312c:	9b 09       	sbc	r25, r11
    312e:	6c 96       	adiw	r28, 0x1c	; 28
    3130:	cc ac       	ldd	r12, Y+60	; 0x3c
    3132:	dd ac       	ldd	r13, Y+61	; 0x3d
    3134:	ee ac       	ldd	r14, Y+62	; 0x3e
    3136:	ff ac       	ldd	r15, Y+63	; 0x3f
    3138:	6c 97       	sbiw	r28, 0x1c	; 28
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <__umoddi3+0x1a8>
    313c:	f6 94       	lsr	r15
    313e:	e7 94       	ror	r14
    3140:	d7 94       	ror	r13
    3142:	c7 94       	ror	r12
    3144:	8a 95       	dec	r24
    3146:	d2 f7       	brpl	.-12     	; 0x313c <__umoddi3+0x1a0>
    3148:	87 01       	movw	r16, r14
    314a:	76 01       	movw	r14, r12
    314c:	e2 2a       	or	r14, r18
    314e:	f3 2a       	or	r15, r19
    3150:	04 2b       	or	r16, r20
    3152:	15 2b       	or	r17, r21
    3154:	ed aa       	std	Y+53, r14	; 0x35
    3156:	fe aa       	std	Y+54, r15	; 0x36
    3158:	0f ab       	std	Y+55, r16	; 0x37
    315a:	18 af       	std	Y+56, r17	; 0x38
    315c:	6c 96       	adiw	r28, 0x1c	; 28
    315e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3160:	9d ad       	ldd	r25, Y+61	; 0x3d
    3162:	ae ad       	ldd	r26, Y+62	; 0x3e
    3164:	bf ad       	ldd	r27, Y+63	; 0x3f
    3166:	6c 97       	sbiw	r28, 0x1c	; 28
    3168:	04 c0       	rjmp	.+8      	; 0x3172 <__umoddi3+0x1d6>
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	aa 1f       	adc	r26, r26
    3170:	bb 1f       	adc	r27, r27
    3172:	6a 95       	dec	r22
    3174:	d2 f7       	brpl	.-12     	; 0x316a <__umoddi3+0x1ce>
    3176:	89 ab       	std	Y+49, r24	; 0x31
    3178:	9a ab       	std	Y+50, r25	; 0x32
    317a:	ab ab       	std	Y+51, r26	; 0x33
    317c:	bc ab       	std	Y+52, r27	; 0x34
    317e:	32 01       	movw	r6, r4
    3180:	88 24       	eor	r8, r8
    3182:	99 24       	eor	r9, r9
    3184:	b2 01       	movw	r22, r4
    3186:	a1 01       	movw	r20, r2
    3188:	60 70       	andi	r22, 0x00	; 0
    318a:	70 70       	andi	r23, 0x00	; 0
    318c:	21 96       	adiw	r28, 0x01	; 1
    318e:	4c af       	std	Y+60, r20	; 0x3c
    3190:	5d af       	std	Y+61, r21	; 0x3d
    3192:	6e af       	std	Y+62, r22	; 0x3e
    3194:	7f af       	std	Y+63, r23	; 0x3f
    3196:	21 97       	sbiw	r28, 0x01	; 1
    3198:	6d a9       	ldd	r22, Y+53	; 0x35
    319a:	7e a9       	ldd	r23, Y+54	; 0x36
    319c:	8f a9       	ldd	r24, Y+55	; 0x37
    319e:	98 ad       	ldd	r25, Y+56	; 0x38
    31a0:	a4 01       	movw	r20, r8
    31a2:	93 01       	movw	r18, r6
    31a4:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    31a8:	7b 01       	movw	r14, r22
    31aa:	8c 01       	movw	r16, r24
    31ac:	6d a9       	ldd	r22, Y+53	; 0x35
    31ae:	7e a9       	ldd	r23, Y+54	; 0x36
    31b0:	8f a9       	ldd	r24, Y+55	; 0x37
    31b2:	98 ad       	ldd	r25, Y+56	; 0x38
    31b4:	a4 01       	movw	r20, r8
    31b6:	93 01       	movw	r18, r6
    31b8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    31bc:	ca 01       	movw	r24, r20
    31be:	b9 01       	movw	r22, r18
    31c0:	21 96       	adiw	r28, 0x01	; 1
    31c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    31c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    31c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    31c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    31ca:	21 97       	sbiw	r28, 0x01	; 1
    31cc:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    31d0:	9b 01       	movw	r18, r22
    31d2:	ac 01       	movw	r20, r24
    31d4:	87 01       	movw	r16, r14
    31d6:	ff 24       	eor	r15, r15
    31d8:	ee 24       	eor	r14, r14
    31da:	a9 a8       	ldd	r10, Y+49	; 0x31
    31dc:	ba a8       	ldd	r11, Y+50	; 0x32
    31de:	cb a8       	ldd	r12, Y+51	; 0x33
    31e0:	dc a8       	ldd	r13, Y+52	; 0x34
    31e2:	c6 01       	movw	r24, r12
    31e4:	aa 27       	eor	r26, r26
    31e6:	bb 27       	eor	r27, r27
    31e8:	57 01       	movw	r10, r14
    31ea:	68 01       	movw	r12, r16
    31ec:	a8 2a       	or	r10, r24
    31ee:	b9 2a       	or	r11, r25
    31f0:	ca 2a       	or	r12, r26
    31f2:	db 2a       	or	r13, r27
    31f4:	a2 16       	cp	r10, r18
    31f6:	b3 06       	cpc	r11, r19
    31f8:	c4 06       	cpc	r12, r20
    31fa:	d5 06       	cpc	r13, r21
    31fc:	90 f4       	brcc	.+36     	; 0x3222 <__umoddi3+0x286>
    31fe:	a2 0c       	add	r10, r2
    3200:	b3 1c       	adc	r11, r3
    3202:	c4 1c       	adc	r12, r4
    3204:	d5 1c       	adc	r13, r5
    3206:	a2 14       	cp	r10, r2
    3208:	b3 04       	cpc	r11, r3
    320a:	c4 04       	cpc	r12, r4
    320c:	d5 04       	cpc	r13, r5
    320e:	48 f0       	brcs	.+18     	; 0x3222 <__umoddi3+0x286>
    3210:	a2 16       	cp	r10, r18
    3212:	b3 06       	cpc	r11, r19
    3214:	c4 06       	cpc	r12, r20
    3216:	d5 06       	cpc	r13, r21
    3218:	20 f4       	brcc	.+8      	; 0x3222 <__umoddi3+0x286>
    321a:	a2 0c       	add	r10, r2
    321c:	b3 1c       	adc	r11, r3
    321e:	c4 1c       	adc	r12, r4
    3220:	d5 1c       	adc	r13, r5
    3222:	a2 1a       	sub	r10, r18
    3224:	b3 0a       	sbc	r11, r19
    3226:	c4 0a       	sbc	r12, r20
    3228:	d5 0a       	sbc	r13, r21
    322a:	c6 01       	movw	r24, r12
    322c:	b5 01       	movw	r22, r10
    322e:	a4 01       	movw	r20, r8
    3230:	93 01       	movw	r18, r6
    3232:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3236:	7b 01       	movw	r14, r22
    3238:	8c 01       	movw	r16, r24
    323a:	c6 01       	movw	r24, r12
    323c:	b5 01       	movw	r22, r10
    323e:	a4 01       	movw	r20, r8
    3240:	93 01       	movw	r18, r6
    3242:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3246:	ca 01       	movw	r24, r20
    3248:	b9 01       	movw	r22, r18
    324a:	21 96       	adiw	r28, 0x01	; 1
    324c:	2c ad       	ldd	r18, Y+60	; 0x3c
    324e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3250:	4e ad       	ldd	r20, Y+62	; 0x3e
    3252:	5f ad       	ldd	r21, Y+63	; 0x3f
    3254:	21 97       	sbiw	r28, 0x01	; 1
    3256:	ba c1       	rjmp	.+884    	; 0x35cc <__umoddi3+0x630>
    3258:	21 14       	cp	r2, r1
    325a:	31 04       	cpc	r3, r1
    325c:	41 04       	cpc	r4, r1
    325e:	51 04       	cpc	r5, r1
    3260:	71 f4       	brne	.+28     	; 0x327e <__umoddi3+0x2e2>
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3276:	c9 01       	movw	r24, r18
    3278:	da 01       	movw	r26, r20
    327a:	1c 01       	movw	r2, r24
    327c:	2d 01       	movw	r4, r26
    327e:	00 e0       	ldi	r16, 0x00	; 0
    3280:	20 16       	cp	r2, r16
    3282:	00 e0       	ldi	r16, 0x00	; 0
    3284:	30 06       	cpc	r3, r16
    3286:	01 e0       	ldi	r16, 0x01	; 1
    3288:	40 06       	cpc	r4, r16
    328a:	00 e0       	ldi	r16, 0x00	; 0
    328c:	50 06       	cpc	r5, r16
    328e:	88 f4       	brcc	.+34     	; 0x32b2 <__umoddi3+0x316>
    3290:	1f ef       	ldi	r17, 0xFF	; 255
    3292:	21 16       	cp	r2, r17
    3294:	31 04       	cpc	r3, r1
    3296:	41 04       	cpc	r4, r1
    3298:	51 04       	cpc	r5, r1
    329a:	39 f0       	breq	.+14     	; 0x32aa <__umoddi3+0x30e>
    329c:	30 f0       	brcs	.+12     	; 0x32aa <__umoddi3+0x30e>
    329e:	68 e0       	ldi	r22, 0x08	; 8
    32a0:	e6 2e       	mov	r14, r22
    32a2:	f1 2c       	mov	r15, r1
    32a4:	01 2d       	mov	r16, r1
    32a6:	11 2d       	mov	r17, r1
    32a8:	18 c0       	rjmp	.+48     	; 0x32da <__umoddi3+0x33e>
    32aa:	ee 24       	eor	r14, r14
    32ac:	ff 24       	eor	r15, r15
    32ae:	87 01       	movw	r16, r14
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <__umoddi3+0x33e>
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	24 16       	cp	r2, r20
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	34 06       	cpc	r3, r20
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	44 06       	cpc	r4, r20
    32be:	41 e0       	ldi	r20, 0x01	; 1
    32c0:	54 06       	cpc	r5, r20
    32c2:	30 f0       	brcs	.+12     	; 0x32d0 <__umoddi3+0x334>
    32c4:	58 e1       	ldi	r21, 0x18	; 24
    32c6:	e5 2e       	mov	r14, r21
    32c8:	f1 2c       	mov	r15, r1
    32ca:	01 2d       	mov	r16, r1
    32cc:	11 2d       	mov	r17, r1
    32ce:	05 c0       	rjmp	.+10     	; 0x32da <__umoddi3+0x33e>
    32d0:	40 e1       	ldi	r20, 0x10	; 16
    32d2:	e4 2e       	mov	r14, r20
    32d4:	f1 2c       	mov	r15, r1
    32d6:	01 2d       	mov	r16, r1
    32d8:	11 2d       	mov	r17, r1
    32da:	d2 01       	movw	r26, r4
    32dc:	c1 01       	movw	r24, r2
    32de:	0e 2c       	mov	r0, r14
    32e0:	04 c0       	rjmp	.+8      	; 0x32ea <__umoddi3+0x34e>
    32e2:	b6 95       	lsr	r27
    32e4:	a7 95       	ror	r26
    32e6:	97 95       	ror	r25
    32e8:	87 95       	ror	r24
    32ea:	0a 94       	dec	r0
    32ec:	d2 f7       	brpl	.-12     	; 0x32e2 <__umoddi3+0x346>
    32ee:	83 59       	subi	r24, 0x93	; 147
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	dc 01       	movw	r26, r24
    32f4:	2c 91       	ld	r18, X
    32f6:	30 e2       	ldi	r19, 0x20	; 32
    32f8:	a3 2e       	mov	r10, r19
    32fa:	b1 2c       	mov	r11, r1
    32fc:	c1 2c       	mov	r12, r1
    32fe:	d1 2c       	mov	r13, r1
    3300:	d6 01       	movw	r26, r12
    3302:	c5 01       	movw	r24, r10
    3304:	8e 19       	sub	r24, r14
    3306:	9f 09       	sbc	r25, r15
    3308:	a0 0b       	sbc	r26, r16
    330a:	b1 0b       	sbc	r27, r17
    330c:	7c 01       	movw	r14, r24
    330e:	8d 01       	movw	r16, r26
    3310:	e2 1a       	sub	r14, r18
    3312:	f1 08       	sbc	r15, r1
    3314:	01 09       	sbc	r16, r1
    3316:	11 09       	sbc	r17, r1
    3318:	e9 ae       	std	Y+57, r14	; 0x39
    331a:	fa ae       	std	Y+58, r15	; 0x3a
    331c:	0b af       	std	Y+59, r16	; 0x3b
    331e:	1c af       	std	Y+60, r17	; 0x3c
    3320:	e1 14       	cp	r14, r1
    3322:	f1 04       	cpc	r15, r1
    3324:	01 05       	cpc	r16, r1
    3326:	11 05       	cpc	r17, r1
    3328:	39 f4       	brne	.+14     	; 0x3338 <__umoddi3+0x39c>
    332a:	64 01       	movw	r12, r8
    332c:	53 01       	movw	r10, r6
    332e:	a2 18       	sub	r10, r2
    3330:	b3 08       	sbc	r11, r3
    3332:	c4 08       	sbc	r12, r4
    3334:	d5 08       	sbc	r13, r5
    3336:	e2 c0       	rjmp	.+452    	; 0x34fc <__umoddi3+0x560>
    3338:	f9 ac       	ldd	r15, Y+57	; 0x39
    333a:	68 96       	adiw	r28, 0x18	; 24
    333c:	ff ae       	std	Y+63, r15	; 0x3f
    333e:	68 97       	sbiw	r28, 0x18	; 24
    3340:	0f 2c       	mov	r0, r15
    3342:	04 c0       	rjmp	.+8      	; 0x334c <__umoddi3+0x3b0>
    3344:	22 0c       	add	r2, r2
    3346:	33 1c       	adc	r3, r3
    3348:	44 1c       	adc	r4, r4
    334a:	55 1c       	adc	r5, r5
    334c:	0a 94       	dec	r0
    334e:	d2 f7       	brpl	.-12     	; 0x3344 <__umoddi3+0x3a8>
    3350:	8a 2d       	mov	r24, r10
    3352:	8f 19       	sub	r24, r15
    3354:	64 01       	movw	r12, r8
    3356:	53 01       	movw	r10, r6
    3358:	08 2e       	mov	r0, r24
    335a:	04 c0       	rjmp	.+8      	; 0x3364 <__umoddi3+0x3c8>
    335c:	d6 94       	lsr	r13
    335e:	c7 94       	ror	r12
    3360:	b7 94       	ror	r11
    3362:	a7 94       	ror	r10
    3364:	0a 94       	dec	r0
    3366:	d2 f7       	brpl	.-12     	; 0x335c <__umoddi3+0x3c0>
    3368:	a4 01       	movw	r20, r8
    336a:	93 01       	movw	r18, r6
    336c:	04 c0       	rjmp	.+8      	; 0x3376 <__umoddi3+0x3da>
    336e:	22 0f       	add	r18, r18
    3370:	33 1f       	adc	r19, r19
    3372:	44 1f       	adc	r20, r20
    3374:	55 1f       	adc	r21, r21
    3376:	fa 94       	dec	r15
    3378:	d2 f7       	brpl	.-12     	; 0x336e <__umoddi3+0x3d2>
    337a:	6c 96       	adiw	r28, 0x1c	; 28
    337c:	6c ac       	ldd	r6, Y+60	; 0x3c
    337e:	7d ac       	ldd	r7, Y+61	; 0x3d
    3380:	8e ac       	ldd	r8, Y+62	; 0x3e
    3382:	9f ac       	ldd	r9, Y+63	; 0x3f
    3384:	6c 97       	sbiw	r28, 0x1c	; 28
    3386:	04 c0       	rjmp	.+8      	; 0x3390 <__umoddi3+0x3f4>
    3388:	96 94       	lsr	r9
    338a:	87 94       	ror	r8
    338c:	77 94       	ror	r7
    338e:	67 94       	ror	r6
    3390:	8a 95       	dec	r24
    3392:	d2 f7       	brpl	.-12     	; 0x3388 <__umoddi3+0x3ec>
    3394:	84 01       	movw	r16, r8
    3396:	73 01       	movw	r14, r6
    3398:	e2 2a       	or	r14, r18
    339a:	f3 2a       	or	r15, r19
    339c:	04 2b       	or	r16, r20
    339e:	15 2b       	or	r17, r21
    33a0:	ed a6       	std	Y+45, r14	; 0x2d
    33a2:	fe a6       	std	Y+46, r15	; 0x2e
    33a4:	0f a7       	std	Y+47, r16	; 0x2f
    33a6:	18 ab       	std	Y+48, r17	; 0x30
    33a8:	32 01       	movw	r6, r4
    33aa:	88 24       	eor	r8, r8
    33ac:	99 24       	eor	r9, r9
    33ae:	b2 01       	movw	r22, r4
    33b0:	a1 01       	movw	r20, r2
    33b2:	60 70       	andi	r22, 0x00	; 0
    33b4:	70 70       	andi	r23, 0x00	; 0
    33b6:	25 96       	adiw	r28, 0x05	; 5
    33b8:	4c af       	std	Y+60, r20	; 0x3c
    33ba:	5d af       	std	Y+61, r21	; 0x3d
    33bc:	6e af       	std	Y+62, r22	; 0x3e
    33be:	7f af       	std	Y+63, r23	; 0x3f
    33c0:	25 97       	sbiw	r28, 0x05	; 5
    33c2:	c6 01       	movw	r24, r12
    33c4:	b5 01       	movw	r22, r10
    33c6:	a4 01       	movw	r20, r8
    33c8:	93 01       	movw	r18, r6
    33ca:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    33ce:	7b 01       	movw	r14, r22
    33d0:	8c 01       	movw	r16, r24
    33d2:	c6 01       	movw	r24, r12
    33d4:	b5 01       	movw	r22, r10
    33d6:	a4 01       	movw	r20, r8
    33d8:	93 01       	movw	r18, r6
    33da:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    33de:	ca 01       	movw	r24, r20
    33e0:	b9 01       	movw	r22, r18
    33e2:	25 96       	adiw	r28, 0x05	; 5
    33e4:	2c ad       	ldd	r18, Y+60	; 0x3c
    33e6:	3d ad       	ldd	r19, Y+61	; 0x3d
    33e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    33ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    33ec:	25 97       	sbiw	r28, 0x05	; 5
    33ee:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    33f2:	9b 01       	movw	r18, r22
    33f4:	ac 01       	movw	r20, r24
    33f6:	87 01       	movw	r16, r14
    33f8:	ff 24       	eor	r15, r15
    33fa:	ee 24       	eor	r14, r14
    33fc:	ad a4       	ldd	r10, Y+45	; 0x2d
    33fe:	be a4       	ldd	r11, Y+46	; 0x2e
    3400:	cf a4       	ldd	r12, Y+47	; 0x2f
    3402:	d8 a8       	ldd	r13, Y+48	; 0x30
    3404:	c6 01       	movw	r24, r12
    3406:	aa 27       	eor	r26, r26
    3408:	bb 27       	eor	r27, r27
    340a:	5c 01       	movw	r10, r24
    340c:	6d 01       	movw	r12, r26
    340e:	ae 28       	or	r10, r14
    3410:	bf 28       	or	r11, r15
    3412:	c0 2a       	or	r12, r16
    3414:	d1 2a       	or	r13, r17
    3416:	a2 16       	cp	r10, r18
    3418:	b3 06       	cpc	r11, r19
    341a:	c4 06       	cpc	r12, r20
    341c:	d5 06       	cpc	r13, r21
    341e:	90 f4       	brcc	.+36     	; 0x3444 <__umoddi3+0x4a8>
    3420:	a2 0c       	add	r10, r2
    3422:	b3 1c       	adc	r11, r3
    3424:	c4 1c       	adc	r12, r4
    3426:	d5 1c       	adc	r13, r5
    3428:	a2 14       	cp	r10, r2
    342a:	b3 04       	cpc	r11, r3
    342c:	c4 04       	cpc	r12, r4
    342e:	d5 04       	cpc	r13, r5
    3430:	48 f0       	brcs	.+18     	; 0x3444 <__umoddi3+0x4a8>
    3432:	a2 16       	cp	r10, r18
    3434:	b3 06       	cpc	r11, r19
    3436:	c4 06       	cpc	r12, r20
    3438:	d5 06       	cpc	r13, r21
    343a:	20 f4       	brcc	.+8      	; 0x3444 <__umoddi3+0x4a8>
    343c:	a2 0c       	add	r10, r2
    343e:	b3 1c       	adc	r11, r3
    3440:	c4 1c       	adc	r12, r4
    3442:	d5 1c       	adc	r13, r5
    3444:	a2 1a       	sub	r10, r18
    3446:	b3 0a       	sbc	r11, r19
    3448:	c4 0a       	sbc	r12, r20
    344a:	d5 0a       	sbc	r13, r21
    344c:	c6 01       	movw	r24, r12
    344e:	b5 01       	movw	r22, r10
    3450:	a4 01       	movw	r20, r8
    3452:	93 01       	movw	r18, r6
    3454:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3458:	7b 01       	movw	r14, r22
    345a:	8c 01       	movw	r16, r24
    345c:	c6 01       	movw	r24, r12
    345e:	b5 01       	movw	r22, r10
    3460:	a4 01       	movw	r20, r8
    3462:	93 01       	movw	r18, r6
    3464:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3468:	ca 01       	movw	r24, r20
    346a:	b9 01       	movw	r22, r18
    346c:	25 96       	adiw	r28, 0x05	; 5
    346e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3470:	3d ad       	ldd	r19, Y+61	; 0x3d
    3472:	4e ad       	ldd	r20, Y+62	; 0x3e
    3474:	5f ad       	ldd	r21, Y+63	; 0x3f
    3476:	25 97       	sbiw	r28, 0x05	; 5
    3478:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	87 01       	movw	r16, r14
    3482:	ff 24       	eor	r15, r15
    3484:	ee 24       	eor	r14, r14
    3486:	8d a5       	ldd	r24, Y+45	; 0x2d
    3488:	9e a5       	ldd	r25, Y+46	; 0x2e
    348a:	af a5       	ldd	r26, Y+47	; 0x2f
    348c:	b8 a9       	ldd	r27, Y+48	; 0x30
    348e:	a0 70       	andi	r26, 0x00	; 0
    3490:	b0 70       	andi	r27, 0x00	; 0
    3492:	57 01       	movw	r10, r14
    3494:	68 01       	movw	r12, r16
    3496:	a8 2a       	or	r10, r24
    3498:	b9 2a       	or	r11, r25
    349a:	ca 2a       	or	r12, r26
    349c:	db 2a       	or	r13, r27
    349e:	a2 16       	cp	r10, r18
    34a0:	b3 06       	cpc	r11, r19
    34a2:	c4 06       	cpc	r12, r20
    34a4:	d5 06       	cpc	r13, r21
    34a6:	90 f4       	brcc	.+36     	; 0x34cc <__umoddi3+0x530>
    34a8:	a2 0c       	add	r10, r2
    34aa:	b3 1c       	adc	r11, r3
    34ac:	c4 1c       	adc	r12, r4
    34ae:	d5 1c       	adc	r13, r5
    34b0:	a2 14       	cp	r10, r2
    34b2:	b3 04       	cpc	r11, r3
    34b4:	c4 04       	cpc	r12, r4
    34b6:	d5 04       	cpc	r13, r5
    34b8:	48 f0       	brcs	.+18     	; 0x34cc <__umoddi3+0x530>
    34ba:	a2 16       	cp	r10, r18
    34bc:	b3 06       	cpc	r11, r19
    34be:	c4 06       	cpc	r12, r20
    34c0:	d5 06       	cpc	r13, r21
    34c2:	20 f4       	brcc	.+8      	; 0x34cc <__umoddi3+0x530>
    34c4:	a2 0c       	add	r10, r2
    34c6:	b3 1c       	adc	r11, r3
    34c8:	c4 1c       	adc	r12, r4
    34ca:	d5 1c       	adc	r13, r5
    34cc:	6c 96       	adiw	r28, 0x1c	; 28
    34ce:	ec ac       	ldd	r14, Y+60	; 0x3c
    34d0:	fd ac       	ldd	r15, Y+61	; 0x3d
    34d2:	0e ad       	ldd	r16, Y+62	; 0x3e
    34d4:	1f ad       	ldd	r17, Y+63	; 0x3f
    34d6:	6c 97       	sbiw	r28, 0x1c	; 28
    34d8:	68 96       	adiw	r28, 0x18	; 24
    34da:	0f ac       	ldd	r0, Y+63	; 0x3f
    34dc:	68 97       	sbiw	r28, 0x18	; 24
    34de:	04 c0       	rjmp	.+8      	; 0x34e8 <__umoddi3+0x54c>
    34e0:	ee 0c       	add	r14, r14
    34e2:	ff 1c       	adc	r15, r15
    34e4:	00 1f       	adc	r16, r16
    34e6:	11 1f       	adc	r17, r17
    34e8:	0a 94       	dec	r0
    34ea:	d2 f7       	brpl	.-12     	; 0x34e0 <__umoddi3+0x544>
    34ec:	e9 aa       	std	Y+49, r14	; 0x31
    34ee:	fa aa       	std	Y+50, r15	; 0x32
    34f0:	0b ab       	std	Y+51, r16	; 0x33
    34f2:	1c ab       	std	Y+52, r17	; 0x34
    34f4:	a2 1a       	sub	r10, r18
    34f6:	b3 0a       	sbc	r11, r19
    34f8:	c4 0a       	sbc	r12, r20
    34fa:	d5 0a       	sbc	r13, r21
    34fc:	32 01       	movw	r6, r4
    34fe:	88 24       	eor	r8, r8
    3500:	99 24       	eor	r9, r9
    3502:	b2 01       	movw	r22, r4
    3504:	a1 01       	movw	r20, r2
    3506:	60 70       	andi	r22, 0x00	; 0
    3508:	70 70       	andi	r23, 0x00	; 0
    350a:	29 96       	adiw	r28, 0x09	; 9
    350c:	4c af       	std	Y+60, r20	; 0x3c
    350e:	5d af       	std	Y+61, r21	; 0x3d
    3510:	6e af       	std	Y+62, r22	; 0x3e
    3512:	7f af       	std	Y+63, r23	; 0x3f
    3514:	29 97       	sbiw	r28, 0x09	; 9
    3516:	c6 01       	movw	r24, r12
    3518:	b5 01       	movw	r22, r10
    351a:	a4 01       	movw	r20, r8
    351c:	93 01       	movw	r18, r6
    351e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3522:	7b 01       	movw	r14, r22
    3524:	8c 01       	movw	r16, r24
    3526:	c6 01       	movw	r24, r12
    3528:	b5 01       	movw	r22, r10
    352a:	a4 01       	movw	r20, r8
    352c:	93 01       	movw	r18, r6
    352e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3532:	ca 01       	movw	r24, r20
    3534:	b9 01       	movw	r22, r18
    3536:	29 96       	adiw	r28, 0x09	; 9
    3538:	2c ad       	ldd	r18, Y+60	; 0x3c
    353a:	3d ad       	ldd	r19, Y+61	; 0x3d
    353c:	4e ad       	ldd	r20, Y+62	; 0x3e
    353e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3540:	29 97       	sbiw	r28, 0x09	; 9
    3542:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    3546:	9b 01       	movw	r18, r22
    3548:	ac 01       	movw	r20, r24
    354a:	87 01       	movw	r16, r14
    354c:	ff 24       	eor	r15, r15
    354e:	ee 24       	eor	r14, r14
    3550:	a9 a8       	ldd	r10, Y+49	; 0x31
    3552:	ba a8       	ldd	r11, Y+50	; 0x32
    3554:	cb a8       	ldd	r12, Y+51	; 0x33
    3556:	dc a8       	ldd	r13, Y+52	; 0x34
    3558:	c6 01       	movw	r24, r12
    355a:	aa 27       	eor	r26, r26
    355c:	bb 27       	eor	r27, r27
    355e:	57 01       	movw	r10, r14
    3560:	68 01       	movw	r12, r16
    3562:	a8 2a       	or	r10, r24
    3564:	b9 2a       	or	r11, r25
    3566:	ca 2a       	or	r12, r26
    3568:	db 2a       	or	r13, r27
    356a:	a2 16       	cp	r10, r18
    356c:	b3 06       	cpc	r11, r19
    356e:	c4 06       	cpc	r12, r20
    3570:	d5 06       	cpc	r13, r21
    3572:	90 f4       	brcc	.+36     	; 0x3598 <__umoddi3+0x5fc>
    3574:	a2 0c       	add	r10, r2
    3576:	b3 1c       	adc	r11, r3
    3578:	c4 1c       	adc	r12, r4
    357a:	d5 1c       	adc	r13, r5
    357c:	a2 14       	cp	r10, r2
    357e:	b3 04       	cpc	r11, r3
    3580:	c4 04       	cpc	r12, r4
    3582:	d5 04       	cpc	r13, r5
    3584:	48 f0       	brcs	.+18     	; 0x3598 <__umoddi3+0x5fc>
    3586:	a2 16       	cp	r10, r18
    3588:	b3 06       	cpc	r11, r19
    358a:	c4 06       	cpc	r12, r20
    358c:	d5 06       	cpc	r13, r21
    358e:	20 f4       	brcc	.+8      	; 0x3598 <__umoddi3+0x5fc>
    3590:	a2 0c       	add	r10, r2
    3592:	b3 1c       	adc	r11, r3
    3594:	c4 1c       	adc	r12, r4
    3596:	d5 1c       	adc	r13, r5
    3598:	a2 1a       	sub	r10, r18
    359a:	b3 0a       	sbc	r11, r19
    359c:	c4 0a       	sbc	r12, r20
    359e:	d5 0a       	sbc	r13, r21
    35a0:	c6 01       	movw	r24, r12
    35a2:	b5 01       	movw	r22, r10
    35a4:	a4 01       	movw	r20, r8
    35a6:	93 01       	movw	r18, r6
    35a8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    35ac:	7b 01       	movw	r14, r22
    35ae:	8c 01       	movw	r16, r24
    35b0:	c6 01       	movw	r24, r12
    35b2:	b5 01       	movw	r22, r10
    35b4:	a4 01       	movw	r20, r8
    35b6:	93 01       	movw	r18, r6
    35b8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    35bc:	ca 01       	movw	r24, r20
    35be:	b9 01       	movw	r22, r18
    35c0:	29 96       	adiw	r28, 0x09	; 9
    35c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    35c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    35c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    35c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    35ca:	29 97       	sbiw	r28, 0x09	; 9
    35cc:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    35d0:	9b 01       	movw	r18, r22
    35d2:	ac 01       	movw	r20, r24
    35d4:	87 01       	movw	r16, r14
    35d6:	ff 24       	eor	r15, r15
    35d8:	ee 24       	eor	r14, r14
    35da:	89 a9       	ldd	r24, Y+49	; 0x31
    35dc:	9a a9       	ldd	r25, Y+50	; 0x32
    35de:	ab a9       	ldd	r26, Y+51	; 0x33
    35e0:	bc a9       	ldd	r27, Y+52	; 0x34
    35e2:	a0 70       	andi	r26, 0x00	; 0
    35e4:	b0 70       	andi	r27, 0x00	; 0
    35e6:	e8 2a       	or	r14, r24
    35e8:	f9 2a       	or	r15, r25
    35ea:	0a 2b       	or	r16, r26
    35ec:	1b 2b       	or	r17, r27
    35ee:	e2 16       	cp	r14, r18
    35f0:	f3 06       	cpc	r15, r19
    35f2:	04 07       	cpc	r16, r20
    35f4:	15 07       	cpc	r17, r21
    35f6:	90 f4       	brcc	.+36     	; 0x361c <__umoddi3+0x680>
    35f8:	e2 0c       	add	r14, r2
    35fa:	f3 1c       	adc	r15, r3
    35fc:	04 1d       	adc	r16, r4
    35fe:	15 1d       	adc	r17, r5
    3600:	e2 14       	cp	r14, r2
    3602:	f3 04       	cpc	r15, r3
    3604:	04 05       	cpc	r16, r4
    3606:	15 05       	cpc	r17, r5
    3608:	48 f0       	brcs	.+18     	; 0x361c <__umoddi3+0x680>
    360a:	e2 16       	cp	r14, r18
    360c:	f3 06       	cpc	r15, r19
    360e:	04 07       	cpc	r16, r20
    3610:	15 07       	cpc	r17, r21
    3612:	20 f4       	brcc	.+8      	; 0x361c <__umoddi3+0x680>
    3614:	e2 0c       	add	r14, r2
    3616:	f3 1c       	adc	r15, r3
    3618:	04 1d       	adc	r16, r4
    361a:	15 1d       	adc	r17, r5
    361c:	e2 1a       	sub	r14, r18
    361e:	f3 0a       	sbc	r15, r19
    3620:	04 0b       	sbc	r16, r20
    3622:	15 0b       	sbc	r17, r21
    3624:	d8 01       	movw	r26, r16
    3626:	c7 01       	movw	r24, r14
    3628:	09 ac       	ldd	r0, Y+57	; 0x39
    362a:	04 c0       	rjmp	.+8      	; 0x3634 <__umoddi3+0x698>
    362c:	b6 95       	lsr	r27
    362e:	a7 95       	ror	r26
    3630:	97 95       	ror	r25
    3632:	87 95       	ror	r24
    3634:	0a 94       	dec	r0
    3636:	d2 f7       	brpl	.-12     	; 0x362c <__umoddi3+0x690>
    3638:	89 8b       	std	Y+17, r24	; 0x11
    363a:	9a 8b       	std	Y+18, r25	; 0x12
    363c:	ab 8b       	std	Y+19, r26	; 0x13
    363e:	bc 8b       	std	Y+20, r27	; 0x14
    3640:	1d 8a       	std	Y+21, r1	; 0x15
    3642:	1e 8a       	std	Y+22, r1	; 0x16
    3644:	1f 8a       	std	Y+23, r1	; 0x17
    3646:	18 8e       	std	Y+24, r1	; 0x18
    3648:	28 2f       	mov	r18, r24
    364a:	3a 89       	ldd	r19, Y+18	; 0x12
    364c:	4b 89       	ldd	r20, Y+19	; 0x13
    364e:	5c 89       	ldd	r21, Y+20	; 0x14
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	0c c3       	rjmp	.+1560   	; 0x3c6c <__umoddi3+0xcd0>
    3654:	6a 14       	cp	r6, r10
    3656:	7b 04       	cpc	r7, r11
    3658:	8c 04       	cpc	r8, r12
    365a:	9d 04       	cpc	r9, r13
    365c:	08 f4       	brcc	.+2      	; 0x3660 <__umoddi3+0x6c4>
    365e:	09 c3       	rjmp	.+1554   	; 0x3c72 <__umoddi3+0xcd6>
    3660:	00 e0       	ldi	r16, 0x00	; 0
    3662:	a0 16       	cp	r10, r16
    3664:	00 e0       	ldi	r16, 0x00	; 0
    3666:	b0 06       	cpc	r11, r16
    3668:	01 e0       	ldi	r16, 0x01	; 1
    366a:	c0 06       	cpc	r12, r16
    366c:	00 e0       	ldi	r16, 0x00	; 0
    366e:	d0 06       	cpc	r13, r16
    3670:	88 f4       	brcc	.+34     	; 0x3694 <__umoddi3+0x6f8>
    3672:	1f ef       	ldi	r17, 0xFF	; 255
    3674:	a1 16       	cp	r10, r17
    3676:	b1 04       	cpc	r11, r1
    3678:	c1 04       	cpc	r12, r1
    367a:	d1 04       	cpc	r13, r1
    367c:	39 f0       	breq	.+14     	; 0x368c <__umoddi3+0x6f0>
    367e:	30 f0       	brcs	.+12     	; 0x368c <__umoddi3+0x6f0>
    3680:	28 e0       	ldi	r18, 0x08	; 8
    3682:	e2 2e       	mov	r14, r18
    3684:	f1 2c       	mov	r15, r1
    3686:	01 2d       	mov	r16, r1
    3688:	11 2d       	mov	r17, r1
    368a:	18 c0       	rjmp	.+48     	; 0x36bc <__umoddi3+0x720>
    368c:	ee 24       	eor	r14, r14
    368e:	ff 24       	eor	r15, r15
    3690:	87 01       	movw	r16, r14
    3692:	14 c0       	rjmp	.+40     	; 0x36bc <__umoddi3+0x720>
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	a4 16       	cp	r10, r20
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	b4 06       	cpc	r11, r20
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	c4 06       	cpc	r12, r20
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	d4 06       	cpc	r13, r20
    36a4:	30 f0       	brcs	.+12     	; 0x36b2 <__umoddi3+0x716>
    36a6:	98 e1       	ldi	r25, 0x18	; 24
    36a8:	e9 2e       	mov	r14, r25
    36aa:	f1 2c       	mov	r15, r1
    36ac:	01 2d       	mov	r16, r1
    36ae:	11 2d       	mov	r17, r1
    36b0:	05 c0       	rjmp	.+10     	; 0x36bc <__umoddi3+0x720>
    36b2:	80 e1       	ldi	r24, 0x10	; 16
    36b4:	e8 2e       	mov	r14, r24
    36b6:	f1 2c       	mov	r15, r1
    36b8:	01 2d       	mov	r16, r1
    36ba:	11 2d       	mov	r17, r1
    36bc:	d6 01       	movw	r26, r12
    36be:	c5 01       	movw	r24, r10
    36c0:	0e 2c       	mov	r0, r14
    36c2:	04 c0       	rjmp	.+8      	; 0x36cc <__umoddi3+0x730>
    36c4:	b6 95       	lsr	r27
    36c6:	a7 95       	ror	r26
    36c8:	97 95       	ror	r25
    36ca:	87 95       	ror	r24
    36cc:	0a 94       	dec	r0
    36ce:	d2 f7       	brpl	.-12     	; 0x36c4 <__umoddi3+0x728>
    36d0:	83 59       	subi	r24, 0x93	; 147
    36d2:	9f 4f       	sbci	r25, 0xFF	; 255
    36d4:	dc 01       	movw	r26, r24
    36d6:	2c 91       	ld	r18, X
    36d8:	80 e2       	ldi	r24, 0x20	; 32
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a0 e0       	ldi	r26, 0x00	; 0
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	8e 19       	sub	r24, r14
    36e2:	9f 09       	sbc	r25, r15
    36e4:	a0 0b       	sbc	r26, r16
    36e6:	b1 0b       	sbc	r27, r17
    36e8:	82 1b       	sub	r24, r18
    36ea:	91 09       	sbc	r25, r1
    36ec:	a1 09       	sbc	r26, r1
    36ee:	b1 09       	sbc	r27, r1
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	a1 05       	cpc	r26, r1
    36f4:	b1 05       	cpc	r27, r1
    36f6:	09 f0       	breq	.+2      	; 0x36fa <__umoddi3+0x75e>
    36f8:	4f c0       	rjmp	.+158    	; 0x3798 <__umoddi3+0x7fc>
    36fa:	a6 14       	cp	r10, r6
    36fc:	b7 04       	cpc	r11, r7
    36fe:	c8 04       	cpc	r12, r8
    3700:	d9 04       	cpc	r13, r9
    3702:	58 f0       	brcs	.+22     	; 0x371a <__umoddi3+0x77e>
    3704:	6c 96       	adiw	r28, 0x1c	; 28
    3706:	ec ac       	ldd	r14, Y+60	; 0x3c
    3708:	fd ac       	ldd	r15, Y+61	; 0x3d
    370a:	0e ad       	ldd	r16, Y+62	; 0x3e
    370c:	1f ad       	ldd	r17, Y+63	; 0x3f
    370e:	6c 97       	sbiw	r28, 0x1c	; 28
    3710:	e2 14       	cp	r14, r2
    3712:	f3 04       	cpc	r15, r3
    3714:	04 05       	cpc	r16, r4
    3716:	15 05       	cpc	r17, r5
    3718:	68 f1       	brcs	.+90     	; 0x3774 <__umoddi3+0x7d8>
    371a:	6c 96       	adiw	r28, 0x1c	; 28
    371c:	ec ac       	ldd	r14, Y+60	; 0x3c
    371e:	fd ac       	ldd	r15, Y+61	; 0x3d
    3720:	0e ad       	ldd	r16, Y+62	; 0x3e
    3722:	1f ad       	ldd	r17, Y+63	; 0x3f
    3724:	6c 97       	sbiw	r28, 0x1c	; 28
    3726:	e2 18       	sub	r14, r2
    3728:	f3 08       	sbc	r15, r3
    372a:	04 09       	sbc	r16, r4
    372c:	15 09       	sbc	r17, r5
    372e:	a4 01       	movw	r20, r8
    3730:	93 01       	movw	r18, r6
    3732:	2a 19       	sub	r18, r10
    3734:	3b 09       	sbc	r19, r11
    3736:	4c 09       	sbc	r20, r12
    3738:	5d 09       	sbc	r21, r13
    373a:	aa 24       	eor	r10, r10
    373c:	bb 24       	eor	r11, r11
    373e:	65 01       	movw	r12, r10
    3740:	6c 96       	adiw	r28, 0x1c	; 28
    3742:	6c ad       	ldd	r22, Y+60	; 0x3c
    3744:	7d ad       	ldd	r23, Y+61	; 0x3d
    3746:	8e ad       	ldd	r24, Y+62	; 0x3e
    3748:	9f ad       	ldd	r25, Y+63	; 0x3f
    374a:	6c 97       	sbiw	r28, 0x1c	; 28
    374c:	6e 15       	cp	r22, r14
    374e:	7f 05       	cpc	r23, r15
    3750:	80 07       	cpc	r24, r16
    3752:	91 07       	cpc	r25, r17
    3754:	28 f4       	brcc	.+10     	; 0x3760 <__umoddi3+0x7c4>
    3756:	b1 e0       	ldi	r27, 0x01	; 1
    3758:	ab 2e       	mov	r10, r27
    375a:	b1 2c       	mov	r11, r1
    375c:	c1 2c       	mov	r12, r1
    375e:	d1 2c       	mov	r13, r1
    3760:	da 01       	movw	r26, r20
    3762:	c9 01       	movw	r24, r18
    3764:	8a 19       	sub	r24, r10
    3766:	9b 09       	sbc	r25, r11
    3768:	ac 09       	sbc	r26, r12
    376a:	bd 09       	sbc	r27, r13
    376c:	8d ab       	std	Y+53, r24	; 0x35
    376e:	9e ab       	std	Y+54, r25	; 0x36
    3770:	af ab       	std	Y+55, r26	; 0x37
    3772:	b8 af       	std	Y+56, r27	; 0x38
    3774:	e9 8a       	std	Y+17, r14	; 0x11
    3776:	fa 8a       	std	Y+18, r15	; 0x12
    3778:	0b 8b       	std	Y+19, r16	; 0x13
    377a:	1c 8b       	std	Y+20, r17	; 0x14
    377c:	6d a8       	ldd	r6, Y+53	; 0x35
    377e:	7e a8       	ldd	r7, Y+54	; 0x36
    3780:	8f a8       	ldd	r8, Y+55	; 0x37
    3782:	98 ac       	ldd	r9, Y+56	; 0x38
    3784:	6d 8a       	std	Y+21, r6	; 0x15
    3786:	7e 8a       	std	Y+22, r7	; 0x16
    3788:	8f 8a       	std	Y+23, r8	; 0x17
    378a:	98 8e       	std	Y+24, r9	; 0x18
    378c:	2e 2d       	mov	r18, r14
    378e:	3a 89       	ldd	r19, Y+18	; 0x12
    3790:	4b 89       	ldd	r20, Y+19	; 0x13
    3792:	5c 89       	ldd	r21, Y+20	; 0x14
    3794:	6d a9       	ldd	r22, Y+53	; 0x35
    3796:	6a c2       	rjmp	.+1236   	; 0x3c6c <__umoddi3+0xcd0>
    3798:	67 96       	adiw	r28, 0x17	; 23
    379a:	8f af       	std	Y+63, r24	; 0x3f
    379c:	67 97       	sbiw	r28, 0x17	; 23
    379e:	a6 01       	movw	r20, r12
    37a0:	95 01       	movw	r18, r10
    37a2:	08 2e       	mov	r0, r24
    37a4:	04 c0       	rjmp	.+8      	; 0x37ae <__umoddi3+0x812>
    37a6:	22 0f       	add	r18, r18
    37a8:	33 1f       	adc	r19, r19
    37aa:	44 1f       	adc	r20, r20
    37ac:	55 1f       	adc	r21, r21
    37ae:	0a 94       	dec	r0
    37b0:	d2 f7       	brpl	.-12     	; 0x37a6 <__umoddi3+0x80a>
    37b2:	a0 e2       	ldi	r26, 0x20	; 32
    37b4:	aa 2e       	mov	r10, r26
    37b6:	a8 1a       	sub	r10, r24
    37b8:	66 96       	adiw	r28, 0x16	; 22
    37ba:	af ae       	std	Y+63, r10	; 0x3f
    37bc:	66 97       	sbiw	r28, 0x16	; 22
    37be:	d2 01       	movw	r26, r4
    37c0:	c1 01       	movw	r24, r2
    37c2:	04 c0       	rjmp	.+8      	; 0x37cc <__umoddi3+0x830>
    37c4:	b6 95       	lsr	r27
    37c6:	a7 95       	ror	r26
    37c8:	97 95       	ror	r25
    37ca:	87 95       	ror	r24
    37cc:	aa 94       	dec	r10
    37ce:	d2 f7       	brpl	.-12     	; 0x37c4 <__umoddi3+0x828>
    37d0:	6c 01       	movw	r12, r24
    37d2:	7d 01       	movw	r14, r26
    37d4:	c2 2a       	or	r12, r18
    37d6:	d3 2a       	or	r13, r19
    37d8:	e4 2a       	or	r14, r20
    37da:	f5 2a       	or	r15, r21
    37dc:	c9 a6       	std	Y+41, r12	; 0x29
    37de:	da a6       	std	Y+42, r13	; 0x2a
    37e0:	eb a6       	std	Y+43, r14	; 0x2b
    37e2:	fc a6       	std	Y+44, r15	; 0x2c
    37e4:	82 01       	movw	r16, r4
    37e6:	71 01       	movw	r14, r2
    37e8:	67 96       	adiw	r28, 0x17	; 23
    37ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    37ec:	67 97       	sbiw	r28, 0x17	; 23
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <__umoddi3+0x85c>
    37f0:	ee 0c       	add	r14, r14
    37f2:	ff 1c       	adc	r15, r15
    37f4:	00 1f       	adc	r16, r16
    37f6:	11 1f       	adc	r17, r17
    37f8:	0a 94       	dec	r0
    37fa:	d2 f7       	brpl	.-12     	; 0x37f0 <__umoddi3+0x854>
    37fc:	ed a2       	std	Y+37, r14	; 0x25
    37fe:	fe a2       	std	Y+38, r15	; 0x26
    3800:	0f a3       	std	Y+39, r16	; 0x27
    3802:	18 a7       	std	Y+40, r17	; 0x28
    3804:	64 01       	movw	r12, r8
    3806:	53 01       	movw	r10, r6
    3808:	66 96       	adiw	r28, 0x16	; 22
    380a:	0f ac       	ldd	r0, Y+63	; 0x3f
    380c:	66 97       	sbiw	r28, 0x16	; 22
    380e:	04 c0       	rjmp	.+8      	; 0x3818 <__umoddi3+0x87c>
    3810:	d6 94       	lsr	r13
    3812:	c7 94       	ror	r12
    3814:	b7 94       	ror	r11
    3816:	a7 94       	ror	r10
    3818:	0a 94       	dec	r0
    381a:	d2 f7       	brpl	.-12     	; 0x3810 <__umoddi3+0x874>
    381c:	a4 01       	movw	r20, r8
    381e:	93 01       	movw	r18, r6
    3820:	67 96       	adiw	r28, 0x17	; 23
    3822:	0f ac       	ldd	r0, Y+63	; 0x3f
    3824:	67 97       	sbiw	r28, 0x17	; 23
    3826:	04 c0       	rjmp	.+8      	; 0x3830 <__umoddi3+0x894>
    3828:	22 0f       	add	r18, r18
    382a:	33 1f       	adc	r19, r19
    382c:	44 1f       	adc	r20, r20
    382e:	55 1f       	adc	r21, r21
    3830:	0a 94       	dec	r0
    3832:	d2 f7       	brpl	.-12     	; 0x3828 <__umoddi3+0x88c>
    3834:	6c 96       	adiw	r28, 0x1c	; 28
    3836:	8c ad       	ldd	r24, Y+60	; 0x3c
    3838:	9d ad       	ldd	r25, Y+61	; 0x3d
    383a:	ae ad       	ldd	r26, Y+62	; 0x3e
    383c:	bf ad       	ldd	r27, Y+63	; 0x3f
    383e:	6c 97       	sbiw	r28, 0x1c	; 28
    3840:	66 96       	adiw	r28, 0x16	; 22
    3842:	0f ac       	ldd	r0, Y+63	; 0x3f
    3844:	66 97       	sbiw	r28, 0x16	; 22
    3846:	04 c0       	rjmp	.+8      	; 0x3850 <__umoddi3+0x8b4>
    3848:	b6 95       	lsr	r27
    384a:	a7 95       	ror	r26
    384c:	97 95       	ror	r25
    384e:	87 95       	ror	r24
    3850:	0a 94       	dec	r0
    3852:	d2 f7       	brpl	.-12     	; 0x3848 <__umoddi3+0x8ac>
    3854:	3c 01       	movw	r6, r24
    3856:	4d 01       	movw	r8, r26
    3858:	62 2a       	or	r6, r18
    385a:	73 2a       	or	r7, r19
    385c:	84 2a       	or	r8, r20
    385e:	95 2a       	or	r9, r21
    3860:	69 a2       	std	Y+33, r6	; 0x21
    3862:	7a a2       	std	Y+34, r7	; 0x22
    3864:	8b a2       	std	Y+35, r8	; 0x23
    3866:	9c a2       	std	Y+36, r9	; 0x24
    3868:	6c 96       	adiw	r28, 0x1c	; 28
    386a:	ec ac       	ldd	r14, Y+60	; 0x3c
    386c:	fd ac       	ldd	r15, Y+61	; 0x3d
    386e:	0e ad       	ldd	r16, Y+62	; 0x3e
    3870:	1f ad       	ldd	r17, Y+63	; 0x3f
    3872:	6c 97       	sbiw	r28, 0x1c	; 28
    3874:	67 96       	adiw	r28, 0x17	; 23
    3876:	0f ac       	ldd	r0, Y+63	; 0x3f
    3878:	67 97       	sbiw	r28, 0x17	; 23
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <__umoddi3+0x8e8>
    387c:	ee 0c       	add	r14, r14
    387e:	ff 1c       	adc	r15, r15
    3880:	00 1f       	adc	r16, r16
    3882:	11 1f       	adc	r17, r17
    3884:	0a 94       	dec	r0
    3886:	d2 f7       	brpl	.-12     	; 0x387c <__umoddi3+0x8e0>
    3888:	ed 8e       	std	Y+29, r14	; 0x1d
    388a:	fe 8e       	std	Y+30, r15	; 0x1e
    388c:	0f 8f       	std	Y+31, r16	; 0x1f
    388e:	18 a3       	std	Y+32, r17	; 0x20
    3890:	49 a5       	ldd	r20, Y+41	; 0x29
    3892:	5a a5       	ldd	r21, Y+42	; 0x2a
    3894:	6b a5       	ldd	r22, Y+43	; 0x2b
    3896:	7c a5       	ldd	r23, Y+44	; 0x2c
    3898:	3b 01       	movw	r6, r22
    389a:	88 24       	eor	r8, r8
    389c:	99 24       	eor	r9, r9
    389e:	60 70       	andi	r22, 0x00	; 0
    38a0:	70 70       	andi	r23, 0x00	; 0
    38a2:	2d 96       	adiw	r28, 0x0d	; 13
    38a4:	4c af       	std	Y+60, r20	; 0x3c
    38a6:	5d af       	std	Y+61, r21	; 0x3d
    38a8:	6e af       	std	Y+62, r22	; 0x3e
    38aa:	7f af       	std	Y+63, r23	; 0x3f
    38ac:	2d 97       	sbiw	r28, 0x0d	; 13
    38ae:	c6 01       	movw	r24, r12
    38b0:	b5 01       	movw	r22, r10
    38b2:	a4 01       	movw	r20, r8
    38b4:	93 01       	movw	r18, r6
    38b6:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    38ba:	7b 01       	movw	r14, r22
    38bc:	8c 01       	movw	r16, r24
    38be:	c6 01       	movw	r24, r12
    38c0:	b5 01       	movw	r22, r10
    38c2:	a4 01       	movw	r20, r8
    38c4:	93 01       	movw	r18, r6
    38c6:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    38ca:	c9 01       	movw	r24, r18
    38cc:	da 01       	movw	r26, r20
    38ce:	1c 01       	movw	r2, r24
    38d0:	2d 01       	movw	r4, r26
    38d2:	c2 01       	movw	r24, r4
    38d4:	b1 01       	movw	r22, r2
    38d6:	2d 96       	adiw	r28, 0x0d	; 13
    38d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    38da:	3d ad       	ldd	r19, Y+61	; 0x3d
    38dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    38de:	5f ad       	ldd	r21, Y+63	; 0x3f
    38e0:	2d 97       	sbiw	r28, 0x0d	; 13
    38e2:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    38e6:	9b 01       	movw	r18, r22
    38e8:	ac 01       	movw	r20, r24
    38ea:	87 01       	movw	r16, r14
    38ec:	ff 24       	eor	r15, r15
    38ee:	ee 24       	eor	r14, r14
    38f0:	a9 a0       	ldd	r10, Y+33	; 0x21
    38f2:	ba a0       	ldd	r11, Y+34	; 0x22
    38f4:	cb a0       	ldd	r12, Y+35	; 0x23
    38f6:	dc a0       	ldd	r13, Y+36	; 0x24
    38f8:	c6 01       	movw	r24, r12
    38fa:	aa 27       	eor	r26, r26
    38fc:	bb 27       	eor	r27, r27
    38fe:	57 01       	movw	r10, r14
    3900:	68 01       	movw	r12, r16
    3902:	a8 2a       	or	r10, r24
    3904:	b9 2a       	or	r11, r25
    3906:	ca 2a       	or	r12, r26
    3908:	db 2a       	or	r13, r27
    390a:	a2 16       	cp	r10, r18
    390c:	b3 06       	cpc	r11, r19
    390e:	c4 06       	cpc	r12, r20
    3910:	d5 06       	cpc	r13, r21
    3912:	00 f5       	brcc	.+64     	; 0x3954 <__umoddi3+0x9b8>
    3914:	08 94       	sec
    3916:	21 08       	sbc	r2, r1
    3918:	31 08       	sbc	r3, r1
    391a:	41 08       	sbc	r4, r1
    391c:	51 08       	sbc	r5, r1
    391e:	e9 a4       	ldd	r14, Y+41	; 0x29
    3920:	fa a4       	ldd	r15, Y+42	; 0x2a
    3922:	0b a5       	ldd	r16, Y+43	; 0x2b
    3924:	1c a5       	ldd	r17, Y+44	; 0x2c
    3926:	ae 0c       	add	r10, r14
    3928:	bf 1c       	adc	r11, r15
    392a:	c0 1e       	adc	r12, r16
    392c:	d1 1e       	adc	r13, r17
    392e:	ae 14       	cp	r10, r14
    3930:	bf 04       	cpc	r11, r15
    3932:	c0 06       	cpc	r12, r16
    3934:	d1 06       	cpc	r13, r17
    3936:	70 f0       	brcs	.+28     	; 0x3954 <__umoddi3+0x9b8>
    3938:	a2 16       	cp	r10, r18
    393a:	b3 06       	cpc	r11, r19
    393c:	c4 06       	cpc	r12, r20
    393e:	d5 06       	cpc	r13, r21
    3940:	48 f4       	brcc	.+18     	; 0x3954 <__umoddi3+0x9b8>
    3942:	08 94       	sec
    3944:	21 08       	sbc	r2, r1
    3946:	31 08       	sbc	r3, r1
    3948:	41 08       	sbc	r4, r1
    394a:	51 08       	sbc	r5, r1
    394c:	ae 0c       	add	r10, r14
    394e:	bf 1c       	adc	r11, r15
    3950:	c0 1e       	adc	r12, r16
    3952:	d1 1e       	adc	r13, r17
    3954:	a2 1a       	sub	r10, r18
    3956:	b3 0a       	sbc	r11, r19
    3958:	c4 0a       	sbc	r12, r20
    395a:	d5 0a       	sbc	r13, r21
    395c:	c6 01       	movw	r24, r12
    395e:	b5 01       	movw	r22, r10
    3960:	a4 01       	movw	r20, r8
    3962:	93 01       	movw	r18, r6
    3964:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3968:	7b 01       	movw	r14, r22
    396a:	8c 01       	movw	r16, r24
    396c:	c6 01       	movw	r24, r12
    396e:	b5 01       	movw	r22, r10
    3970:	a4 01       	movw	r20, r8
    3972:	93 01       	movw	r18, r6
    3974:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <__udivmodsi4>
    3978:	c9 01       	movw	r24, r18
    397a:	da 01       	movw	r26, r20
    397c:	3c 01       	movw	r6, r24
    397e:	4d 01       	movw	r8, r26
    3980:	c4 01       	movw	r24, r8
    3982:	b3 01       	movw	r22, r6
    3984:	2d 96       	adiw	r28, 0x0d	; 13
    3986:	2c ad       	ldd	r18, Y+60	; 0x3c
    3988:	3d ad       	ldd	r19, Y+61	; 0x3d
    398a:	4e ad       	ldd	r20, Y+62	; 0x3e
    398c:	5f ad       	ldd	r21, Y+63	; 0x3f
    398e:	2d 97       	sbiw	r28, 0x0d	; 13
    3990:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    3994:	9b 01       	movw	r18, r22
    3996:	ac 01       	movw	r20, r24
    3998:	87 01       	movw	r16, r14
    399a:	ff 24       	eor	r15, r15
    399c:	ee 24       	eor	r14, r14
    399e:	89 a1       	ldd	r24, Y+33	; 0x21
    39a0:	9a a1       	ldd	r25, Y+34	; 0x22
    39a2:	ab a1       	ldd	r26, Y+35	; 0x23
    39a4:	bc a1       	ldd	r27, Y+36	; 0x24
    39a6:	a0 70       	andi	r26, 0x00	; 0
    39a8:	b0 70       	andi	r27, 0x00	; 0
    39aa:	57 01       	movw	r10, r14
    39ac:	68 01       	movw	r12, r16
    39ae:	a8 2a       	or	r10, r24
    39b0:	b9 2a       	or	r11, r25
    39b2:	ca 2a       	or	r12, r26
    39b4:	db 2a       	or	r13, r27
    39b6:	a2 16       	cp	r10, r18
    39b8:	b3 06       	cpc	r11, r19
    39ba:	c4 06       	cpc	r12, r20
    39bc:	d5 06       	cpc	r13, r21
    39be:	00 f5       	brcc	.+64     	; 0x3a00 <__umoddi3+0xa64>
    39c0:	08 94       	sec
    39c2:	61 08       	sbc	r6, r1
    39c4:	71 08       	sbc	r7, r1
    39c6:	81 08       	sbc	r8, r1
    39c8:	91 08       	sbc	r9, r1
    39ca:	69 a5       	ldd	r22, Y+41	; 0x29
    39cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    39ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    39d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    39d2:	a6 0e       	add	r10, r22
    39d4:	b7 1e       	adc	r11, r23
    39d6:	c8 1e       	adc	r12, r24
    39d8:	d9 1e       	adc	r13, r25
    39da:	a6 16       	cp	r10, r22
    39dc:	b7 06       	cpc	r11, r23
    39de:	c8 06       	cpc	r12, r24
    39e0:	d9 06       	cpc	r13, r25
    39e2:	70 f0       	brcs	.+28     	; 0x3a00 <__umoddi3+0xa64>
    39e4:	a2 16       	cp	r10, r18
    39e6:	b3 06       	cpc	r11, r19
    39e8:	c4 06       	cpc	r12, r20
    39ea:	d5 06       	cpc	r13, r21
    39ec:	48 f4       	brcc	.+18     	; 0x3a00 <__umoddi3+0xa64>
    39ee:	08 94       	sec
    39f0:	61 08       	sbc	r6, r1
    39f2:	71 08       	sbc	r7, r1
    39f4:	81 08       	sbc	r8, r1
    39f6:	91 08       	sbc	r9, r1
    39f8:	a6 0e       	add	r10, r22
    39fa:	b7 1e       	adc	r11, r23
    39fc:	c8 1e       	adc	r12, r24
    39fe:	d9 1e       	adc	r13, r25
    3a00:	d6 01       	movw	r26, r12
    3a02:	c5 01       	movw	r24, r10
    3a04:	82 1b       	sub	r24, r18
    3a06:	93 0b       	sbc	r25, r19
    3a08:	a4 0b       	sbc	r26, r20
    3a0a:	b5 0b       	sbc	r27, r21
    3a0c:	89 8f       	std	Y+25, r24	; 0x19
    3a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    3a10:	ab 8f       	std	Y+27, r26	; 0x1b
    3a12:	bc 8f       	std	Y+28, r27	; 0x1c
    3a14:	d1 01       	movw	r26, r2
    3a16:	99 27       	eor	r25, r25
    3a18:	88 27       	eor	r24, r24
    3a1a:	84 01       	movw	r16, r8
    3a1c:	73 01       	movw	r14, r6
    3a1e:	e8 2a       	or	r14, r24
    3a20:	f9 2a       	or	r15, r25
    3a22:	0a 2b       	or	r16, r26
    3a24:	1b 2b       	or	r17, r27
    3a26:	4f ef       	ldi	r20, 0xFF	; 255
    3a28:	a4 2e       	mov	r10, r20
    3a2a:	4f ef       	ldi	r20, 0xFF	; 255
    3a2c:	b4 2e       	mov	r11, r20
    3a2e:	c1 2c       	mov	r12, r1
    3a30:	d1 2c       	mov	r13, r1
    3a32:	ae 20       	and	r10, r14
    3a34:	bf 20       	and	r11, r15
    3a36:	c0 22       	and	r12, r16
    3a38:	d1 22       	and	r13, r17
    3a3a:	78 01       	movw	r14, r16
    3a3c:	00 27       	eor	r16, r16
    3a3e:	11 27       	eor	r17, r17
    3a40:	6d a0       	ldd	r6, Y+37	; 0x25
    3a42:	7e a0       	ldd	r7, Y+38	; 0x26
    3a44:	8f a0       	ldd	r8, Y+39	; 0x27
    3a46:	98 a4       	ldd	r9, Y+40	; 0x28
    3a48:	4f ef       	ldi	r20, 0xFF	; 255
    3a4a:	5f ef       	ldi	r21, 0xFF	; 255
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	64 22       	and	r6, r20
    3a52:	75 22       	and	r7, r21
    3a54:	86 22       	and	r8, r22
    3a56:	97 22       	and	r9, r23
    3a58:	8d a1       	ldd	r24, Y+37	; 0x25
    3a5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a5c:	af a1       	ldd	r26, Y+39	; 0x27
    3a5e:	b8 a5       	ldd	r27, Y+40	; 0x28
    3a60:	bd 01       	movw	r22, r26
    3a62:	88 27       	eor	r24, r24
    3a64:	99 27       	eor	r25, r25
    3a66:	65 96       	adiw	r28, 0x15	; 21
    3a68:	6c af       	std	Y+60, r22	; 0x3c
    3a6a:	7d af       	std	Y+61, r23	; 0x3d
    3a6c:	8e af       	std	Y+62, r24	; 0x3e
    3a6e:	9f af       	std	Y+63, r25	; 0x3f
    3a70:	65 97       	sbiw	r28, 0x15	; 21
    3a72:	c6 01       	movw	r24, r12
    3a74:	b5 01       	movw	r22, r10
    3a76:	a4 01       	movw	r20, r8
    3a78:	93 01       	movw	r18, r6
    3a7a:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    3a7e:	61 96       	adiw	r28, 0x11	; 17
    3a80:	6c af       	std	Y+60, r22	; 0x3c
    3a82:	7d af       	std	Y+61, r23	; 0x3d
    3a84:	8e af       	std	Y+62, r24	; 0x3e
    3a86:	9f af       	std	Y+63, r25	; 0x3f
    3a88:	61 97       	sbiw	r28, 0x11	; 17
    3a8a:	c6 01       	movw	r24, r12
    3a8c:	b5 01       	movw	r22, r10
    3a8e:	65 96       	adiw	r28, 0x15	; 21
    3a90:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a92:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a94:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a96:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a98:	65 97       	sbiw	r28, 0x15	; 21
    3a9a:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    3a9e:	1b 01       	movw	r2, r22
    3aa0:	2c 01       	movw	r4, r24
    3aa2:	c8 01       	movw	r24, r16
    3aa4:	b7 01       	movw	r22, r14
    3aa6:	a4 01       	movw	r20, r8
    3aa8:	93 01       	movw	r18, r6
    3aaa:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    3aae:	5b 01       	movw	r10, r22
    3ab0:	6c 01       	movw	r12, r24
    3ab2:	c8 01       	movw	r24, r16
    3ab4:	b7 01       	movw	r22, r14
    3ab6:	65 96       	adiw	r28, 0x15	; 21
    3ab8:	2c ad       	ldd	r18, Y+60	; 0x3c
    3aba:	3d ad       	ldd	r19, Y+61	; 0x3d
    3abc:	4e ad       	ldd	r20, Y+62	; 0x3e
    3abe:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ac0:	65 97       	sbiw	r28, 0x15	; 21
    3ac2:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <__mulsi3>
    3ac6:	7b 01       	movw	r14, r22
    3ac8:	8c 01       	movw	r16, r24
    3aca:	a6 01       	movw	r20, r12
    3acc:	95 01       	movw	r18, r10
    3ace:	22 0d       	add	r18, r2
    3ad0:	33 1d       	adc	r19, r3
    3ad2:	44 1d       	adc	r20, r4
    3ad4:	55 1d       	adc	r21, r5
    3ad6:	61 96       	adiw	r28, 0x11	; 17
    3ad8:	6c ac       	ldd	r6, Y+60	; 0x3c
    3ada:	7d ac       	ldd	r7, Y+61	; 0x3d
    3adc:	8e ac       	ldd	r8, Y+62	; 0x3e
    3ade:	9f ac       	ldd	r9, Y+63	; 0x3f
    3ae0:	61 97       	sbiw	r28, 0x11	; 17
    3ae2:	c4 01       	movw	r24, r8
    3ae4:	aa 27       	eor	r26, r26
    3ae6:	bb 27       	eor	r27, r27
    3ae8:	28 0f       	add	r18, r24
    3aea:	39 1f       	adc	r19, r25
    3aec:	4a 1f       	adc	r20, r26
    3aee:	5b 1f       	adc	r21, r27
    3af0:	2a 15       	cp	r18, r10
    3af2:	3b 05       	cpc	r19, r11
    3af4:	4c 05       	cpc	r20, r12
    3af6:	5d 05       	cpc	r21, r13
    3af8:	48 f4       	brcc	.+18     	; 0x3b0c <__umoddi3+0xb70>
    3afa:	81 2c       	mov	r8, r1
    3afc:	91 2c       	mov	r9, r1
    3afe:	e1 e0       	ldi	r30, 0x01	; 1
    3b00:	ae 2e       	mov	r10, r30
    3b02:	b1 2c       	mov	r11, r1
    3b04:	e8 0c       	add	r14, r8
    3b06:	f9 1c       	adc	r15, r9
    3b08:	0a 1d       	adc	r16, r10
    3b0a:	1b 1d       	adc	r17, r11
    3b0c:	ca 01       	movw	r24, r20
    3b0e:	aa 27       	eor	r26, r26
    3b10:	bb 27       	eor	r27, r27
    3b12:	57 01       	movw	r10, r14
    3b14:	68 01       	movw	r12, r16
    3b16:	a8 0e       	add	r10, r24
    3b18:	b9 1e       	adc	r11, r25
    3b1a:	ca 1e       	adc	r12, r26
    3b1c:	db 1e       	adc	r13, r27
    3b1e:	a9 01       	movw	r20, r18
    3b20:	33 27       	eor	r19, r19
    3b22:	22 27       	eor	r18, r18
    3b24:	61 96       	adiw	r28, 0x11	; 17
    3b26:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b28:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b2e:	61 97       	sbiw	r28, 0x11	; 17
    3b30:	a0 70       	andi	r26, 0x00	; 0
    3b32:	b0 70       	andi	r27, 0x00	; 0
    3b34:	28 0f       	add	r18, r24
    3b36:	39 1f       	adc	r19, r25
    3b38:	4a 1f       	adc	r20, r26
    3b3a:	5b 1f       	adc	r21, r27
    3b3c:	e9 8c       	ldd	r14, Y+25	; 0x19
    3b3e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3b40:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3b42:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3b44:	ea 14       	cp	r14, r10
    3b46:	fb 04       	cpc	r15, r11
    3b48:	0c 05       	cpc	r16, r12
    3b4a:	1d 05       	cpc	r17, r13
    3b4c:	70 f0       	brcs	.+28     	; 0x3b6a <__umoddi3+0xbce>
    3b4e:	ae 14       	cp	r10, r14
    3b50:	bf 04       	cpc	r11, r15
    3b52:	c0 06       	cpc	r12, r16
    3b54:	d1 06       	cpc	r13, r17
    3b56:	69 f5       	brne	.+90     	; 0x3bb2 <__umoddi3+0xc16>
    3b58:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b5a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b5e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b60:	62 17       	cp	r22, r18
    3b62:	73 07       	cpc	r23, r19
    3b64:	84 07       	cpc	r24, r20
    3b66:	95 07       	cpc	r25, r21
    3b68:	20 f5       	brcc	.+72     	; 0x3bb2 <__umoddi3+0xc16>
    3b6a:	da 01       	movw	r26, r20
    3b6c:	c9 01       	movw	r24, r18
    3b6e:	6d a0       	ldd	r6, Y+37	; 0x25
    3b70:	7e a0       	ldd	r7, Y+38	; 0x26
    3b72:	8f a0       	ldd	r8, Y+39	; 0x27
    3b74:	98 a4       	ldd	r9, Y+40	; 0x28
    3b76:	86 19       	sub	r24, r6
    3b78:	97 09       	sbc	r25, r7
    3b7a:	a8 09       	sbc	r26, r8
    3b7c:	b9 09       	sbc	r27, r9
    3b7e:	e9 a4       	ldd	r14, Y+41	; 0x29
    3b80:	fa a4       	ldd	r15, Y+42	; 0x2a
    3b82:	0b a5       	ldd	r16, Y+43	; 0x2b
    3b84:	1c a5       	ldd	r17, Y+44	; 0x2c
    3b86:	ae 18       	sub	r10, r14
    3b88:	bf 08       	sbc	r11, r15
    3b8a:	c0 0a       	sbc	r12, r16
    3b8c:	d1 0a       	sbc	r13, r17
    3b8e:	ee 24       	eor	r14, r14
    3b90:	ff 24       	eor	r15, r15
    3b92:	87 01       	movw	r16, r14
    3b94:	28 17       	cp	r18, r24
    3b96:	39 07       	cpc	r19, r25
    3b98:	4a 07       	cpc	r20, r26
    3b9a:	5b 07       	cpc	r21, r27
    3b9c:	28 f4       	brcc	.+10     	; 0x3ba8 <__umoddi3+0xc0c>
    3b9e:	21 e0       	ldi	r18, 0x01	; 1
    3ba0:	e2 2e       	mov	r14, r18
    3ba2:	f1 2c       	mov	r15, r1
    3ba4:	01 2d       	mov	r16, r1
    3ba6:	11 2d       	mov	r17, r1
    3ba8:	ae 18       	sub	r10, r14
    3baa:	bf 08       	sbc	r11, r15
    3bac:	c0 0a       	sbc	r12, r16
    3bae:	d1 0a       	sbc	r13, r17
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <__umoddi3+0xc1a>
    3bb2:	da 01       	movw	r26, r20
    3bb4:	c9 01       	movw	r24, r18
    3bb6:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3bb8:	7e 8c       	ldd	r7, Y+30	; 0x1e
    3bba:	8f 8c       	ldd	r8, Y+31	; 0x1f
    3bbc:	98 a0       	ldd	r9, Y+32	; 0x20
    3bbe:	68 1a       	sub	r6, r24
    3bc0:	79 0a       	sbc	r7, r25
    3bc2:	8a 0a       	sbc	r8, r26
    3bc4:	9b 0a       	sbc	r9, r27
    3bc6:	49 8d       	ldd	r20, Y+25	; 0x19
    3bc8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3bca:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3bcc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3bce:	4a 19       	sub	r20, r10
    3bd0:	5b 09       	sbc	r21, r11
    3bd2:	6c 09       	sbc	r22, r12
    3bd4:	7d 09       	sbc	r23, r13
    3bd6:	5a 01       	movw	r10, r20
    3bd8:	6b 01       	movw	r12, r22
    3bda:	22 24       	eor	r2, r2
    3bdc:	33 24       	eor	r3, r3
    3bde:	21 01       	movw	r4, r2
    3be0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3be2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be6:	98 a1       	ldd	r25, Y+32	; 0x20
    3be8:	66 15       	cp	r22, r6
    3bea:	77 05       	cpc	r23, r7
    3bec:	88 05       	cpc	r24, r8
    3bee:	99 05       	cpc	r25, r9
    3bf0:	28 f4       	brcc	.+10     	; 0x3bfc <__umoddi3+0xc60>
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	28 2e       	mov	r2, r24
    3bf6:	31 2c       	mov	r3, r1
    3bf8:	41 2c       	mov	r4, r1
    3bfa:	51 2c       	mov	r5, r1
    3bfc:	86 01       	movw	r16, r12
    3bfe:	75 01       	movw	r14, r10
    3c00:	e2 18       	sub	r14, r2
    3c02:	f3 08       	sbc	r15, r3
    3c04:	04 09       	sbc	r16, r4
    3c06:	15 09       	sbc	r17, r5
    3c08:	a8 01       	movw	r20, r16
    3c0a:	97 01       	movw	r18, r14
    3c0c:	66 96       	adiw	r28, 0x16	; 22
    3c0e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c10:	66 97       	sbiw	r28, 0x16	; 22
    3c12:	04 c0       	rjmp	.+8      	; 0x3c1c <__umoddi3+0xc80>
    3c14:	22 0f       	add	r18, r18
    3c16:	33 1f       	adc	r19, r19
    3c18:	44 1f       	adc	r20, r20
    3c1a:	55 1f       	adc	r21, r21
    3c1c:	0a 94       	dec	r0
    3c1e:	d2 f7       	brpl	.-12     	; 0x3c14 <__umoddi3+0xc78>
    3c20:	d4 01       	movw	r26, r8
    3c22:	c3 01       	movw	r24, r6
    3c24:	67 96       	adiw	r28, 0x17	; 23
    3c26:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c28:	67 97       	sbiw	r28, 0x17	; 23
    3c2a:	04 c0       	rjmp	.+8      	; 0x3c34 <__umoddi3+0xc98>
    3c2c:	b6 95       	lsr	r27
    3c2e:	a7 95       	ror	r26
    3c30:	97 95       	ror	r25
    3c32:	87 95       	ror	r24
    3c34:	0a 94       	dec	r0
    3c36:	d2 f7       	brpl	.-12     	; 0x3c2c <__umoddi3+0xc90>
    3c38:	28 2b       	or	r18, r24
    3c3a:	39 2b       	or	r19, r25
    3c3c:	4a 2b       	or	r20, r26
    3c3e:	5b 2b       	or	r21, r27
    3c40:	29 8b       	std	Y+17, r18	; 0x11
    3c42:	3a 8b       	std	Y+18, r19	; 0x12
    3c44:	4b 8b       	std	Y+19, r20	; 0x13
    3c46:	5c 8b       	std	Y+20, r21	; 0x14
    3c48:	67 96       	adiw	r28, 0x17	; 23
    3c4a:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c4c:	67 97       	sbiw	r28, 0x17	; 23
    3c4e:	04 c0       	rjmp	.+8      	; 0x3c58 <__umoddi3+0xcbc>
    3c50:	16 95       	lsr	r17
    3c52:	07 95       	ror	r16
    3c54:	f7 94       	ror	r15
    3c56:	e7 94       	ror	r14
    3c58:	0a 94       	dec	r0
    3c5a:	d2 f7       	brpl	.-12     	; 0x3c50 <__umoddi3+0xcb4>
    3c5c:	ed 8a       	std	Y+21, r14	; 0x15
    3c5e:	fe 8a       	std	Y+22, r15	; 0x16
    3c60:	0f 8b       	std	Y+23, r16	; 0x17
    3c62:	18 8f       	std	Y+24, r17	; 0x18
    3c64:	3a 89       	ldd	r19, Y+18	; 0x12
    3c66:	4b 89       	ldd	r20, Y+19	; 0x13
    3c68:	5c 89       	ldd	r21, Y+20	; 0x14
    3c6a:	6e 2d       	mov	r22, r14
    3c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c70:	98 8d       	ldd	r25, Y+24	; 0x18
    3c72:	c5 5a       	subi	r28, 0xA5	; 165
    3c74:	df 4f       	sbci	r29, 0xFF	; 255
    3c76:	e2 e1       	ldi	r30, 0x12	; 18
    3c78:	0c 94 0b 3e 	jmp	0x7c16	; 0x7c16 <__epilogue_restores__>

00003c7c <_fpadd_parts>:
    3c7c:	a0 e0       	ldi	r26, 0x00	; 0
    3c7e:	b0 e0       	ldi	r27, 0x00	; 0
    3c80:	e4 e4       	ldi	r30, 0x44	; 68
    3c82:	fe e1       	ldi	r31, 0x1E	; 30
    3c84:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__prologue_saves__>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	2b 01       	movw	r4, r22
    3c8c:	fa 01       	movw	r30, r20
    3c8e:	9c 91       	ld	r25, X
    3c90:	92 30       	cpi	r25, 0x02	; 2
    3c92:	08 f4       	brcc	.+2      	; 0x3c96 <_fpadd_parts+0x1a>
    3c94:	39 c1       	rjmp	.+626    	; 0x3f08 <_fpadd_parts+0x28c>
    3c96:	eb 01       	movw	r28, r22
    3c98:	88 81       	ld	r24, Y
    3c9a:	82 30       	cpi	r24, 0x02	; 2
    3c9c:	08 f4       	brcc	.+2      	; 0x3ca0 <_fpadd_parts+0x24>
    3c9e:	33 c1       	rjmp	.+614    	; 0x3f06 <_fpadd_parts+0x28a>
    3ca0:	94 30       	cpi	r25, 0x04	; 4
    3ca2:	69 f4       	brne	.+26     	; 0x3cbe <_fpadd_parts+0x42>
    3ca4:	84 30       	cpi	r24, 0x04	; 4
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <_fpadd_parts+0x2e>
    3ca8:	2f c1       	rjmp	.+606    	; 0x3f08 <_fpadd_parts+0x28c>
    3caa:	11 96       	adiw	r26, 0x01	; 1
    3cac:	9c 91       	ld	r25, X
    3cae:	11 97       	sbiw	r26, 0x01	; 1
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	98 17       	cp	r25, r24
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <_fpadd_parts+0x3c>
    3cb6:	28 c1       	rjmp	.+592    	; 0x3f08 <_fpadd_parts+0x28c>
    3cb8:	a5 e6       	ldi	r26, 0x65	; 101
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	25 c1       	rjmp	.+586    	; 0x3f08 <_fpadd_parts+0x28c>
    3cbe:	84 30       	cpi	r24, 0x04	; 4
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <_fpadd_parts+0x48>
    3cc2:	21 c1       	rjmp	.+578    	; 0x3f06 <_fpadd_parts+0x28a>
    3cc4:	82 30       	cpi	r24, 0x02	; 2
    3cc6:	a9 f4       	brne	.+42     	; 0x3cf2 <_fpadd_parts+0x76>
    3cc8:	92 30       	cpi	r25, 0x02	; 2
    3cca:	09 f0       	breq	.+2      	; 0x3cce <_fpadd_parts+0x52>
    3ccc:	1d c1       	rjmp	.+570    	; 0x3f08 <_fpadd_parts+0x28c>
    3cce:	9a 01       	movw	r18, r20
    3cd0:	ad 01       	movw	r20, r26
    3cd2:	88 e0       	ldi	r24, 0x08	; 8
    3cd4:	ea 01       	movw	r28, r20
    3cd6:	09 90       	ld	r0, Y+
    3cd8:	ae 01       	movw	r20, r28
    3cda:	e9 01       	movw	r28, r18
    3cdc:	09 92       	st	Y+, r0
    3cde:	9e 01       	movw	r18, r28
    3ce0:	81 50       	subi	r24, 0x01	; 1
    3ce2:	c1 f7       	brne	.-16     	; 0x3cd4 <_fpadd_parts+0x58>
    3ce4:	e2 01       	movw	r28, r4
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	9c 91       	ld	r25, X
    3cec:	89 23       	and	r24, r25
    3cee:	81 83       	std	Z+1, r24	; 0x01
    3cf0:	08 c1       	rjmp	.+528    	; 0x3f02 <_fpadd_parts+0x286>
    3cf2:	92 30       	cpi	r25, 0x02	; 2
    3cf4:	09 f4       	brne	.+2      	; 0x3cf8 <_fpadd_parts+0x7c>
    3cf6:	07 c1       	rjmp	.+526    	; 0x3f06 <_fpadd_parts+0x28a>
    3cf8:	12 96       	adiw	r26, 0x02	; 2
    3cfa:	2d 90       	ld	r2, X+
    3cfc:	3c 90       	ld	r3, X
    3cfe:	13 97       	sbiw	r26, 0x03	; 3
    3d00:	eb 01       	movw	r28, r22
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	9b 81       	ldd	r25, Y+3	; 0x03
    3d06:	14 96       	adiw	r26, 0x04	; 4
    3d08:	ad 90       	ld	r10, X+
    3d0a:	bd 90       	ld	r11, X+
    3d0c:	cd 90       	ld	r12, X+
    3d0e:	dc 90       	ld	r13, X
    3d10:	17 97       	sbiw	r26, 0x07	; 7
    3d12:	ec 80       	ldd	r14, Y+4	; 0x04
    3d14:	fd 80       	ldd	r15, Y+5	; 0x05
    3d16:	0e 81       	ldd	r16, Y+6	; 0x06
    3d18:	1f 81       	ldd	r17, Y+7	; 0x07
    3d1a:	91 01       	movw	r18, r2
    3d1c:	28 1b       	sub	r18, r24
    3d1e:	39 0b       	sbc	r19, r25
    3d20:	b9 01       	movw	r22, r18
    3d22:	37 ff       	sbrs	r19, 7
    3d24:	04 c0       	rjmp	.+8      	; 0x3d2e <_fpadd_parts+0xb2>
    3d26:	66 27       	eor	r22, r22
    3d28:	77 27       	eor	r23, r23
    3d2a:	62 1b       	sub	r22, r18
    3d2c:	73 0b       	sbc	r23, r19
    3d2e:	60 32       	cpi	r22, 0x20	; 32
    3d30:	71 05       	cpc	r23, r1
    3d32:	0c f0       	brlt	.+2      	; 0x3d36 <_fpadd_parts+0xba>
    3d34:	61 c0       	rjmp	.+194    	; 0x3df8 <_fpadd_parts+0x17c>
    3d36:	12 16       	cp	r1, r18
    3d38:	13 06       	cpc	r1, r19
    3d3a:	6c f5       	brge	.+90     	; 0x3d96 <_fpadd_parts+0x11a>
    3d3c:	37 01       	movw	r6, r14
    3d3e:	48 01       	movw	r8, r16
    3d40:	06 2e       	mov	r0, r22
    3d42:	04 c0       	rjmp	.+8      	; 0x3d4c <_fpadd_parts+0xd0>
    3d44:	96 94       	lsr	r9
    3d46:	87 94       	ror	r8
    3d48:	77 94       	ror	r7
    3d4a:	67 94       	ror	r6
    3d4c:	0a 94       	dec	r0
    3d4e:	d2 f7       	brpl	.-12     	; 0x3d44 <_fpadd_parts+0xc8>
    3d50:	21 e0       	ldi	r18, 0x01	; 1
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	04 c0       	rjmp	.+8      	; 0x3d62 <_fpadd_parts+0xe6>
    3d5a:	22 0f       	add	r18, r18
    3d5c:	33 1f       	adc	r19, r19
    3d5e:	44 1f       	adc	r20, r20
    3d60:	55 1f       	adc	r21, r21
    3d62:	6a 95       	dec	r22
    3d64:	d2 f7       	brpl	.-12     	; 0x3d5a <_fpadd_parts+0xde>
    3d66:	21 50       	subi	r18, 0x01	; 1
    3d68:	30 40       	sbci	r19, 0x00	; 0
    3d6a:	40 40       	sbci	r20, 0x00	; 0
    3d6c:	50 40       	sbci	r21, 0x00	; 0
    3d6e:	2e 21       	and	r18, r14
    3d70:	3f 21       	and	r19, r15
    3d72:	40 23       	and	r20, r16
    3d74:	51 23       	and	r21, r17
    3d76:	21 15       	cp	r18, r1
    3d78:	31 05       	cpc	r19, r1
    3d7a:	41 05       	cpc	r20, r1
    3d7c:	51 05       	cpc	r21, r1
    3d7e:	21 f0       	breq	.+8      	; 0x3d88 <_fpadd_parts+0x10c>
    3d80:	21 e0       	ldi	r18, 0x01	; 1
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	79 01       	movw	r14, r18
    3d8a:	8a 01       	movw	r16, r20
    3d8c:	e6 28       	or	r14, r6
    3d8e:	f7 28       	or	r15, r7
    3d90:	08 29       	or	r16, r8
    3d92:	19 29       	or	r17, r9
    3d94:	3c c0       	rjmp	.+120    	; 0x3e0e <_fpadd_parts+0x192>
    3d96:	23 2b       	or	r18, r19
    3d98:	d1 f1       	breq	.+116    	; 0x3e0e <_fpadd_parts+0x192>
    3d9a:	26 0e       	add	r2, r22
    3d9c:	37 1e       	adc	r3, r23
    3d9e:	35 01       	movw	r6, r10
    3da0:	46 01       	movw	r8, r12
    3da2:	06 2e       	mov	r0, r22
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <_fpadd_parts+0x132>
    3da6:	96 94       	lsr	r9
    3da8:	87 94       	ror	r8
    3daa:	77 94       	ror	r7
    3dac:	67 94       	ror	r6
    3dae:	0a 94       	dec	r0
    3db0:	d2 f7       	brpl	.-12     	; 0x3da6 <_fpadd_parts+0x12a>
    3db2:	21 e0       	ldi	r18, 0x01	; 1
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	04 c0       	rjmp	.+8      	; 0x3dc4 <_fpadd_parts+0x148>
    3dbc:	22 0f       	add	r18, r18
    3dbe:	33 1f       	adc	r19, r19
    3dc0:	44 1f       	adc	r20, r20
    3dc2:	55 1f       	adc	r21, r21
    3dc4:	6a 95       	dec	r22
    3dc6:	d2 f7       	brpl	.-12     	; 0x3dbc <_fpadd_parts+0x140>
    3dc8:	21 50       	subi	r18, 0x01	; 1
    3dca:	30 40       	sbci	r19, 0x00	; 0
    3dcc:	40 40       	sbci	r20, 0x00	; 0
    3dce:	50 40       	sbci	r21, 0x00	; 0
    3dd0:	2a 21       	and	r18, r10
    3dd2:	3b 21       	and	r19, r11
    3dd4:	4c 21       	and	r20, r12
    3dd6:	5d 21       	and	r21, r13
    3dd8:	21 15       	cp	r18, r1
    3dda:	31 05       	cpc	r19, r1
    3ddc:	41 05       	cpc	r20, r1
    3dde:	51 05       	cpc	r21, r1
    3de0:	21 f0       	breq	.+8      	; 0x3dea <_fpadd_parts+0x16e>
    3de2:	21 e0       	ldi	r18, 0x01	; 1
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e0       	ldi	r20, 0x00	; 0
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	59 01       	movw	r10, r18
    3dec:	6a 01       	movw	r12, r20
    3dee:	a6 28       	or	r10, r6
    3df0:	b7 28       	or	r11, r7
    3df2:	c8 28       	or	r12, r8
    3df4:	d9 28       	or	r13, r9
    3df6:	0b c0       	rjmp	.+22     	; 0x3e0e <_fpadd_parts+0x192>
    3df8:	82 15       	cp	r24, r2
    3dfa:	93 05       	cpc	r25, r3
    3dfc:	2c f0       	brlt	.+10     	; 0x3e08 <_fpadd_parts+0x18c>
    3dfe:	1c 01       	movw	r2, r24
    3e00:	aa 24       	eor	r10, r10
    3e02:	bb 24       	eor	r11, r11
    3e04:	65 01       	movw	r12, r10
    3e06:	03 c0       	rjmp	.+6      	; 0x3e0e <_fpadd_parts+0x192>
    3e08:	ee 24       	eor	r14, r14
    3e0a:	ff 24       	eor	r15, r15
    3e0c:	87 01       	movw	r16, r14
    3e0e:	11 96       	adiw	r26, 0x01	; 1
    3e10:	9c 91       	ld	r25, X
    3e12:	d2 01       	movw	r26, r4
    3e14:	11 96       	adiw	r26, 0x01	; 1
    3e16:	8c 91       	ld	r24, X
    3e18:	98 17       	cp	r25, r24
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <_fpadd_parts+0x1a2>
    3e1c:	45 c0       	rjmp	.+138    	; 0x3ea8 <_fpadd_parts+0x22c>
    3e1e:	99 23       	and	r25, r25
    3e20:	39 f0       	breq	.+14     	; 0x3e30 <_fpadd_parts+0x1b4>
    3e22:	a8 01       	movw	r20, r16
    3e24:	97 01       	movw	r18, r14
    3e26:	2a 19       	sub	r18, r10
    3e28:	3b 09       	sbc	r19, r11
    3e2a:	4c 09       	sbc	r20, r12
    3e2c:	5d 09       	sbc	r21, r13
    3e2e:	06 c0       	rjmp	.+12     	; 0x3e3c <_fpadd_parts+0x1c0>
    3e30:	a6 01       	movw	r20, r12
    3e32:	95 01       	movw	r18, r10
    3e34:	2e 19       	sub	r18, r14
    3e36:	3f 09       	sbc	r19, r15
    3e38:	40 0b       	sbc	r20, r16
    3e3a:	51 0b       	sbc	r21, r17
    3e3c:	57 fd       	sbrc	r21, 7
    3e3e:	08 c0       	rjmp	.+16     	; 0x3e50 <_fpadd_parts+0x1d4>
    3e40:	11 82       	std	Z+1, r1	; 0x01
    3e42:	33 82       	std	Z+3, r3	; 0x03
    3e44:	22 82       	std	Z+2, r2	; 0x02
    3e46:	24 83       	std	Z+4, r18	; 0x04
    3e48:	35 83       	std	Z+5, r19	; 0x05
    3e4a:	46 83       	std	Z+6, r20	; 0x06
    3e4c:	57 83       	std	Z+7, r21	; 0x07
    3e4e:	1d c0       	rjmp	.+58     	; 0x3e8a <_fpadd_parts+0x20e>
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	81 83       	std	Z+1, r24	; 0x01
    3e54:	33 82       	std	Z+3, r3	; 0x03
    3e56:	22 82       	std	Z+2, r2	; 0x02
    3e58:	88 27       	eor	r24, r24
    3e5a:	99 27       	eor	r25, r25
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	82 1b       	sub	r24, r18
    3e60:	93 0b       	sbc	r25, r19
    3e62:	a4 0b       	sbc	r26, r20
    3e64:	b5 0b       	sbc	r27, r21
    3e66:	84 83       	std	Z+4, r24	; 0x04
    3e68:	95 83       	std	Z+5, r25	; 0x05
    3e6a:	a6 83       	std	Z+6, r26	; 0x06
    3e6c:	b7 83       	std	Z+7, r27	; 0x07
    3e6e:	0d c0       	rjmp	.+26     	; 0x3e8a <_fpadd_parts+0x20e>
    3e70:	22 0f       	add	r18, r18
    3e72:	33 1f       	adc	r19, r19
    3e74:	44 1f       	adc	r20, r20
    3e76:	55 1f       	adc	r21, r21
    3e78:	24 83       	std	Z+4, r18	; 0x04
    3e7a:	35 83       	std	Z+5, r19	; 0x05
    3e7c:	46 83       	std	Z+6, r20	; 0x06
    3e7e:	57 83       	std	Z+7, r21	; 0x07
    3e80:	82 81       	ldd	r24, Z+2	; 0x02
    3e82:	93 81       	ldd	r25, Z+3	; 0x03
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	93 83       	std	Z+3, r25	; 0x03
    3e88:	82 83       	std	Z+2, r24	; 0x02
    3e8a:	24 81       	ldd	r18, Z+4	; 0x04
    3e8c:	35 81       	ldd	r19, Z+5	; 0x05
    3e8e:	46 81       	ldd	r20, Z+6	; 0x06
    3e90:	57 81       	ldd	r21, Z+7	; 0x07
    3e92:	da 01       	movw	r26, r20
    3e94:	c9 01       	movw	r24, r18
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	a1 09       	sbc	r26, r1
    3e9a:	b1 09       	sbc	r27, r1
    3e9c:	8f 5f       	subi	r24, 0xFF	; 255
    3e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea0:	af 4f       	sbci	r26, 0xFF	; 255
    3ea2:	bf 43       	sbci	r27, 0x3F	; 63
    3ea4:	28 f3       	brcs	.-54     	; 0x3e70 <_fpadd_parts+0x1f4>
    3ea6:	0b c0       	rjmp	.+22     	; 0x3ebe <_fpadd_parts+0x242>
    3ea8:	91 83       	std	Z+1, r25	; 0x01
    3eaa:	33 82       	std	Z+3, r3	; 0x03
    3eac:	22 82       	std	Z+2, r2	; 0x02
    3eae:	ea 0c       	add	r14, r10
    3eb0:	fb 1c       	adc	r15, r11
    3eb2:	0c 1d       	adc	r16, r12
    3eb4:	1d 1d       	adc	r17, r13
    3eb6:	e4 82       	std	Z+4, r14	; 0x04
    3eb8:	f5 82       	std	Z+5, r15	; 0x05
    3eba:	06 83       	std	Z+6, r16	; 0x06
    3ebc:	17 83       	std	Z+7, r17	; 0x07
    3ebe:	83 e0       	ldi	r24, 0x03	; 3
    3ec0:	80 83       	st	Z, r24
    3ec2:	24 81       	ldd	r18, Z+4	; 0x04
    3ec4:	35 81       	ldd	r19, Z+5	; 0x05
    3ec6:	46 81       	ldd	r20, Z+6	; 0x06
    3ec8:	57 81       	ldd	r21, Z+7	; 0x07
    3eca:	57 ff       	sbrs	r21, 7
    3ecc:	1a c0       	rjmp	.+52     	; 0x3f02 <_fpadd_parts+0x286>
    3ece:	c9 01       	movw	r24, r18
    3ed0:	aa 27       	eor	r26, r26
    3ed2:	97 fd       	sbrc	r25, 7
    3ed4:	a0 95       	com	r26
    3ed6:	ba 2f       	mov	r27, r26
    3ed8:	81 70       	andi	r24, 0x01	; 1
    3eda:	90 70       	andi	r25, 0x00	; 0
    3edc:	a0 70       	andi	r26, 0x00	; 0
    3ede:	b0 70       	andi	r27, 0x00	; 0
    3ee0:	56 95       	lsr	r21
    3ee2:	47 95       	ror	r20
    3ee4:	37 95       	ror	r19
    3ee6:	27 95       	ror	r18
    3ee8:	82 2b       	or	r24, r18
    3eea:	93 2b       	or	r25, r19
    3eec:	a4 2b       	or	r26, r20
    3eee:	b5 2b       	or	r27, r21
    3ef0:	84 83       	std	Z+4, r24	; 0x04
    3ef2:	95 83       	std	Z+5, r25	; 0x05
    3ef4:	a6 83       	std	Z+6, r26	; 0x06
    3ef6:	b7 83       	std	Z+7, r27	; 0x07
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	93 83       	std	Z+3, r25	; 0x03
    3f00:	82 83       	std	Z+2, r24	; 0x02
    3f02:	df 01       	movw	r26, r30
    3f04:	01 c0       	rjmp	.+2      	; 0x3f08 <_fpadd_parts+0x28c>
    3f06:	d2 01       	movw	r26, r4
    3f08:	cd 01       	movw	r24, r26
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	e2 e1       	ldi	r30, 0x12	; 18
    3f10:	0c 94 0b 3e 	jmp	0x7c16	; 0x7c16 <__epilogue_restores__>

00003f14 <__subsf3>:
    3f14:	a0 e2       	ldi	r26, 0x20	; 32
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	e0 e9       	ldi	r30, 0x90	; 144
    3f1a:	ff e1       	ldi	r31, 0x1F	; 31
    3f1c:	0c 94 fb 3d 	jmp	0x7bf6	; 0x7bf6 <__prologue_saves__+0x18>
    3f20:	69 83       	std	Y+1, r22	; 0x01
    3f22:	7a 83       	std	Y+2, r23	; 0x02
    3f24:	8b 83       	std	Y+3, r24	; 0x03
    3f26:	9c 83       	std	Y+4, r25	; 0x04
    3f28:	2d 83       	std	Y+5, r18	; 0x05
    3f2a:	3e 83       	std	Y+6, r19	; 0x06
    3f2c:	4f 83       	std	Y+7, r20	; 0x07
    3f2e:	58 87       	std	Y+8, r21	; 0x08
    3f30:	e9 e0       	ldi	r30, 0x09	; 9
    3f32:	ee 2e       	mov	r14, r30
    3f34:	f1 2c       	mov	r15, r1
    3f36:	ec 0e       	add	r14, r28
    3f38:	fd 1e       	adc	r15, r29
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	01 96       	adiw	r24, 0x01	; 1
    3f3e:	b7 01       	movw	r22, r14
    3f40:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3f44:	8e 01       	movw	r16, r28
    3f46:	0f 5e       	subi	r16, 0xEF	; 239
    3f48:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	05 96       	adiw	r24, 0x05	; 5
    3f4e:	b8 01       	movw	r22, r16
    3f50:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3f54:	8a 89       	ldd	r24, Y+18	; 0x12
    3f56:	91 e0       	ldi	r25, 0x01	; 1
    3f58:	89 27       	eor	r24, r25
    3f5a:	8a 8b       	std	Y+18, r24	; 0x12
    3f5c:	c7 01       	movw	r24, r14
    3f5e:	b8 01       	movw	r22, r16
    3f60:	ae 01       	movw	r20, r28
    3f62:	47 5e       	subi	r20, 0xE7	; 231
    3f64:	5f 4f       	sbci	r21, 0xFF	; 255
    3f66:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_fpadd_parts>
    3f6a:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    3f6e:	a0 96       	adiw	r28, 0x20	; 32
    3f70:	e6 e0       	ldi	r30, 0x06	; 6
    3f72:	0c 94 17 3e 	jmp	0x7c2e	; 0x7c2e <__epilogue_restores__+0x18>

00003f76 <__addsf3>:
    3f76:	a0 e2       	ldi	r26, 0x20	; 32
    3f78:	b0 e0       	ldi	r27, 0x00	; 0
    3f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    3f7c:	ff e1       	ldi	r31, 0x1F	; 31
    3f7e:	0c 94 fb 3d 	jmp	0x7bf6	; 0x7bf6 <__prologue_saves__+0x18>
    3f82:	69 83       	std	Y+1, r22	; 0x01
    3f84:	7a 83       	std	Y+2, r23	; 0x02
    3f86:	8b 83       	std	Y+3, r24	; 0x03
    3f88:	9c 83       	std	Y+4, r25	; 0x04
    3f8a:	2d 83       	std	Y+5, r18	; 0x05
    3f8c:	3e 83       	std	Y+6, r19	; 0x06
    3f8e:	4f 83       	std	Y+7, r20	; 0x07
    3f90:	58 87       	std	Y+8, r21	; 0x08
    3f92:	f9 e0       	ldi	r31, 0x09	; 9
    3f94:	ef 2e       	mov	r14, r31
    3f96:	f1 2c       	mov	r15, r1
    3f98:	ec 0e       	add	r14, r28
    3f9a:	fd 1e       	adc	r15, r29
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	b7 01       	movw	r22, r14
    3fa2:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3fa6:	8e 01       	movw	r16, r28
    3fa8:	0f 5e       	subi	r16, 0xEF	; 239
    3faa:	1f 4f       	sbci	r17, 0xFF	; 255
    3fac:	ce 01       	movw	r24, r28
    3fae:	05 96       	adiw	r24, 0x05	; 5
    3fb0:	b8 01       	movw	r22, r16
    3fb2:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3fb6:	c7 01       	movw	r24, r14
    3fb8:	b8 01       	movw	r22, r16
    3fba:	ae 01       	movw	r20, r28
    3fbc:	47 5e       	subi	r20, 0xE7	; 231
    3fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc0:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_fpadd_parts>
    3fc4:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    3fc8:	a0 96       	adiw	r28, 0x20	; 32
    3fca:	e6 e0       	ldi	r30, 0x06	; 6
    3fcc:	0c 94 17 3e 	jmp	0x7c2e	; 0x7c2e <__epilogue_restores__+0x18>

00003fd0 <__mulsf3>:
    3fd0:	a0 e2       	ldi	r26, 0x20	; 32
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	ee ee       	ldi	r30, 0xEE	; 238
    3fd6:	ff e1       	ldi	r31, 0x1F	; 31
    3fd8:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__prologue_saves__>
    3fdc:	69 83       	std	Y+1, r22	; 0x01
    3fde:	7a 83       	std	Y+2, r23	; 0x02
    3fe0:	8b 83       	std	Y+3, r24	; 0x03
    3fe2:	9c 83       	std	Y+4, r25	; 0x04
    3fe4:	2d 83       	std	Y+5, r18	; 0x05
    3fe6:	3e 83       	std	Y+6, r19	; 0x06
    3fe8:	4f 83       	std	Y+7, r20	; 0x07
    3fea:	58 87       	std	Y+8, r21	; 0x08
    3fec:	ce 01       	movw	r24, r28
    3fee:	01 96       	adiw	r24, 0x01	; 1
    3ff0:	be 01       	movw	r22, r28
    3ff2:	67 5f       	subi	r22, 0xF7	; 247
    3ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff6:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	05 96       	adiw	r24, 0x05	; 5
    3ffe:	be 01       	movw	r22, r28
    4000:	6f 5e       	subi	r22, 0xEF	; 239
    4002:	7f 4f       	sbci	r23, 0xFF	; 255
    4004:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    4008:	99 85       	ldd	r25, Y+9	; 0x09
    400a:	92 30       	cpi	r25, 0x02	; 2
    400c:	88 f0       	brcs	.+34     	; 0x4030 <__mulsf3+0x60>
    400e:	89 89       	ldd	r24, Y+17	; 0x11
    4010:	82 30       	cpi	r24, 0x02	; 2
    4012:	c8 f0       	brcs	.+50     	; 0x4046 <__mulsf3+0x76>
    4014:	94 30       	cpi	r25, 0x04	; 4
    4016:	19 f4       	brne	.+6      	; 0x401e <__mulsf3+0x4e>
    4018:	82 30       	cpi	r24, 0x02	; 2
    401a:	51 f4       	brne	.+20     	; 0x4030 <__mulsf3+0x60>
    401c:	04 c0       	rjmp	.+8      	; 0x4026 <__mulsf3+0x56>
    401e:	84 30       	cpi	r24, 0x04	; 4
    4020:	29 f4       	brne	.+10     	; 0x402c <__mulsf3+0x5c>
    4022:	92 30       	cpi	r25, 0x02	; 2
    4024:	81 f4       	brne	.+32     	; 0x4046 <__mulsf3+0x76>
    4026:	85 e6       	ldi	r24, 0x65	; 101
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	c6 c0       	rjmp	.+396    	; 0x41b8 <__mulsf3+0x1e8>
    402c:	92 30       	cpi	r25, 0x02	; 2
    402e:	49 f4       	brne	.+18     	; 0x4042 <__mulsf3+0x72>
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	8a 89       	ldd	r24, Y+18	; 0x12
    4036:	98 13       	cpse	r25, r24
    4038:	21 e0       	ldi	r18, 0x01	; 1
    403a:	2a 87       	std	Y+10, r18	; 0x0a
    403c:	ce 01       	movw	r24, r28
    403e:	09 96       	adiw	r24, 0x09	; 9
    4040:	bb c0       	rjmp	.+374    	; 0x41b8 <__mulsf3+0x1e8>
    4042:	82 30       	cpi	r24, 0x02	; 2
    4044:	49 f4       	brne	.+18     	; 0x4058 <__mulsf3+0x88>
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	9a 85       	ldd	r25, Y+10	; 0x0a
    404a:	8a 89       	ldd	r24, Y+18	; 0x12
    404c:	98 13       	cpse	r25, r24
    404e:	21 e0       	ldi	r18, 0x01	; 1
    4050:	2a 8b       	std	Y+18, r18	; 0x12
    4052:	ce 01       	movw	r24, r28
    4054:	41 96       	adiw	r24, 0x11	; 17
    4056:	b0 c0       	rjmp	.+352    	; 0x41b8 <__mulsf3+0x1e8>
    4058:	2d 84       	ldd	r2, Y+13	; 0x0d
    405a:	3e 84       	ldd	r3, Y+14	; 0x0e
    405c:	4f 84       	ldd	r4, Y+15	; 0x0f
    405e:	58 88       	ldd	r5, Y+16	; 0x10
    4060:	6d 88       	ldd	r6, Y+21	; 0x15
    4062:	7e 88       	ldd	r7, Y+22	; 0x16
    4064:	8f 88       	ldd	r8, Y+23	; 0x17
    4066:	98 8c       	ldd	r9, Y+24	; 0x18
    4068:	ee 24       	eor	r14, r14
    406a:	ff 24       	eor	r15, r15
    406c:	87 01       	movw	r16, r14
    406e:	aa 24       	eor	r10, r10
    4070:	bb 24       	eor	r11, r11
    4072:	65 01       	movw	r12, r10
    4074:	40 e0       	ldi	r20, 0x00	; 0
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	e0 e0       	ldi	r30, 0x00	; 0
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	c1 01       	movw	r24, r2
    4082:	81 70       	andi	r24, 0x01	; 1
    4084:	90 70       	andi	r25, 0x00	; 0
    4086:	89 2b       	or	r24, r25
    4088:	e9 f0       	breq	.+58     	; 0x40c4 <__mulsf3+0xf4>
    408a:	e6 0c       	add	r14, r6
    408c:	f7 1c       	adc	r15, r7
    408e:	08 1d       	adc	r16, r8
    4090:	19 1d       	adc	r17, r9
    4092:	9a 01       	movw	r18, r20
    4094:	ab 01       	movw	r20, r22
    4096:	2a 0d       	add	r18, r10
    4098:	3b 1d       	adc	r19, r11
    409a:	4c 1d       	adc	r20, r12
    409c:	5d 1d       	adc	r21, r13
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	a0 e0       	ldi	r26, 0x00	; 0
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	e6 14       	cp	r14, r6
    40a8:	f7 04       	cpc	r15, r7
    40aa:	08 05       	cpc	r16, r8
    40ac:	19 05       	cpc	r17, r9
    40ae:	20 f4       	brcc	.+8      	; 0x40b8 <__mulsf3+0xe8>
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	a0 e0       	ldi	r26, 0x00	; 0
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	ba 01       	movw	r22, r20
    40ba:	a9 01       	movw	r20, r18
    40bc:	48 0f       	add	r20, r24
    40be:	59 1f       	adc	r21, r25
    40c0:	6a 1f       	adc	r22, r26
    40c2:	7b 1f       	adc	r23, r27
    40c4:	aa 0c       	add	r10, r10
    40c6:	bb 1c       	adc	r11, r11
    40c8:	cc 1c       	adc	r12, r12
    40ca:	dd 1c       	adc	r13, r13
    40cc:	97 fe       	sbrs	r9, 7
    40ce:	08 c0       	rjmp	.+16     	; 0x40e0 <__mulsf3+0x110>
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	a0 e0       	ldi	r26, 0x00	; 0
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	a8 2a       	or	r10, r24
    40da:	b9 2a       	or	r11, r25
    40dc:	ca 2a       	or	r12, r26
    40de:	db 2a       	or	r13, r27
    40e0:	31 96       	adiw	r30, 0x01	; 1
    40e2:	e0 32       	cpi	r30, 0x20	; 32
    40e4:	f1 05       	cpc	r31, r1
    40e6:	49 f0       	breq	.+18     	; 0x40fa <__mulsf3+0x12a>
    40e8:	66 0c       	add	r6, r6
    40ea:	77 1c       	adc	r7, r7
    40ec:	88 1c       	adc	r8, r8
    40ee:	99 1c       	adc	r9, r9
    40f0:	56 94       	lsr	r5
    40f2:	47 94       	ror	r4
    40f4:	37 94       	ror	r3
    40f6:	27 94       	ror	r2
    40f8:	c3 cf       	rjmp	.-122    	; 0x4080 <__mulsf3+0xb0>
    40fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    40fc:	ea 89       	ldd	r30, Y+18	; 0x12
    40fe:	2b 89       	ldd	r18, Y+19	; 0x13
    4100:	3c 89       	ldd	r19, Y+20	; 0x14
    4102:	8b 85       	ldd	r24, Y+11	; 0x0b
    4104:	9c 85       	ldd	r25, Y+12	; 0x0c
    4106:	28 0f       	add	r18, r24
    4108:	39 1f       	adc	r19, r25
    410a:	2e 5f       	subi	r18, 0xFE	; 254
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	17 c0       	rjmp	.+46     	; 0x413e <__mulsf3+0x16e>
    4110:	ca 01       	movw	r24, r20
    4112:	81 70       	andi	r24, 0x01	; 1
    4114:	90 70       	andi	r25, 0x00	; 0
    4116:	89 2b       	or	r24, r25
    4118:	61 f0       	breq	.+24     	; 0x4132 <__mulsf3+0x162>
    411a:	16 95       	lsr	r17
    411c:	07 95       	ror	r16
    411e:	f7 94       	ror	r15
    4120:	e7 94       	ror	r14
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	a0 e0       	ldi	r26, 0x00	; 0
    4128:	b0 e8       	ldi	r27, 0x80	; 128
    412a:	e8 2a       	or	r14, r24
    412c:	f9 2a       	or	r15, r25
    412e:	0a 2b       	or	r16, r26
    4130:	1b 2b       	or	r17, r27
    4132:	76 95       	lsr	r23
    4134:	67 95       	ror	r22
    4136:	57 95       	ror	r21
    4138:	47 95       	ror	r20
    413a:	2f 5f       	subi	r18, 0xFF	; 255
    413c:	3f 4f       	sbci	r19, 0xFF	; 255
    413e:	77 fd       	sbrc	r23, 7
    4140:	e7 cf       	rjmp	.-50     	; 0x4110 <__mulsf3+0x140>
    4142:	0c c0       	rjmp	.+24     	; 0x415c <__mulsf3+0x18c>
    4144:	44 0f       	add	r20, r20
    4146:	55 1f       	adc	r21, r21
    4148:	66 1f       	adc	r22, r22
    414a:	77 1f       	adc	r23, r23
    414c:	17 fd       	sbrc	r17, 7
    414e:	41 60       	ori	r20, 0x01	; 1
    4150:	ee 0c       	add	r14, r14
    4152:	ff 1c       	adc	r15, r15
    4154:	00 1f       	adc	r16, r16
    4156:	11 1f       	adc	r17, r17
    4158:	21 50       	subi	r18, 0x01	; 1
    415a:	30 40       	sbci	r19, 0x00	; 0
    415c:	40 30       	cpi	r20, 0x00	; 0
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	59 07       	cpc	r21, r25
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	69 07       	cpc	r22, r25
    4166:	90 e4       	ldi	r25, 0x40	; 64
    4168:	79 07       	cpc	r23, r25
    416a:	60 f3       	brcs	.-40     	; 0x4144 <__mulsf3+0x174>
    416c:	2b 8f       	std	Y+27, r18	; 0x1b
    416e:	3c 8f       	std	Y+28, r19	; 0x1c
    4170:	db 01       	movw	r26, r22
    4172:	ca 01       	movw	r24, r20
    4174:	8f 77       	andi	r24, 0x7F	; 127
    4176:	90 70       	andi	r25, 0x00	; 0
    4178:	a0 70       	andi	r26, 0x00	; 0
    417a:	b0 70       	andi	r27, 0x00	; 0
    417c:	80 34       	cpi	r24, 0x40	; 64
    417e:	91 05       	cpc	r25, r1
    4180:	a1 05       	cpc	r26, r1
    4182:	b1 05       	cpc	r27, r1
    4184:	61 f4       	brne	.+24     	; 0x419e <__mulsf3+0x1ce>
    4186:	47 fd       	sbrc	r20, 7
    4188:	0a c0       	rjmp	.+20     	; 0x419e <__mulsf3+0x1ce>
    418a:	e1 14       	cp	r14, r1
    418c:	f1 04       	cpc	r15, r1
    418e:	01 05       	cpc	r16, r1
    4190:	11 05       	cpc	r17, r1
    4192:	29 f0       	breq	.+10     	; 0x419e <__mulsf3+0x1ce>
    4194:	40 5c       	subi	r20, 0xC0	; 192
    4196:	5f 4f       	sbci	r21, 0xFF	; 255
    4198:	6f 4f       	sbci	r22, 0xFF	; 255
    419a:	7f 4f       	sbci	r23, 0xFF	; 255
    419c:	40 78       	andi	r20, 0x80	; 128
    419e:	1a 8e       	std	Y+26, r1	; 0x1a
    41a0:	fe 17       	cp	r31, r30
    41a2:	11 f0       	breq	.+4      	; 0x41a8 <__mulsf3+0x1d8>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	8a 8f       	std	Y+26, r24	; 0x1a
    41a8:	4d 8f       	std	Y+29, r20	; 0x1d
    41aa:	5e 8f       	std	Y+30, r21	; 0x1e
    41ac:	6f 8f       	std	Y+31, r22	; 0x1f
    41ae:	78 a3       	std	Y+32, r23	; 0x20
    41b0:	83 e0       	ldi	r24, 0x03	; 3
    41b2:	89 8f       	std	Y+25, r24	; 0x19
    41b4:	ce 01       	movw	r24, r28
    41b6:	49 96       	adiw	r24, 0x19	; 25
    41b8:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    41bc:	a0 96       	adiw	r28, 0x20	; 32
    41be:	e2 e1       	ldi	r30, 0x12	; 18
    41c0:	0c 94 0b 3e 	jmp	0x7c16	; 0x7c16 <__epilogue_restores__>

000041c4 <__gesf2>:
    41c4:	a8 e1       	ldi	r26, 0x18	; 24
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	e8 ee       	ldi	r30, 0xE8	; 232
    41ca:	f0 e2       	ldi	r31, 0x20	; 32
    41cc:	0c 94 fb 3d 	jmp	0x7bf6	; 0x7bf6 <__prologue_saves__+0x18>
    41d0:	69 83       	std	Y+1, r22	; 0x01
    41d2:	7a 83       	std	Y+2, r23	; 0x02
    41d4:	8b 83       	std	Y+3, r24	; 0x03
    41d6:	9c 83       	std	Y+4, r25	; 0x04
    41d8:	2d 83       	std	Y+5, r18	; 0x05
    41da:	3e 83       	std	Y+6, r19	; 0x06
    41dc:	4f 83       	std	Y+7, r20	; 0x07
    41de:	58 87       	std	Y+8, r21	; 0x08
    41e0:	89 e0       	ldi	r24, 0x09	; 9
    41e2:	e8 2e       	mov	r14, r24
    41e4:	f1 2c       	mov	r15, r1
    41e6:	ec 0e       	add	r14, r28
    41e8:	fd 1e       	adc	r15, r29
    41ea:	ce 01       	movw	r24, r28
    41ec:	01 96       	adiw	r24, 0x01	; 1
    41ee:	b7 01       	movw	r22, r14
    41f0:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    41f4:	8e 01       	movw	r16, r28
    41f6:	0f 5e       	subi	r16, 0xEF	; 239
    41f8:	1f 4f       	sbci	r17, 0xFF	; 255
    41fa:	ce 01       	movw	r24, r28
    41fc:	05 96       	adiw	r24, 0x05	; 5
    41fe:	b8 01       	movw	r22, r16
    4200:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    4204:	89 85       	ldd	r24, Y+9	; 0x09
    4206:	82 30       	cpi	r24, 0x02	; 2
    4208:	40 f0       	brcs	.+16     	; 0x421a <__gesf2+0x56>
    420a:	89 89       	ldd	r24, Y+17	; 0x11
    420c:	82 30       	cpi	r24, 0x02	; 2
    420e:	28 f0       	brcs	.+10     	; 0x421a <__gesf2+0x56>
    4210:	c7 01       	movw	r24, r14
    4212:	b8 01       	movw	r22, r16
    4214:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__fpcmp_parts_f>
    4218:	01 c0       	rjmp	.+2      	; 0x421c <__gesf2+0x58>
    421a:	8f ef       	ldi	r24, 0xFF	; 255
    421c:	68 96       	adiw	r28, 0x18	; 24
    421e:	e6 e0       	ldi	r30, 0x06	; 6
    4220:	0c 94 17 3e 	jmp	0x7c2e	; 0x7c2e <__epilogue_restores__+0x18>

00004224 <__fixsfsi>:
    4224:	ac e0       	ldi	r26, 0x0C	; 12
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	e8 e1       	ldi	r30, 0x18	; 24
    422a:	f1 e2       	ldi	r31, 0x21	; 33
    422c:	0c 94 ff 3d 	jmp	0x7bfe	; 0x7bfe <__prologue_saves__+0x20>
    4230:	69 83       	std	Y+1, r22	; 0x01
    4232:	7a 83       	std	Y+2, r23	; 0x02
    4234:	8b 83       	std	Y+3, r24	; 0x03
    4236:	9c 83       	std	Y+4, r25	; 0x04
    4238:	ce 01       	movw	r24, r28
    423a:	01 96       	adiw	r24, 0x01	; 1
    423c:	be 01       	movw	r22, r28
    423e:	6b 5f       	subi	r22, 0xFB	; 251
    4240:	7f 4f       	sbci	r23, 0xFF	; 255
    4242:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    4246:	8d 81       	ldd	r24, Y+5	; 0x05
    4248:	82 30       	cpi	r24, 0x02	; 2
    424a:	61 f1       	breq	.+88     	; 0x42a4 <__fixsfsi+0x80>
    424c:	82 30       	cpi	r24, 0x02	; 2
    424e:	50 f1       	brcs	.+84     	; 0x42a4 <__fixsfsi+0x80>
    4250:	84 30       	cpi	r24, 0x04	; 4
    4252:	21 f4       	brne	.+8      	; 0x425c <__fixsfsi+0x38>
    4254:	8e 81       	ldd	r24, Y+6	; 0x06
    4256:	88 23       	and	r24, r24
    4258:	51 f1       	breq	.+84     	; 0x42ae <__fixsfsi+0x8a>
    425a:	2e c0       	rjmp	.+92     	; 0x42b8 <__fixsfsi+0x94>
    425c:	2f 81       	ldd	r18, Y+7	; 0x07
    425e:	38 85       	ldd	r19, Y+8	; 0x08
    4260:	37 fd       	sbrc	r19, 7
    4262:	20 c0       	rjmp	.+64     	; 0x42a4 <__fixsfsi+0x80>
    4264:	6e 81       	ldd	r22, Y+6	; 0x06
    4266:	2f 31       	cpi	r18, 0x1F	; 31
    4268:	31 05       	cpc	r19, r1
    426a:	1c f0       	brlt	.+6      	; 0x4272 <__fixsfsi+0x4e>
    426c:	66 23       	and	r22, r22
    426e:	f9 f0       	breq	.+62     	; 0x42ae <__fixsfsi+0x8a>
    4270:	23 c0       	rjmp	.+70     	; 0x42b8 <__fixsfsi+0x94>
    4272:	8e e1       	ldi	r24, 0x1E	; 30
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	82 1b       	sub	r24, r18
    4278:	93 0b       	sbc	r25, r19
    427a:	29 85       	ldd	r18, Y+9	; 0x09
    427c:	3a 85       	ldd	r19, Y+10	; 0x0a
    427e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4280:	5c 85       	ldd	r21, Y+12	; 0x0c
    4282:	04 c0       	rjmp	.+8      	; 0x428c <__fixsfsi+0x68>
    4284:	56 95       	lsr	r21
    4286:	47 95       	ror	r20
    4288:	37 95       	ror	r19
    428a:	27 95       	ror	r18
    428c:	8a 95       	dec	r24
    428e:	d2 f7       	brpl	.-12     	; 0x4284 <__fixsfsi+0x60>
    4290:	66 23       	and	r22, r22
    4292:	b1 f0       	breq	.+44     	; 0x42c0 <__fixsfsi+0x9c>
    4294:	50 95       	com	r21
    4296:	40 95       	com	r20
    4298:	30 95       	com	r19
    429a:	21 95       	neg	r18
    429c:	3f 4f       	sbci	r19, 0xFF	; 255
    429e:	4f 4f       	sbci	r20, 0xFF	; 255
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	0e c0       	rjmp	.+28     	; 0x42c0 <__fixsfsi+0x9c>
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	09 c0       	rjmp	.+18     	; 0x42c0 <__fixsfsi+0x9c>
    42ae:	2f ef       	ldi	r18, 0xFF	; 255
    42b0:	3f ef       	ldi	r19, 0xFF	; 255
    42b2:	4f ef       	ldi	r20, 0xFF	; 255
    42b4:	5f e7       	ldi	r21, 0x7F	; 127
    42b6:	04 c0       	rjmp	.+8      	; 0x42c0 <__fixsfsi+0x9c>
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	50 e8       	ldi	r21, 0x80	; 128
    42c0:	b9 01       	movw	r22, r18
    42c2:	ca 01       	movw	r24, r20
    42c4:	2c 96       	adiw	r28, 0x0c	; 12
    42c6:	e2 e0       	ldi	r30, 0x02	; 2
    42c8:	0c 94 1b 3e 	jmp	0x7c36	; 0x7c36 <__epilogue_restores__+0x20>

000042cc <__floatunsisf>:
    42cc:	a8 e0       	ldi	r26, 0x08	; 8
    42ce:	b0 e0       	ldi	r27, 0x00	; 0
    42d0:	ec e6       	ldi	r30, 0x6C	; 108
    42d2:	f1 e2       	ldi	r31, 0x21	; 33
    42d4:	0c 94 f7 3d 	jmp	0x7bee	; 0x7bee <__prologue_saves__+0x10>
    42d8:	7b 01       	movw	r14, r22
    42da:	8c 01       	movw	r16, r24
    42dc:	61 15       	cp	r22, r1
    42de:	71 05       	cpc	r23, r1
    42e0:	81 05       	cpc	r24, r1
    42e2:	91 05       	cpc	r25, r1
    42e4:	19 f4       	brne	.+6      	; 0x42ec <__floatunsisf+0x20>
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	89 83       	std	Y+1, r24	; 0x01
    42ea:	60 c0       	rjmp	.+192    	; 0x43ac <__floatunsisf+0xe0>
    42ec:	83 e0       	ldi	r24, 0x03	; 3
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	8e e1       	ldi	r24, 0x1E	; 30
    42f2:	c8 2e       	mov	r12, r24
    42f4:	d1 2c       	mov	r13, r1
    42f6:	dc 82       	std	Y+4, r13	; 0x04
    42f8:	cb 82       	std	Y+3, r12	; 0x03
    42fa:	ed 82       	std	Y+5, r14	; 0x05
    42fc:	fe 82       	std	Y+6, r15	; 0x06
    42fe:	0f 83       	std	Y+7, r16	; 0x07
    4300:	18 87       	std	Y+8, r17	; 0x08
    4302:	c8 01       	movw	r24, r16
    4304:	b7 01       	movw	r22, r14
    4306:	0e 94 df 21 	call	0x43be	; 0x43be <__clzsi2>
    430a:	fc 01       	movw	r30, r24
    430c:	31 97       	sbiw	r30, 0x01	; 1
    430e:	f7 ff       	sbrs	r31, 7
    4310:	3b c0       	rjmp	.+118    	; 0x4388 <__floatunsisf+0xbc>
    4312:	22 27       	eor	r18, r18
    4314:	33 27       	eor	r19, r19
    4316:	2e 1b       	sub	r18, r30
    4318:	3f 0b       	sbc	r19, r31
    431a:	57 01       	movw	r10, r14
    431c:	68 01       	movw	r12, r16
    431e:	02 2e       	mov	r0, r18
    4320:	04 c0       	rjmp	.+8      	; 0x432a <__floatunsisf+0x5e>
    4322:	d6 94       	lsr	r13
    4324:	c7 94       	ror	r12
    4326:	b7 94       	ror	r11
    4328:	a7 94       	ror	r10
    432a:	0a 94       	dec	r0
    432c:	d2 f7       	brpl	.-12     	; 0x4322 <__floatunsisf+0x56>
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	70 e0       	ldi	r23, 0x00	; 0
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	a0 e0       	ldi	r26, 0x00	; 0
    433c:	b0 e0       	ldi	r27, 0x00	; 0
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <__floatunsisf+0x7c>
    4340:	88 0f       	add	r24, r24
    4342:	99 1f       	adc	r25, r25
    4344:	aa 1f       	adc	r26, r26
    4346:	bb 1f       	adc	r27, r27
    4348:	2a 95       	dec	r18
    434a:	d2 f7       	brpl	.-12     	; 0x4340 <__floatunsisf+0x74>
    434c:	01 97       	sbiw	r24, 0x01	; 1
    434e:	a1 09       	sbc	r26, r1
    4350:	b1 09       	sbc	r27, r1
    4352:	8e 21       	and	r24, r14
    4354:	9f 21       	and	r25, r15
    4356:	a0 23       	and	r26, r16
    4358:	b1 23       	and	r27, r17
    435a:	00 97       	sbiw	r24, 0x00	; 0
    435c:	a1 05       	cpc	r26, r1
    435e:	b1 05       	cpc	r27, r1
    4360:	21 f0       	breq	.+8      	; 0x436a <__floatunsisf+0x9e>
    4362:	41 e0       	ldi	r20, 0x01	; 1
    4364:	50 e0       	ldi	r21, 0x00	; 0
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	4a 29       	or	r20, r10
    436c:	5b 29       	or	r21, r11
    436e:	6c 29       	or	r22, r12
    4370:	7d 29       	or	r23, r13
    4372:	4d 83       	std	Y+5, r20	; 0x05
    4374:	5e 83       	std	Y+6, r21	; 0x06
    4376:	6f 83       	std	Y+7, r22	; 0x07
    4378:	78 87       	std	Y+8, r23	; 0x08
    437a:	8e e1       	ldi	r24, 0x1E	; 30
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	8e 1b       	sub	r24, r30
    4380:	9f 0b       	sbc	r25, r31
    4382:	9c 83       	std	Y+4, r25	; 0x04
    4384:	8b 83       	std	Y+3, r24	; 0x03
    4386:	12 c0       	rjmp	.+36     	; 0x43ac <__floatunsisf+0xe0>
    4388:	30 97       	sbiw	r30, 0x00	; 0
    438a:	81 f0       	breq	.+32     	; 0x43ac <__floatunsisf+0xe0>
    438c:	0e 2e       	mov	r0, r30
    438e:	04 c0       	rjmp	.+8      	; 0x4398 <__floatunsisf+0xcc>
    4390:	ee 0c       	add	r14, r14
    4392:	ff 1c       	adc	r15, r15
    4394:	00 1f       	adc	r16, r16
    4396:	11 1f       	adc	r17, r17
    4398:	0a 94       	dec	r0
    439a:	d2 f7       	brpl	.-12     	; 0x4390 <__floatunsisf+0xc4>
    439c:	ed 82       	std	Y+5, r14	; 0x05
    439e:	fe 82       	std	Y+6, r15	; 0x06
    43a0:	0f 83       	std	Y+7, r16	; 0x07
    43a2:	18 87       	std	Y+8, r17	; 0x08
    43a4:	ce 1a       	sub	r12, r30
    43a6:	df 0a       	sbc	r13, r31
    43a8:	dc 82       	std	Y+4, r13	; 0x04
    43aa:	cb 82       	std	Y+3, r12	; 0x03
    43ac:	1a 82       	std	Y+2, r1	; 0x02
    43ae:	ce 01       	movw	r24, r28
    43b0:	01 96       	adiw	r24, 0x01	; 1
    43b2:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    43b6:	28 96       	adiw	r28, 0x08	; 8
    43b8:	ea e0       	ldi	r30, 0x0A	; 10
    43ba:	0c 94 13 3e 	jmp	0x7c26	; 0x7c26 <__epilogue_restores__+0x10>

000043be <__clzsi2>:
    43be:	ef 92       	push	r14
    43c0:	ff 92       	push	r15
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	7b 01       	movw	r14, r22
    43c8:	8c 01       	movw	r16, r24
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	e8 16       	cp	r14, r24
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	f8 06       	cpc	r15, r24
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	08 07       	cpc	r16, r24
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	18 07       	cpc	r17, r24
    43da:	88 f4       	brcc	.+34     	; 0x43fe <__clzsi2+0x40>
    43dc:	8f ef       	ldi	r24, 0xFF	; 255
    43de:	e8 16       	cp	r14, r24
    43e0:	f1 04       	cpc	r15, r1
    43e2:	01 05       	cpc	r16, r1
    43e4:	11 05       	cpc	r17, r1
    43e6:	31 f0       	breq	.+12     	; 0x43f4 <__clzsi2+0x36>
    43e8:	28 f0       	brcs	.+10     	; 0x43f4 <__clzsi2+0x36>
    43ea:	88 e0       	ldi	r24, 0x08	; 8
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	a0 e0       	ldi	r26, 0x00	; 0
    43f0:	b0 e0       	ldi	r27, 0x00	; 0
    43f2:	17 c0       	rjmp	.+46     	; 0x4422 <__clzsi2+0x64>
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	a0 e0       	ldi	r26, 0x00	; 0
    43fa:	b0 e0       	ldi	r27, 0x00	; 0
    43fc:	12 c0       	rjmp	.+36     	; 0x4422 <__clzsi2+0x64>
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    4400:	e8 16       	cp	r14, r24
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	f8 06       	cpc	r15, r24
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	08 07       	cpc	r16, r24
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	18 07       	cpc	r17, r24
    440e:	28 f0       	brcs	.+10     	; 0x441a <__clzsi2+0x5c>
    4410:	88 e1       	ldi	r24, 0x18	; 24
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	a0 e0       	ldi	r26, 0x00	; 0
    4416:	b0 e0       	ldi	r27, 0x00	; 0
    4418:	04 c0       	rjmp	.+8      	; 0x4422 <__clzsi2+0x64>
    441a:	80 e1       	ldi	r24, 0x10	; 16
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	a0 e0       	ldi	r26, 0x00	; 0
    4420:	b0 e0       	ldi	r27, 0x00	; 0
    4422:	20 e2       	ldi	r18, 0x20	; 32
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e0       	ldi	r20, 0x00	; 0
    4428:	50 e0       	ldi	r21, 0x00	; 0
    442a:	28 1b       	sub	r18, r24
    442c:	39 0b       	sbc	r19, r25
    442e:	4a 0b       	sbc	r20, r26
    4430:	5b 0b       	sbc	r21, r27
    4432:	04 c0       	rjmp	.+8      	; 0x443c <__clzsi2+0x7e>
    4434:	16 95       	lsr	r17
    4436:	07 95       	ror	r16
    4438:	f7 94       	ror	r15
    443a:	e7 94       	ror	r14
    443c:	8a 95       	dec	r24
    443e:	d2 f7       	brpl	.-12     	; 0x4434 <__clzsi2+0x76>
    4440:	f7 01       	movw	r30, r14
    4442:	e3 59       	subi	r30, 0x93	; 147
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	80 81       	ld	r24, Z
    4448:	28 1b       	sub	r18, r24
    444a:	31 09       	sbc	r19, r1
    444c:	41 09       	sbc	r20, r1
    444e:	51 09       	sbc	r21, r1
    4450:	c9 01       	movw	r24, r18
    4452:	1f 91       	pop	r17
    4454:	0f 91       	pop	r16
    4456:	ff 90       	pop	r15
    4458:	ef 90       	pop	r14
    445a:	08 95       	ret

0000445c <__pack_f>:
    445c:	df 92       	push	r13
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	fc 01       	movw	r30, r24
    4468:	e4 80       	ldd	r14, Z+4	; 0x04
    446a:	f5 80       	ldd	r15, Z+5	; 0x05
    446c:	06 81       	ldd	r16, Z+6	; 0x06
    446e:	17 81       	ldd	r17, Z+7	; 0x07
    4470:	d1 80       	ldd	r13, Z+1	; 0x01
    4472:	80 81       	ld	r24, Z
    4474:	82 30       	cpi	r24, 0x02	; 2
    4476:	48 f4       	brcc	.+18     	; 0x448a <__pack_f+0x2e>
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	a0 e1       	ldi	r26, 0x10	; 16
    447e:	b0 e0       	ldi	r27, 0x00	; 0
    4480:	e8 2a       	or	r14, r24
    4482:	f9 2a       	or	r15, r25
    4484:	0a 2b       	or	r16, r26
    4486:	1b 2b       	or	r17, r27
    4488:	a5 c0       	rjmp	.+330    	; 0x45d4 <__pack_f+0x178>
    448a:	84 30       	cpi	r24, 0x04	; 4
    448c:	09 f4       	brne	.+2      	; 0x4490 <__pack_f+0x34>
    448e:	9f c0       	rjmp	.+318    	; 0x45ce <__pack_f+0x172>
    4490:	82 30       	cpi	r24, 0x02	; 2
    4492:	21 f4       	brne	.+8      	; 0x449c <__pack_f+0x40>
    4494:	ee 24       	eor	r14, r14
    4496:	ff 24       	eor	r15, r15
    4498:	87 01       	movw	r16, r14
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <__pack_f+0x4a>
    449c:	e1 14       	cp	r14, r1
    449e:	f1 04       	cpc	r15, r1
    44a0:	01 05       	cpc	r16, r1
    44a2:	11 05       	cpc	r17, r1
    44a4:	19 f4       	brne	.+6      	; 0x44ac <__pack_f+0x50>
    44a6:	e0 e0       	ldi	r30, 0x00	; 0
    44a8:	f0 e0       	ldi	r31, 0x00	; 0
    44aa:	96 c0       	rjmp	.+300    	; 0x45d8 <__pack_f+0x17c>
    44ac:	62 81       	ldd	r22, Z+2	; 0x02
    44ae:	73 81       	ldd	r23, Z+3	; 0x03
    44b0:	9f ef       	ldi	r25, 0xFF	; 255
    44b2:	62 38       	cpi	r22, 0x82	; 130
    44b4:	79 07       	cpc	r23, r25
    44b6:	0c f0       	brlt	.+2      	; 0x44ba <__pack_f+0x5e>
    44b8:	5b c0       	rjmp	.+182    	; 0x4570 <__pack_f+0x114>
    44ba:	22 e8       	ldi	r18, 0x82	; 130
    44bc:	3f ef       	ldi	r19, 0xFF	; 255
    44be:	26 1b       	sub	r18, r22
    44c0:	37 0b       	sbc	r19, r23
    44c2:	2a 31       	cpi	r18, 0x1A	; 26
    44c4:	31 05       	cpc	r19, r1
    44c6:	2c f0       	brlt	.+10     	; 0x44d2 <__pack_f+0x76>
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e0       	ldi	r20, 0x00	; 0
    44ce:	50 e0       	ldi	r21, 0x00	; 0
    44d0:	2a c0       	rjmp	.+84     	; 0x4526 <__pack_f+0xca>
    44d2:	b8 01       	movw	r22, r16
    44d4:	a7 01       	movw	r20, r14
    44d6:	02 2e       	mov	r0, r18
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <__pack_f+0x86>
    44da:	76 95       	lsr	r23
    44dc:	67 95       	ror	r22
    44de:	57 95       	ror	r21
    44e0:	47 95       	ror	r20
    44e2:	0a 94       	dec	r0
    44e4:	d2 f7       	brpl	.-12     	; 0x44da <__pack_f+0x7e>
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	a0 e0       	ldi	r26, 0x00	; 0
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	04 c0       	rjmp	.+8      	; 0x44f8 <__pack_f+0x9c>
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	aa 1f       	adc	r26, r26
    44f6:	bb 1f       	adc	r27, r27
    44f8:	2a 95       	dec	r18
    44fa:	d2 f7       	brpl	.-12     	; 0x44f0 <__pack_f+0x94>
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	a1 09       	sbc	r26, r1
    4500:	b1 09       	sbc	r27, r1
    4502:	8e 21       	and	r24, r14
    4504:	9f 21       	and	r25, r15
    4506:	a0 23       	and	r26, r16
    4508:	b1 23       	and	r27, r17
    450a:	00 97       	sbiw	r24, 0x00	; 0
    450c:	a1 05       	cpc	r26, r1
    450e:	b1 05       	cpc	r27, r1
    4510:	21 f0       	breq	.+8      	; 0x451a <__pack_f+0xbe>
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	a0 e0       	ldi	r26, 0x00	; 0
    4518:	b0 e0       	ldi	r27, 0x00	; 0
    451a:	9a 01       	movw	r18, r20
    451c:	ab 01       	movw	r20, r22
    451e:	28 2b       	or	r18, r24
    4520:	39 2b       	or	r19, r25
    4522:	4a 2b       	or	r20, r26
    4524:	5b 2b       	or	r21, r27
    4526:	da 01       	movw	r26, r20
    4528:	c9 01       	movw	r24, r18
    452a:	8f 77       	andi	r24, 0x7F	; 127
    452c:	90 70       	andi	r25, 0x00	; 0
    452e:	a0 70       	andi	r26, 0x00	; 0
    4530:	b0 70       	andi	r27, 0x00	; 0
    4532:	80 34       	cpi	r24, 0x40	; 64
    4534:	91 05       	cpc	r25, r1
    4536:	a1 05       	cpc	r26, r1
    4538:	b1 05       	cpc	r27, r1
    453a:	39 f4       	brne	.+14     	; 0x454a <__pack_f+0xee>
    453c:	27 ff       	sbrs	r18, 7
    453e:	09 c0       	rjmp	.+18     	; 0x4552 <__pack_f+0xf6>
    4540:	20 5c       	subi	r18, 0xC0	; 192
    4542:	3f 4f       	sbci	r19, 0xFF	; 255
    4544:	4f 4f       	sbci	r20, 0xFF	; 255
    4546:	5f 4f       	sbci	r21, 0xFF	; 255
    4548:	04 c0       	rjmp	.+8      	; 0x4552 <__pack_f+0xf6>
    454a:	21 5c       	subi	r18, 0xC1	; 193
    454c:	3f 4f       	sbci	r19, 0xFF	; 255
    454e:	4f 4f       	sbci	r20, 0xFF	; 255
    4550:	5f 4f       	sbci	r21, 0xFF	; 255
    4552:	e0 e0       	ldi	r30, 0x00	; 0
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	20 30       	cpi	r18, 0x00	; 0
    4558:	a0 e0       	ldi	r26, 0x00	; 0
    455a:	3a 07       	cpc	r19, r26
    455c:	a0 e0       	ldi	r26, 0x00	; 0
    455e:	4a 07       	cpc	r20, r26
    4560:	a0 e4       	ldi	r26, 0x40	; 64
    4562:	5a 07       	cpc	r21, r26
    4564:	10 f0       	brcs	.+4      	; 0x456a <__pack_f+0x10e>
    4566:	e1 e0       	ldi	r30, 0x01	; 1
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	79 01       	movw	r14, r18
    456c:	8a 01       	movw	r16, r20
    456e:	27 c0       	rjmp	.+78     	; 0x45be <__pack_f+0x162>
    4570:	60 38       	cpi	r22, 0x80	; 128
    4572:	71 05       	cpc	r23, r1
    4574:	64 f5       	brge	.+88     	; 0x45ce <__pack_f+0x172>
    4576:	fb 01       	movw	r30, r22
    4578:	e1 58       	subi	r30, 0x81	; 129
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	d8 01       	movw	r26, r16
    457e:	c7 01       	movw	r24, r14
    4580:	8f 77       	andi	r24, 0x7F	; 127
    4582:	90 70       	andi	r25, 0x00	; 0
    4584:	a0 70       	andi	r26, 0x00	; 0
    4586:	b0 70       	andi	r27, 0x00	; 0
    4588:	80 34       	cpi	r24, 0x40	; 64
    458a:	91 05       	cpc	r25, r1
    458c:	a1 05       	cpc	r26, r1
    458e:	b1 05       	cpc	r27, r1
    4590:	39 f4       	brne	.+14     	; 0x45a0 <__pack_f+0x144>
    4592:	e7 fe       	sbrs	r14, 7
    4594:	0d c0       	rjmp	.+26     	; 0x45b0 <__pack_f+0x154>
    4596:	80 e4       	ldi	r24, 0x40	; 64
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	a0 e0       	ldi	r26, 0x00	; 0
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	04 c0       	rjmp	.+8      	; 0x45a8 <__pack_f+0x14c>
    45a0:	8f e3       	ldi	r24, 0x3F	; 63
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	a0 e0       	ldi	r26, 0x00	; 0
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e8 0e       	add	r14, r24
    45aa:	f9 1e       	adc	r15, r25
    45ac:	0a 1f       	adc	r16, r26
    45ae:	1b 1f       	adc	r17, r27
    45b0:	17 ff       	sbrs	r17, 7
    45b2:	05 c0       	rjmp	.+10     	; 0x45be <__pack_f+0x162>
    45b4:	16 95       	lsr	r17
    45b6:	07 95       	ror	r16
    45b8:	f7 94       	ror	r15
    45ba:	e7 94       	ror	r14
    45bc:	31 96       	adiw	r30, 0x01	; 1
    45be:	87 e0       	ldi	r24, 0x07	; 7
    45c0:	16 95       	lsr	r17
    45c2:	07 95       	ror	r16
    45c4:	f7 94       	ror	r15
    45c6:	e7 94       	ror	r14
    45c8:	8a 95       	dec	r24
    45ca:	d1 f7       	brne	.-12     	; 0x45c0 <__pack_f+0x164>
    45cc:	05 c0       	rjmp	.+10     	; 0x45d8 <__pack_f+0x17c>
    45ce:	ee 24       	eor	r14, r14
    45d0:	ff 24       	eor	r15, r15
    45d2:	87 01       	movw	r16, r14
    45d4:	ef ef       	ldi	r30, 0xFF	; 255
    45d6:	f0 e0       	ldi	r31, 0x00	; 0
    45d8:	6e 2f       	mov	r22, r30
    45da:	67 95       	ror	r22
    45dc:	66 27       	eor	r22, r22
    45de:	67 95       	ror	r22
    45e0:	90 2f       	mov	r25, r16
    45e2:	9f 77       	andi	r25, 0x7F	; 127
    45e4:	d7 94       	ror	r13
    45e6:	dd 24       	eor	r13, r13
    45e8:	d7 94       	ror	r13
    45ea:	8e 2f       	mov	r24, r30
    45ec:	86 95       	lsr	r24
    45ee:	49 2f       	mov	r20, r25
    45f0:	46 2b       	or	r20, r22
    45f2:	58 2f       	mov	r21, r24
    45f4:	5d 29       	or	r21, r13
    45f6:	b7 01       	movw	r22, r14
    45f8:	ca 01       	movw	r24, r20
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	ff 90       	pop	r15
    4600:	ef 90       	pop	r14
    4602:	df 90       	pop	r13
    4604:	08 95       	ret

00004606 <__unpack_f>:
    4606:	fc 01       	movw	r30, r24
    4608:	db 01       	movw	r26, r22
    460a:	40 81       	ld	r20, Z
    460c:	51 81       	ldd	r21, Z+1	; 0x01
    460e:	22 81       	ldd	r18, Z+2	; 0x02
    4610:	62 2f       	mov	r22, r18
    4612:	6f 77       	andi	r22, 0x7F	; 127
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	22 1f       	adc	r18, r18
    4618:	22 27       	eor	r18, r18
    461a:	22 1f       	adc	r18, r18
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	89 2f       	mov	r24, r25
    4620:	88 0f       	add	r24, r24
    4622:	82 2b       	or	r24, r18
    4624:	28 2f       	mov	r18, r24
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	99 1f       	adc	r25, r25
    462a:	99 27       	eor	r25, r25
    462c:	99 1f       	adc	r25, r25
    462e:	11 96       	adiw	r26, 0x01	; 1
    4630:	9c 93       	st	X, r25
    4632:	11 97       	sbiw	r26, 0x01	; 1
    4634:	21 15       	cp	r18, r1
    4636:	31 05       	cpc	r19, r1
    4638:	a9 f5       	brne	.+106    	; 0x46a4 <__unpack_f+0x9e>
    463a:	41 15       	cp	r20, r1
    463c:	51 05       	cpc	r21, r1
    463e:	61 05       	cpc	r22, r1
    4640:	71 05       	cpc	r23, r1
    4642:	11 f4       	brne	.+4      	; 0x4648 <__unpack_f+0x42>
    4644:	82 e0       	ldi	r24, 0x02	; 2
    4646:	37 c0       	rjmp	.+110    	; 0x46b6 <__unpack_f+0xb0>
    4648:	82 e8       	ldi	r24, 0x82	; 130
    464a:	9f ef       	ldi	r25, 0xFF	; 255
    464c:	13 96       	adiw	r26, 0x03	; 3
    464e:	9c 93       	st	X, r25
    4650:	8e 93       	st	-X, r24
    4652:	12 97       	sbiw	r26, 0x02	; 2
    4654:	9a 01       	movw	r18, r20
    4656:	ab 01       	movw	r20, r22
    4658:	67 e0       	ldi	r22, 0x07	; 7
    465a:	22 0f       	add	r18, r18
    465c:	33 1f       	adc	r19, r19
    465e:	44 1f       	adc	r20, r20
    4660:	55 1f       	adc	r21, r21
    4662:	6a 95       	dec	r22
    4664:	d1 f7       	brne	.-12     	; 0x465a <__unpack_f+0x54>
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	8c 93       	st	X, r24
    466a:	0d c0       	rjmp	.+26     	; 0x4686 <__unpack_f+0x80>
    466c:	22 0f       	add	r18, r18
    466e:	33 1f       	adc	r19, r19
    4670:	44 1f       	adc	r20, r20
    4672:	55 1f       	adc	r21, r21
    4674:	12 96       	adiw	r26, 0x02	; 2
    4676:	8d 91       	ld	r24, X+
    4678:	9c 91       	ld	r25, X
    467a:	13 97       	sbiw	r26, 0x03	; 3
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	13 96       	adiw	r26, 0x03	; 3
    4680:	9c 93       	st	X, r25
    4682:	8e 93       	st	-X, r24
    4684:	12 97       	sbiw	r26, 0x02	; 2
    4686:	20 30       	cpi	r18, 0x00	; 0
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	38 07       	cpc	r19, r24
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	48 07       	cpc	r20, r24
    4690:	80 e4       	ldi	r24, 0x40	; 64
    4692:	58 07       	cpc	r21, r24
    4694:	58 f3       	brcs	.-42     	; 0x466c <__unpack_f+0x66>
    4696:	14 96       	adiw	r26, 0x04	; 4
    4698:	2d 93       	st	X+, r18
    469a:	3d 93       	st	X+, r19
    469c:	4d 93       	st	X+, r20
    469e:	5c 93       	st	X, r21
    46a0:	17 97       	sbiw	r26, 0x07	; 7
    46a2:	08 95       	ret
    46a4:	2f 3f       	cpi	r18, 0xFF	; 255
    46a6:	31 05       	cpc	r19, r1
    46a8:	79 f4       	brne	.+30     	; 0x46c8 <__unpack_f+0xc2>
    46aa:	41 15       	cp	r20, r1
    46ac:	51 05       	cpc	r21, r1
    46ae:	61 05       	cpc	r22, r1
    46b0:	71 05       	cpc	r23, r1
    46b2:	19 f4       	brne	.+6      	; 0x46ba <__unpack_f+0xb4>
    46b4:	84 e0       	ldi	r24, 0x04	; 4
    46b6:	8c 93       	st	X, r24
    46b8:	08 95       	ret
    46ba:	64 ff       	sbrs	r22, 4
    46bc:	03 c0       	rjmp	.+6      	; 0x46c4 <__unpack_f+0xbe>
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	8c 93       	st	X, r24
    46c2:	12 c0       	rjmp	.+36     	; 0x46e8 <__unpack_f+0xe2>
    46c4:	1c 92       	st	X, r1
    46c6:	10 c0       	rjmp	.+32     	; 0x46e8 <__unpack_f+0xe2>
    46c8:	2f 57       	subi	r18, 0x7F	; 127
    46ca:	30 40       	sbci	r19, 0x00	; 0
    46cc:	13 96       	adiw	r26, 0x03	; 3
    46ce:	3c 93       	st	X, r19
    46d0:	2e 93       	st	-X, r18
    46d2:	12 97       	sbiw	r26, 0x02	; 2
    46d4:	83 e0       	ldi	r24, 0x03	; 3
    46d6:	8c 93       	st	X, r24
    46d8:	87 e0       	ldi	r24, 0x07	; 7
    46da:	44 0f       	add	r20, r20
    46dc:	55 1f       	adc	r21, r21
    46de:	66 1f       	adc	r22, r22
    46e0:	77 1f       	adc	r23, r23
    46e2:	8a 95       	dec	r24
    46e4:	d1 f7       	brne	.-12     	; 0x46da <__unpack_f+0xd4>
    46e6:	70 64       	ori	r23, 0x40	; 64
    46e8:	14 96       	adiw	r26, 0x04	; 4
    46ea:	4d 93       	st	X+, r20
    46ec:	5d 93       	st	X+, r21
    46ee:	6d 93       	st	X+, r22
    46f0:	7c 93       	st	X, r23
    46f2:	17 97       	sbiw	r26, 0x07	; 7
    46f4:	08 95       	ret

000046f6 <__fpcmp_parts_f>:
    46f6:	1f 93       	push	r17
    46f8:	dc 01       	movw	r26, r24
    46fa:	fb 01       	movw	r30, r22
    46fc:	9c 91       	ld	r25, X
    46fe:	92 30       	cpi	r25, 0x02	; 2
    4700:	08 f4       	brcc	.+2      	; 0x4704 <__fpcmp_parts_f+0xe>
    4702:	47 c0       	rjmp	.+142    	; 0x4792 <__fpcmp_parts_f+0x9c>
    4704:	80 81       	ld	r24, Z
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	08 f4       	brcc	.+2      	; 0x470c <__fpcmp_parts_f+0x16>
    470a:	43 c0       	rjmp	.+134    	; 0x4792 <__fpcmp_parts_f+0x9c>
    470c:	94 30       	cpi	r25, 0x04	; 4
    470e:	51 f4       	brne	.+20     	; 0x4724 <__fpcmp_parts_f+0x2e>
    4710:	11 96       	adiw	r26, 0x01	; 1
    4712:	1c 91       	ld	r17, X
    4714:	84 30       	cpi	r24, 0x04	; 4
    4716:	99 f5       	brne	.+102    	; 0x477e <__fpcmp_parts_f+0x88>
    4718:	81 81       	ldd	r24, Z+1	; 0x01
    471a:	68 2f       	mov	r22, r24
    471c:	70 e0       	ldi	r23, 0x00	; 0
    471e:	61 1b       	sub	r22, r17
    4720:	71 09       	sbc	r23, r1
    4722:	3f c0       	rjmp	.+126    	; 0x47a2 <__fpcmp_parts_f+0xac>
    4724:	84 30       	cpi	r24, 0x04	; 4
    4726:	21 f0       	breq	.+8      	; 0x4730 <__fpcmp_parts_f+0x3a>
    4728:	92 30       	cpi	r25, 0x02	; 2
    472a:	31 f4       	brne	.+12     	; 0x4738 <__fpcmp_parts_f+0x42>
    472c:	82 30       	cpi	r24, 0x02	; 2
    472e:	b9 f1       	breq	.+110    	; 0x479e <__fpcmp_parts_f+0xa8>
    4730:	81 81       	ldd	r24, Z+1	; 0x01
    4732:	88 23       	and	r24, r24
    4734:	89 f1       	breq	.+98     	; 0x4798 <__fpcmp_parts_f+0xa2>
    4736:	2d c0       	rjmp	.+90     	; 0x4792 <__fpcmp_parts_f+0x9c>
    4738:	11 96       	adiw	r26, 0x01	; 1
    473a:	1c 91       	ld	r17, X
    473c:	11 97       	sbiw	r26, 0x01	; 1
    473e:	82 30       	cpi	r24, 0x02	; 2
    4740:	f1 f0       	breq	.+60     	; 0x477e <__fpcmp_parts_f+0x88>
    4742:	81 81       	ldd	r24, Z+1	; 0x01
    4744:	18 17       	cp	r17, r24
    4746:	d9 f4       	brne	.+54     	; 0x477e <__fpcmp_parts_f+0x88>
    4748:	12 96       	adiw	r26, 0x02	; 2
    474a:	2d 91       	ld	r18, X+
    474c:	3c 91       	ld	r19, X
    474e:	13 97       	sbiw	r26, 0x03	; 3
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	82 17       	cp	r24, r18
    4756:	93 07       	cpc	r25, r19
    4758:	94 f0       	brlt	.+36     	; 0x477e <__fpcmp_parts_f+0x88>
    475a:	28 17       	cp	r18, r24
    475c:	39 07       	cpc	r19, r25
    475e:	bc f0       	brlt	.+46     	; 0x478e <__fpcmp_parts_f+0x98>
    4760:	14 96       	adiw	r26, 0x04	; 4
    4762:	8d 91       	ld	r24, X+
    4764:	9d 91       	ld	r25, X+
    4766:	0d 90       	ld	r0, X+
    4768:	bc 91       	ld	r27, X
    476a:	a0 2d       	mov	r26, r0
    476c:	24 81       	ldd	r18, Z+4	; 0x04
    476e:	35 81       	ldd	r19, Z+5	; 0x05
    4770:	46 81       	ldd	r20, Z+6	; 0x06
    4772:	57 81       	ldd	r21, Z+7	; 0x07
    4774:	28 17       	cp	r18, r24
    4776:	39 07       	cpc	r19, r25
    4778:	4a 07       	cpc	r20, r26
    477a:	5b 07       	cpc	r21, r27
    477c:	18 f4       	brcc	.+6      	; 0x4784 <__fpcmp_parts_f+0x8e>
    477e:	11 23       	and	r17, r17
    4780:	41 f0       	breq	.+16     	; 0x4792 <__fpcmp_parts_f+0x9c>
    4782:	0a c0       	rjmp	.+20     	; 0x4798 <__fpcmp_parts_f+0xa2>
    4784:	82 17       	cp	r24, r18
    4786:	93 07       	cpc	r25, r19
    4788:	a4 07       	cpc	r26, r20
    478a:	b5 07       	cpc	r27, r21
    478c:	40 f4       	brcc	.+16     	; 0x479e <__fpcmp_parts_f+0xa8>
    478e:	11 23       	and	r17, r17
    4790:	19 f0       	breq	.+6      	; 0x4798 <__fpcmp_parts_f+0xa2>
    4792:	61 e0       	ldi	r22, 0x01	; 1
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	05 c0       	rjmp	.+10     	; 0x47a2 <__fpcmp_parts_f+0xac>
    4798:	6f ef       	ldi	r22, 0xFF	; 255
    479a:	7f ef       	ldi	r23, 0xFF	; 255
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <__fpcmp_parts_f+0xac>
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	70 e0       	ldi	r23, 0x00	; 0
    47a2:	cb 01       	movw	r24, r22
    47a4:	1f 91       	pop	r17
    47a6:	08 95       	ret

000047a8 <MWDT_SartWDT>:
#include "WDT_Interface.h"
#include "WDT_Private.h"

void MWDT_SartWDT(u8 copy_u8Mode)
{
	switch(copy_u8Mode){
    47a8:	83 30       	cpi	r24, 0x03	; 3
    47aa:	e1 f0       	breq	.+56     	; 0x47e4 <MWDT_SartWDT+0x3c>
    47ac:	84 30       	cpi	r24, 0x04	; 4
    47ae:	28 f4       	brcc	.+10     	; 0x47ba <MWDT_SartWDT+0x12>
    47b0:	81 30       	cpi	r24, 0x01	; 1
    47b2:	79 f0       	breq	.+30     	; 0x47d2 <MWDT_SartWDT+0x2a>
    47b4:	82 30       	cpi	r24, 0x02	; 2
    47b6:	98 f4       	brcc	.+38     	; 0x47de <MWDT_SartWDT+0x36>
    47b8:	09 c0       	rjmp	.+18     	; 0x47cc <MWDT_SartWDT+0x24>
    47ba:	85 30       	cpi	r24, 0x05	; 5
    47bc:	f9 f0       	breq	.+62     	; 0x47fc <MWDT_SartWDT+0x54>
    47be:	85 30       	cpi	r24, 0x05	; 5
    47c0:	d0 f0       	brcs	.+52     	; 0x47f6 <MWDT_SartWDT+0x4e>
    47c2:	86 30       	cpi	r24, 0x06	; 6
    47c4:	09 f1       	breq	.+66     	; 0x4808 <MWDT_SartWDT+0x60>
    47c6:	87 30       	cpi	r24, 0x07	; 7
    47c8:	59 f5       	brne	.+86     	; 0x4820 <MWDT_SartWDT+0x78>
    47ca:	21 c0       	rjmp	.+66     	; 0x480e <MWDT_SartWDT+0x66>
	case WDT_MODE16K:
		CLR_BIT(WDTCR_REG,WDP0);
    47cc:	81 b5       	in	r24, 0x21	; 33
    47ce:	8e 7f       	andi	r24, 0xFE	; 254
    47d0:	02 c0       	rjmp	.+4      	; 0x47d6 <MWDT_SartWDT+0x2e>
		CLR_BIT(WDTCR_REG,WDP1);
		CLR_BIT(WDTCR_REG,WDP2);
		break;
	case WDT_MODE32K:
		SET_BIT(WDTCR_REG,WDP0);
    47d2:	81 b5       	in	r24, 0x21	; 33
    47d4:	81 60       	ori	r24, 0x01	; 1
    47d6:	81 bd       	out	0x21, r24	; 33
		CLR_BIT(WDTCR_REG,WDP1);
    47d8:	81 b5       	in	r24, 0x21	; 33
    47da:	8d 7f       	andi	r24, 0xFD	; 253
    47dc:	08 c0       	rjmp	.+16     	; 0x47ee <MWDT_SartWDT+0x46>
		CLR_BIT(WDTCR_REG,WDP2);
		break;
	case WDT_MODE64K:
		CLR_BIT(WDTCR_REG,WDP0);
    47de:	81 b5       	in	r24, 0x21	; 33
    47e0:	8e 7f       	andi	r24, 0xFE	; 254
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <MWDT_SartWDT+0x40>
		SET_BIT(WDTCR_REG,WDP1);
		CLR_BIT(WDTCR_REG,WDP2);
		break;
	case WDT_MODE128K:
		SET_BIT(WDTCR_REG,WDP0);
    47e4:	81 b5       	in	r24, 0x21	; 33
    47e6:	81 60       	ori	r24, 0x01	; 1
    47e8:	81 bd       	out	0x21, r24	; 33
		SET_BIT(WDTCR_REG,WDP1);
    47ea:	81 b5       	in	r24, 0x21	; 33
    47ec:	82 60       	ori	r24, 0x02	; 2
    47ee:	81 bd       	out	0x21, r24	; 33
		CLR_BIT(WDTCR_REG,WDP2);
    47f0:	81 b5       	in	r24, 0x21	; 33
    47f2:	8b 7f       	andi	r24, 0xFB	; 251
    47f4:	14 c0       	rjmp	.+40     	; 0x481e <MWDT_SartWDT+0x76>
		break;
	case WDT_MODE256K:
		CLR_BIT(WDTCR_REG,WDP0);
    47f6:	81 b5       	in	r24, 0x21	; 33
    47f8:	8e 7f       	andi	r24, 0xFE	; 254
    47fa:	02 c0       	rjmp	.+4      	; 0x4800 <MWDT_SartWDT+0x58>
		CLR_BIT(WDTCR_REG,WDP1);
		SET_BIT(WDTCR_REG,WDP2);
		break;
	case WDT_MODE512K:
		SET_BIT(WDTCR_REG,WDP0);
    47fc:	81 b5       	in	r24, 0x21	; 33
    47fe:	81 60       	ori	r24, 0x01	; 1
    4800:	81 bd       	out	0x21, r24	; 33
		CLR_BIT(WDTCR_REG,WDP1);
    4802:	81 b5       	in	r24, 0x21	; 33
    4804:	8d 7f       	andi	r24, 0xFD	; 253
    4806:	08 c0       	rjmp	.+16     	; 0x4818 <MWDT_SartWDT+0x70>
		SET_BIT(WDTCR_REG,WDP2);
		break;
	case WDT_MODE1024K:
		CLR_BIT(WDTCR_REG,WDP0);
    4808:	81 b5       	in	r24, 0x21	; 33
    480a:	8e 7f       	andi	r24, 0xFE	; 254
    480c:	02 c0       	rjmp	.+4      	; 0x4812 <MWDT_SartWDT+0x6a>
		SET_BIT(WDTCR_REG,WDP1);
		SET_BIT(WDTCR_REG,WDP2);
		break;
	case WDT_MODE2048K:
		SET_BIT(WDTCR_REG,WDP0);
    480e:	81 b5       	in	r24, 0x21	; 33
    4810:	81 60       	ori	r24, 0x01	; 1
    4812:	81 bd       	out	0x21, r24	; 33
		SET_BIT(WDTCR_REG,WDP1);
    4814:	81 b5       	in	r24, 0x21	; 33
    4816:	82 60       	ori	r24, 0x02	; 2
    4818:	81 bd       	out	0x21, r24	; 33
		SET_BIT(WDTCR_REG,WDP2);
    481a:	81 b5       	in	r24, 0x21	; 33
    481c:	84 60       	ori	r24, 0x04	; 4
    481e:	81 bd       	out	0x21, r24	; 33
		break;
	}
	//start WDT
	SET_BIT(WDTCR_REG,WDE);
    4820:	81 b5       	in	r24, 0x21	; 33
    4822:	88 60       	ori	r24, 0x08	; 8
    4824:	81 bd       	out	0x21, r24	; 33
}
    4826:	08 95       	ret

00004828 <MWDT_StopWDT>:

void MWDT_StopWDT(void)
{
	WDTCR_REG|=0x18;
    4828:	81 b5       	in	r24, 0x21	; 33
    482a:	88 61       	ori	r24, 0x18	; 24
    482c:	81 bd       	out	0x21, r24	; 33
	WDTCR_REG=0;
    482e:	11 bc       	out	0x21, r1	; 33
}
    4830:	08 95       	ret

00004832 <USART_voidInit>:

	/*
		$ Set Baud Rate
		Hint : UBRRH then UBRRL to avoid problems
	 */
	UBRRH = (u8)(Local_u16UBRR >> 8) ; /* MSBs at Local_u16UBRR */
    4832:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8)Local_u16UBRR ;
    4834:	83 e3       	ldi	r24, 0x33	; 51
    4836:	89 b9       	out	0x09, r24	; 9


	/***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

	CLR_BIT(UCSRA , UCSRA_U2X) ;
    4838:	59 98       	cbi	0x0b, 1	; 11

	/*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
	CLR_BIT(UCSRA , UCSRA_MPCM) ;
#elif USART_MPCM == ENABLE
	SET_BIT(UCSRA , UCSRA_MPCM) ;
    483a:	58 9a       	sbi	0x0b, 0	; 11
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
	CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
	CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
    483c:	52 98       	cbi	0x0a, 2	; 10

	/*Set UCSRC Mode*/
	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;

	/*Store the value in UCSRC Register (one operation) */
	UCSRC = Local_u8UCSRC ;
    483e:	86 e8       	ldi	r24, 0x86	; 134
    4840:	80 bd       	out	0x20, r24	; 32

	/* Finally Enable the components */

	/*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
	CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    4842:	57 98       	cbi	0x0a, 7	; 10
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

	/*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
	CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    4844:	56 98       	cbi	0x0a, 6	; 10
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

	/*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
	CLR_BIT(UCSRB , UCSRB_UDRIE) ;
    4846:	55 98       	cbi	0x0a, 5	; 10

	/*Receive Enable*/
#if USART_RECEIVER_ENABLE == DISABLE
	CLR_BIT(UCSRB , UCSRB_RXEN) ;
#elif USART_RECEIVER_ENABLE == ENABLE
	SET_BIT(UCSRB , UCSRB_RXEN) ;
    4848:	54 9a       	sbi	0x0a, 4	; 10

	/*Transmitter Enable*/
#if USART_TRANSMITTER_ENABLE == DISABLE
	CLR_BIT(UCSRB , UCSRB_TXEN) ;
#elif USART_TRANSMITTER_ENABLE == ENABLE
	SET_BIT(UCSRB , UCSRB_TXEN) ; /*Configure PD1 as alternative pin function*/
    484a:	53 9a       	sbi	0x0a, 3	; 10
#else
#error "Wrong USART_TRANSMITTER_ENABLE config"
#endif
}
    484c:	08 95       	ret

0000484e <USART_u8SendData>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendData (u8 Copy_u8Data)
{
    484e:	28 2f       	mov	r18, r24
	u8 Local_u8ErrorState = E_OK ;
	u32 Local_u32TimeoutCounter = 0 ;
	if (USART_u8State == IDLE)
    4850:	80 91 82 01 	lds	r24, 0x0182
    4854:	88 23       	and	r24, r24
    4856:	11 f0       	breq	.+4      	; 0x485c <USART_u8SendData+0xe>
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	08 95       	ret
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	01 c0       	rjmp	.+2      	; 0x4864 <USART_u8SendData+0x16>
			Hint : TIMEOUT to avoid infinity loop
		 */
		/*Wait until a Receiving complete or Timing out*/
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++ ;
    4862:	01 96       	adiw	r24, 0x01	; 1

		/*
			Hint : TIMEOUT to avoid infinity loop
		 */
		/*Wait until a Receiving complete or Timing out*/
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    4864:	5d 99       	sbic	0x0b, 5	; 11
    4866:	05 c0       	rjmp	.+10     	; 0x4872 <USART_u8SendData+0x24>
    4868:	37 e2       	ldi	r19, 0x27	; 39
    486a:	80 31       	cpi	r24, 0x10	; 16
    486c:	93 07       	cpc	r25, r19
    486e:	c9 f7       	brne	.-14     	; 0x4862 <USART_u8SendData+0x14>
    4870:	06 c0       	rjmp	.+12     	; 0x487e <USART_u8SendData+0x30>
		{
			Local_u32TimeoutCounter++ ;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    4872:	80 51       	subi	r24, 0x10	; 16
    4874:	97 42       	sbci	r25, 0x27	; 39
    4876:	19 f0       	breq	.+6      	; 0x487e <USART_u8SendData+0x30>
		{
			Local_u8ErrorState = E_NOK ;
		}
		else
		{
			UDR = Copy_u8Data ;
    4878:	2c b9       	out	0x0c, r18	; 12
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	01 c0       	rjmp	.+2      	; 0x4880 <USART_u8SendData+0x32>
    487e:	81 e0       	ldi	r24, 0x01	; 1
		}

		USART_u8State = IDLE ;
    4880:	10 92 82 01 	sts	0x0182, r1
	else
	{
		Local_u8ErrorState = E_NOK ;
	}
	return Local_u8ErrorState ;
}
    4884:	08 95       	ret

00004886 <USART_u8RecevieData>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8RecevieData (u8 * Copy_u8ReceviedData)
{
    4886:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState ;
	u32 Local_u32TimeoutCounter = 0 ;
	if (Copy_u8ReceviedData != NULL)
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	11 f4       	brne	.+4      	; 0x4890 <USART_u8RecevieData+0xa>
    488c:	83 e0       	ldi	r24, 0x03	; 3
    488e:	08 95       	ret
	{
		if (USART_u8State == IDLE)
    4890:	80 91 82 01 	lds	r24, 0x0182
    4894:	88 23       	and	r24, r24
    4896:	11 f0       	breq	.+4      	; 0x489c <USART_u8RecevieData+0x16>
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	08 95       	ret
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	01 c0       	rjmp	.+2      	; 0x48a4 <USART_u8RecevieData+0x1e>
			USART_u8State = BUSY ;

			/*Wait until a receive complete*/
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
    48a2:	01 96       	adiw	r24, 0x01	; 1
		if (USART_u8State == IDLE)
		{
			USART_u8State = BUSY ;

			/*Wait until a receive complete*/
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    48a4:	5f 99       	sbic	0x0b, 7	; 11
    48a6:	05 c0       	rjmp	.+10     	; 0x48b2 <USART_u8RecevieData+0x2c>
    48a8:	27 e2       	ldi	r18, 0x27	; 39
    48aa:	80 31       	cpi	r24, 0x10	; 16
    48ac:	92 07       	cpc	r25, r18
    48ae:	c9 f7       	brne	.-14     	; 0x48a2 <USART_u8RecevieData+0x1c>
    48b0:	05 c0       	rjmp	.+10     	; 0x48bc <USART_u8RecevieData+0x36>
			{
				Local_u32TimeoutCounter++ ;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    48b2:	80 51       	subi	r24, 0x10	; 16
    48b4:	97 42       	sbci	r25, 0x27	; 39
    48b6:	11 f0       	breq	.+4      	; 0x48bc <USART_u8RecevieData+0x36>
			{
				Local_u8ErrorState = E_NOK ;
			}
			else
			{
				* Copy_u8ReceviedData = UDR ;
    48b8:	8c b1       	in	r24, 0x0c	; 12
    48ba:	80 83       	st	Z, r24
			}

			USART_u8State = IDLE ;
    48bc:	10 92 82 01 	sts	0x0182, r1
    48c0:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    48c2:	08 95       	ret

000048c4 <USART_u8SendStringSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendStringSynch (const u8 * Copy_pchString)
{
    48c4:	cf 93       	push	r28
    48c6:	df 93       	push	r29
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    48c8:	00 97       	sbiw	r24, 0x00	; 0
    48ca:	11 f4       	brne	.+4      	; 0x48d0 <USART_u8SendStringSynch+0xc>
    48cc:	83 e0       	ldi	r24, 0x03	; 3
    48ce:	0a c0       	rjmp	.+20     	; 0x48e4 <USART_u8SendStringSynch+0x20>
    48d0:	ec 01       	movw	r28, r24
    48d2:	05 c0       	rjmp	.+10     	; 0x48de <USART_u8SendStringSynch+0x1a>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    48d4:	0e 94 27 24 	call	0x484e	; 0x484e <USART_u8SendData>
    48d8:	21 96       	adiw	r28, 0x01	; 1
			Local_u32Index++ ;
			if (Local_u8ErrorState != E_OK)
    48da:	88 23       	and	r24, r24
    48dc:	19 f4       	brne	.+6      	; 0x48e4 <USART_u8SendStringSynch+0x20>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    48de:	88 81       	ld	r24, Y
    48e0:	88 23       	and	r24, r24
    48e2:	c1 f7       	brne	.-16     	; 0x48d4 <USART_u8SendStringSynch+0x10>
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    48e4:	df 91       	pop	r29
    48e6:	cf 91       	pop	r28
    48e8:	08 95       	ret

000048ea <USART_u8SendStringAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8   USART_u8SendStringAsynch (const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    48ea:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    48ec:	80 91 82 01 	lds	r24, 0x0182
    48f0:	88 23       	and	r24, r24
    48f2:	11 f0       	breq	.+4      	; 0x48f8 <USART_u8SendStringAsynch+0xe>
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    48f8:	30 97       	sbiw	r30, 0x00	; 0
    48fa:	a9 f0       	breq	.+42     	; 0x4926 <USART_u8SendStringAsynch+0x3c>
    48fc:	61 15       	cp	r22, r1
    48fe:	71 05       	cpc	r23, r1
    4900:	91 f0       	breq	.+36     	; 0x4926 <USART_u8SendStringAsynch+0x3c>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	80 93 82 01 	sts	0x0182, r24

			/*Assign the USART data globally*/
			USART_pu8SendData = Copy_pchString ;
    4908:	f0 93 81 01 	sts	0x0181, r31
    490c:	e0 93 80 01 	sts	0x0180, r30
			USART_pvNotificationFunc = NotificationFunc ;
    4910:	70 93 84 01 	sts	0x0184, r23
    4914:	60 93 83 01 	sts	0x0183, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    4918:	10 92 88 01 	sts	0x0188, r1

			/*Send first Data */
			UDR = USART_pu8SendData[USART_u8Index] ;
    491c:	80 81       	ld	r24, Z
    491e:	8c b9       	out	0x0c, r24	; 12

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    4920:	56 9a       	sbi	0x0a, 6	; 10
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4926:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    4928:	08 95       	ret

0000492a <USART_u8ReceiveBufferSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferSynch (u8 * Copy_pchString , u32 Copy_u32BufferSize)
{
    492a:	ef 92       	push	r14
    492c:	ff 92       	push	r15
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	8c 01       	movw	r16, r24
    4938:	7b 01       	movw	r14, r22
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    493a:	00 97       	sbiw	r24, 0x00	; 0
    493c:	11 f4       	brne	.+4      	; 0x4942 <USART_u8ReceiveBufferSynch+0x18>
    493e:	83 e0       	ldi	r24, 0x03	; 3
    4940:	0f c0       	rjmp	.+30     	; 0x4960 <USART_u8ReceiveBufferSynch+0x36>
    4942:	c0 e0       	ldi	r28, 0x00	; 0
    4944:	d0 e0       	ldi	r29, 0x00	; 0
    4946:	08 c0       	rjmp	.+16     	; 0x4958 <USART_u8ReceiveBufferSynch+0x2e>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    4948:	c8 01       	movw	r24, r16
    494a:	8c 0f       	add	r24, r28
    494c:	9d 1f       	adc	r25, r29
    494e:	0e 94 43 24 	call	0x4886	; 0x4886 <USART_u8RecevieData>
			Local_u32Index++ ;

			if (Local_u8ErrorState != E_OK)
    4952:	88 23       	and	r24, r24
    4954:	29 f4       	brne	.+10     	; 0x4960 <USART_u8ReceiveBufferSynch+0x36>
	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
			Local_u32Index++ ;
    4956:	21 96       	adiw	r28, 0x01	; 1

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    4958:	ce 15       	cp	r28, r14
    495a:	df 05       	cpc	r29, r15
    495c:	a8 f3       	brcs	.-22     	; 0x4948 <USART_u8ReceiveBufferSynch+0x1e>
    495e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	1f 91       	pop	r17
    4966:	0f 91       	pop	r16
    4968:	ff 90       	pop	r15
    496a:	ef 90       	pop	r14
    496c:	08 95       	ret

0000496e <USART_u8ReceiveBufferAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferAsynch (u8 * Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    496e:	9c 01       	movw	r18, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    4970:	80 91 82 01 	lds	r24, 0x0182
    4974:	88 23       	and	r24, r24
    4976:	11 f0       	breq	.+4      	; 0x497c <USART_u8ReceiveBufferAsynch+0xe>
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    497c:	21 15       	cp	r18, r1
    497e:	31 05       	cpc	r19, r1
    4980:	a9 f0       	breq	.+42     	; 0x49ac <USART_u8ReceiveBufferAsynch+0x3e>
    4982:	41 15       	cp	r20, r1
    4984:	51 05       	cpc	r21, r1
    4986:	91 f0       	breq	.+36     	; 0x49ac <USART_u8ReceiveBufferAsynch+0x3e>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	80 93 82 01 	sts	0x0182, r24

			/*Assign the USART data globally*/
			USART_pu8ReceiveData = Copy_pchString ;
    498e:	30 93 86 01 	sts	0x0186, r19
    4992:	20 93 85 01 	sts	0x0185, r18
			USART_pvNotificationFunc = NotificationFunc ;
    4996:	50 93 84 01 	sts	0x0184, r21
    499a:	40 93 83 01 	sts	0x0183, r20
			USART_u8BufferSize = Copy_u32BufferSize;
    499e:	60 93 87 01 	sts	0x0187, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    49a2:	10 92 88 01 	sts	0x0188, r1

			/*USART Recieve Interrupt Enable */
			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    49a6:	57 9a       	sbi	0x0a, 7	; 10
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    49ac:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    49ae:	08 95       	ret

000049b0 <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for RX complete */
void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    49b0:	1f 92       	push	r1
    49b2:	0f 92       	push	r0
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	0f 92       	push	r0
    49b8:	11 24       	eor	r1, r1
    49ba:	2f 93       	push	r18
    49bc:	3f 93       	push	r19
    49be:	4f 93       	push	r20
    49c0:	5f 93       	push	r21
    49c2:	6f 93       	push	r22
    49c4:	7f 93       	push	r23
    49c6:	8f 93       	push	r24
    49c8:	9f 93       	push	r25
    49ca:	af 93       	push	r26
    49cc:	bf 93       	push	r27
    49ce:	ef 93       	push	r30
    49d0:	ff 93       	push	r31
		/*Receive next Data*/
		USART_pu8ReceiveData[USART_u8Index] = UDR ;
    49d2:	90 91 88 01 	lds	r25, 0x0188
    49d6:	8c b1       	in	r24, 0x0c	; 12
    49d8:	e0 91 85 01 	lds	r30, 0x0185
    49dc:	f0 91 86 01 	lds	r31, 0x0186
    49e0:	e9 0f       	add	r30, r25
    49e2:	f1 1d       	adc	r31, r1
    49e4:	80 83       	st	Z, r24

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    49e6:	9f 5f       	subi	r25, 0xFF	; 255
    49e8:	90 93 88 01 	sts	0x0188, r25

		if (USART_u8Index == USART_u8BufferSize)
    49ec:	80 91 87 01 	lds	r24, 0x0187
    49f0:	98 17       	cp	r25, r24
    49f2:	51 f4       	brne	.+20     	; 0x4a08 <__vector_13+0x58>
		{
			/*Send Data Complete*/

			USART_u8Index=0;
    49f4:	10 92 88 01 	sts	0x0188, r1
			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    49f8:	10 92 82 01 	sts	0x0182, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    49fc:	e0 91 83 01 	lds	r30, 0x0183
    4a00:	f0 91 84 01 	lds	r31, 0x0184
    4a04:	09 95       	icall

			/*USART Recieve Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    4a06:	57 98       	cbi	0x0a, 7	; 10
		else
		{
			/*Do Noting*/
		}

}
    4a08:	ff 91       	pop	r31
    4a0a:	ef 91       	pop	r30
    4a0c:	bf 91       	pop	r27
    4a0e:	af 91       	pop	r26
    4a10:	9f 91       	pop	r25
    4a12:	8f 91       	pop	r24
    4a14:	7f 91       	pop	r23
    4a16:	6f 91       	pop	r22
    4a18:	5f 91       	pop	r21
    4a1a:	4f 91       	pop	r20
    4a1c:	3f 91       	pop	r19
    4a1e:	2f 91       	pop	r18
    4a20:	0f 90       	pop	r0
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	0f 90       	pop	r0
    4a26:	1f 90       	pop	r1
    4a28:	18 95       	reti

00004a2a <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    4a2a:	1f 92       	push	r1
    4a2c:	0f 92       	push	r0
    4a2e:	0f b6       	in	r0, 0x3f	; 63
    4a30:	0f 92       	push	r0
    4a32:	11 24       	eor	r1, r1
    4a34:	2f 93       	push	r18
    4a36:	3f 93       	push	r19
    4a38:	4f 93       	push	r20
    4a3a:	5f 93       	push	r21
    4a3c:	6f 93       	push	r22
    4a3e:	7f 93       	push	r23
    4a40:	8f 93       	push	r24
    4a42:	9f 93       	push	r25
    4a44:	af 93       	push	r26
    4a46:	bf 93       	push	r27
    4a48:	ef 93       	push	r30
    4a4a:	ff 93       	push	r31

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    4a4c:	80 91 88 01 	lds	r24, 0x0188
    4a50:	8f 5f       	subi	r24, 0xFF	; 255
    4a52:	80 93 88 01 	sts	0x0188, r24

		if (USART_pu8SendData[USART_u8Index] == '\0')
    4a56:	e0 91 80 01 	lds	r30, 0x0180
    4a5a:	f0 91 81 01 	lds	r31, 0x0181
    4a5e:	e8 0f       	add	r30, r24
    4a60:	f1 1d       	adc	r31, r1
    4a62:	e0 81       	ld	r30, Z
    4a64:	ee 23       	and	r30, r30
    4a66:	59 f4       	brne	.+22     	; 0x4a7e <__vector_15+0x54>
		{
			/*Receive Data Complete*/
			USART_u8Index=0;
    4a68:	10 92 88 01 	sts	0x0188, r1

			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    4a6c:	10 92 82 01 	sts	0x0182, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    4a70:	e0 91 83 01 	lds	r30, 0x0183
    4a74:	f0 91 84 01 	lds	r31, 0x0184
    4a78:	09 95       	icall

			/*USART Transmit Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    4a7a:	56 98       	cbi	0x0a, 6	; 10
    4a7c:	01 c0       	rjmp	.+2      	; 0x4a80 <__vector_15+0x56>
		}
		else
		{
			/*Send Data not Complete*/
			/*Send next Data*/
			UDR = USART_pu8SendData[USART_u8Index] ;
    4a7e:	ec b9       	out	0x0c, r30	; 12
		}

}
    4a80:	ff 91       	pop	r31
    4a82:	ef 91       	pop	r30
    4a84:	bf 91       	pop	r27
    4a86:	af 91       	pop	r26
    4a88:	9f 91       	pop	r25
    4a8a:	8f 91       	pop	r24
    4a8c:	7f 91       	pop	r23
    4a8e:	6f 91       	pop	r22
    4a90:	5f 91       	pop	r21
    4a92:	4f 91       	pop	r20
    4a94:	3f 91       	pop	r19
    4a96:	2f 91       	pop	r18
    4a98:	0f 90       	pop	r0
    4a9a:	0f be       	out	0x3f, r0	; 63
    4a9c:	0f 90       	pop	r0
    4a9e:	1f 90       	pop	r1
    4aa0:	18 95       	reti

00004aa2 <TWI_voidInit>:
void TWI_voidInit(void)
{
#if TWI_MASTER_SLAVE == MASTER
	#if TWI_SPEED == SPEED_100K
		#if TWI_PRESCALER == TWI_PRESCALER_1
			CLR_BIT(TWSR,TWSR_TWPS0);
    4aa2:	08 98       	cbi	0x01, 0	; 1
			CLR_BIT(TWSR,TWSR_TWPS1);
    4aa4:	09 98       	cbi	0x01, 1	; 1
			TWBR = (((FCPU_CLOCK/SPEED_100K)-16)/2);
    4aa6:	8c ef       	ldi	r24, 0xFC	; 252
    4aa8:	80 b9       	out	0x00, r24	; 0
	#else
	#error "wrong TWI_SPEED configuration parameter!"
	#endif

	/* Setting the target address*/
		TWAR = (TARGET_ADDRESS<<1);
    4aaa:	12 b8       	out	0x02, r1	; 2

	/*Enable Master*/
		TWCR = ((1<<TWCR_TWINT) | (1<<TWCR_TWEN) | (1<<TWCR_TWEA));
    4aac:	84 ec       	ldi	r24, 0xC4	; 196
    4aae:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWCR_TWEN);
#else
#error "wrong TWI_MASTER_SLAVE configuration parameter!"
#endif

}
    4ab0:	08 95       	ret

00004ab2 <TWI_enSendStartCondition>:
	//SET_BIT(TWCR,TWCR_TWSTA);

	/* Clearing flag to perform the required action */
	//SET_BIT(TWCR,TWCR_TWINT);

	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN);
    4ab2:	84 ea       	ldi	r24, 0xA4	; 164
    4ab4:	86 bf       	out	0x36, r24	; 54

	/* Polling till interrupt flag is raised again (end of action) */
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4ab6:	06 b6       	in	r0, 0x36	; 54
    4ab8:	07 fe       	sbrs	r0, 7
    4aba:	fd cf       	rjmp	.-6      	; 0x4ab6 <TWI_enSendStartCondition+0x4>

	/* Checking for action ID */
	if((TWSR & STATUS_MASK) != START_ACK)
    4abc:	81 b1       	in	r24, 0x01	; 1
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	88 7f       	andi	r24, 0xF8	; 248
    4ac2:	88 30       	cpi	r24, 0x08	; 8
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <TWI_enSendStartCondition+0x16>
    4ac6:	91 e0       	ldi	r25, 0x01	; 1
	{
		/* Do nothing */
	}

	return Local_enErrorState;
}
    4ac8:	89 2f       	mov	r24, r25
    4aca:	08 95       	ret

00004acc <TWI_enSendRepeatedStart>:
	//SET_BIT(TWCR,TWCR_TWEN);

	/* 2) Clearing flag to perform the required action*/
	//SET_BIT(TWCR,TWCR_TWINT);

	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN);
    4acc:	84 ea       	ldi	r24, 0xA4	; 164
    4ace:	86 bf       	out	0x36, r24	; 54

	/* 3) Polling till interrupt flag is raised again (end of action)*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4ad0:	06 b6       	in	r0, 0x36	; 54
    4ad2:	07 fe       	sbrs	r0, 7
    4ad4:	fd cf       	rjmp	.-6      	; 0x4ad0 <TWI_enSendRepeatedStart+0x4>
	{
		/Do nothing/
	}*/

	return Local_enErrorState;
}
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	08 95       	ret

00004ada <TWI_enSendSlaveAddressWithWriteCmd>:

	/* Local enum object for error checking */
	TWI_ErrorState Local_enErrorState = NO_ERROR;

	/* 1) Setting address packet to data register to be sent*/
	TWDR = (Copy_u8SlaveAddress<<1);
    4ada:	88 0f       	add	r24, r24
    4adc:	83 b9       	out	0x03, r24	; 3

	//SET_BIT(TWCR,TWCR_TWEN);

	/* 3) Clearing flag to perform the required action*/
	//SET_BIT(TWCR,TWCR_TWINT);
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    4ade:	84 e8       	ldi	r24, 0x84	; 132
    4ae0:	86 bf       	out	0x36, r24	; 54

	/* 4) Polling till interrupt flag is raised again (end of action)*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4ae2:	06 b6       	in	r0, 0x36	; 54
    4ae4:	07 fe       	sbrs	r0, 7
    4ae6:	fd cf       	rjmp	.-6      	; 0x4ae2 <TWI_enSendSlaveAddressWithWriteCmd+0x8>

	/* 5) Checking for action ID*/
	if((TWSR & STATUS_MASK) != SLAVE_ADD_AND_WR_ACK)
    4ae8:	81 b1       	in	r24, 0x01	; 1
    4aea:	88 7f       	andi	r24, 0xF8	; 248
    4aec:	88 31       	cpi	r24, 0x18	; 24
    4aee:	11 f0       	breq	.+4      	; 0x4af4 <TWI_enSendSlaveAddressWithWriteCmd+0x1a>
    4af0:	83 e0       	ldi	r24, 0x03	; 3
    4af2:	08 95       	ret
    4af4:	80 e0       	ldi	r24, 0x00	; 0
	}

	/*return from this function*/
	return Local_enErrorState ;

}
    4af6:	08 95       	ret

00004af8 <TWI_enSendSlaveAddressWithReadCmd>:
{
	/* Local enum object for error checking */
	TWI_ErrorState Local_enErrorState = NO_ERROR;

	/* 1) Setting address packet to data register to be sent*/
	TWDR = ((Copy_u8SlaveAddress<< 1)|(0x01));
    4af8:	88 0f       	add	r24, r24
    4afa:	81 60       	ori	r24, 0x01	; 1
    4afc:	83 b9       	out	0x03, r24	; 3
	//CLR_BIT(TWCR,TWCR_TWSTA);

	/* 3) Clearing flag to perform the required action*/
	//SET_BIT(TWCR,TWCR_TWINT);

	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    4afe:	84 e8       	ldi	r24, 0x84	; 132
    4b00:	86 bf       	out	0x36, r24	; 54

	/* 4) Polling till interrupt flag is raised again (end of action)*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4b02:	06 b6       	in	r0, 0x36	; 54
    4b04:	07 fe       	sbrs	r0, 7
    4b06:	fd cf       	rjmp	.-6      	; 0x4b02 <TWI_enSendSlaveAddressWithReadCmd+0xa>

	/* 5) Checking for action ID*/
	if((TWSR & STATUS_MASK) != SLAVE_ADD_AND_WR_ACK)
    4b08:	81 b1       	in	r24, 0x01	; 1
    4b0a:	88 7f       	andi	r24, 0xF8	; 248
    4b0c:	88 31       	cpi	r24, 0x18	; 24
    4b0e:	11 f0       	breq	.+4      	; 0x4b14 <TWI_enSendSlaveAddressWithReadCmd+0x1c>
    4b10:	84 e0       	ldi	r24, 0x04	; 4
    4b12:	08 95       	ret
    4b14:	80 e0       	ldi	r24, 0x00	; 0
		/*Do nothing*/
	}

	/*return from this function*/
	return Local_enErrorState ;
}
    4b16:	08 95       	ret

00004b18 <TWI_enSendByte>:
{
	/* Local enum object for error checking */
	TWI_ErrorState Local_enErrorState = NO_ERROR;

	/* 1) Setting data byte to get transmitter*/
	TWDR = Copy_u8DataByte;
    4b18:	83 b9       	out	0x03, r24	; 3
	/* 2) Clearing flag to perform the required action*/
	//SET_BIT(TWCR,TWCR_TWINT);

	//SET_BIT(TWCR,TWCR_TWEN);

	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN) ;
    4b1a:	84 e8       	ldi	r24, 0x84	; 132
    4b1c:	86 bf       	out	0x36, r24	; 54

	/* 3) Polling till interrupt flag is raised again (end of action)*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4b1e:	06 b6       	in	r0, 0x36	; 54
    4b20:	07 fe       	sbrs	r0, 7
    4b22:	fd cf       	rjmp	.-6      	; 0x4b1e <TWI_enSendByte+0x6>

	/* 4) Checking for action ID*/
	if((TWSR & STATUS_MASK) != MSTR_WR_BYTE_ACK)
    4b24:	81 b1       	in	r24, 0x01	; 1
    4b26:	88 7f       	andi	r24, 0xF8	; 248
    4b28:	88 32       	cpi	r24, 0x28	; 40
    4b2a:	11 f0       	breq	.+4      	; 0x4b30 <TWI_enSendByte+0x18>
    4b2c:	85 e0       	ldi	r24, 0x05	; 5
    4b2e:	08 95       	ret
    4b30:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Do nothing*/
	}

	return Local_enErrorState;
}
    4b32:	08 95       	ret

00004b34 <TWI_enReceiveByteAck>:

TWI_ErrorState TWI_enReceiveByteAck(u8 * Copy_pu8ReceivedDataByte)
{
    4b34:	fc 01       	movw	r30, r24
	/* Local enum object for error checking */
	TWI_ErrorState Local_enErrorState = NO_ERROR;

	/* 1) Clearing flag to allow slave sending data*/
	//SET_BIT(TWCR,TWCR_TWINT);
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN) | (1<<TWCR_TWEA);
    4b36:	84 ec       	ldi	r24, 0xC4	; 196
    4b38:	86 bf       	out	0x36, r24	; 54
	/* 2) Polling till interrupt flag is raised again (end of action)*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4b3a:	06 b6       	in	r0, 0x36	; 54
    4b3c:	07 fe       	sbrs	r0, 7
    4b3e:	fd cf       	rjmp	.-6      	; 0x4b3a <TWI_enReceiveByteAck+0x6>

	/* 3) Checking for action ID*/
	if((TWSR & STATUS_MASK) != MSTR_RD_BYTE_WITH_ACK)
    4b40:	81 b1       	in	r24, 0x01	; 1
    4b42:	88 7f       	andi	r24, 0xF8	; 248
    4b44:	80 35       	cpi	r24, 0x50	; 80
    4b46:	11 f0       	breq	.+4      	; 0x4b4c <TWI_enReceiveByteAck+0x18>
    4b48:	86 e0       	ldi	r24, 0x06	; 6
    4b4a:	08 95       	ret
		Local_enErrorState = MSTR_READ_DATA_ERROR;
	}
	else
	{
		/* 4) Getting received data*/
		*Copy_pu8ReceivedDataByte = TWDR;
    4b4c:	83 b1       	in	r24, 0x03	; 3
    4b4e:	80 83       	st	Z, r24
    4b50:	80 e0       	ldi	r24, 0x00	; 0
	}

	return Local_enErrorState;
}
    4b52:	08 95       	ret

00004b54 <TWI_enReceiveByteNoAck>:

TWI_ErrorState TWI_enReceiveByteNoAck(u8 * Copy_pu8ReceiveDataByte)
{
    4b54:	fc 01       	movw	r30, r24
	/* Local enum object for error checking */
	TWI_ErrorState Local_enErrorState = NO_ERROR;

	/* 1) Setting the acknowledge bit */
	CLR_BIT(TWCR,TWCR_TWEA);
    4b56:	86 b7       	in	r24, 0x36	; 54
    4b58:	8f 7b       	andi	r24, 0xBF	; 191
    4b5a:	86 bf       	out	0x36, r24	; 54

	/* 2) Clearing flag to allow slave sending data*/
	//SET_BIT(TWCR,TWCR_TWINT);

	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    4b5c:	84 e8       	ldi	r24, 0x84	; 132
    4b5e:	86 bf       	out	0x36, r24	; 54

	/* 3) Polling till interrupt flag is raised again (end of action)*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4b60:	06 b6       	in	r0, 0x36	; 54
    4b62:	07 fe       	sbrs	r0, 7
    4b64:	fd cf       	rjmp	.-6      	; 0x4b60 <TWI_enReceiveByteNoAck+0xc>

	/* 4) Checking for action ID*/
	if((TWSR & STATUS_MASK) != MSTR_RD_BYTE_WITH_NACK)
    4b66:	81 b1       	in	r24, 0x01	; 1
    4b68:	88 7f       	andi	r24, 0xF8	; 248
    4b6a:	88 35       	cpi	r24, 0x58	; 88
    4b6c:	11 f0       	breq	.+4      	; 0x4b72 <TWI_enReceiveByteNoAck+0x1e>
    4b6e:	86 e0       	ldi	r24, 0x06	; 6
    4b70:	08 95       	ret
		Local_enErrorState = MSTR_READ_DATA_ERROR;
	}
	else
	{
		/* 4) Getting received data*/
		*Copy_pu8ReceiveDataByte = TWDR;
    4b72:	83 b1       	in	r24, 0x03	; 3
    4b74:	80 83       	st	Z, r24
    4b76:	80 e0       	ldi	r24, 0x00	; 0
	}

	return Local_enErrorState;
}
    4b78:	08 95       	ret

00004b7a <TWI_voidSendStopCondition>:
	//SET_BIT(TWCR,TWCR_TWSTO);

	/* Clearing flag to perform the required action */
	//SET_BIT(TWCR,TWCR_TWINT) ;

	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTO);
    4b7a:	84 e9       	ldi	r24, 0x94	; 148
    4b7c:	86 bf       	out	0x36, r24	; 54
}
    4b7e:	08 95       	ret

00004b80 <TIMER0_voidInit>:
{
	/*Set Configurable Modes*/
#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

	/*Initialize Waveform Generation Mode as Normal Mode*/
	CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    4b80:	83 b7       	in	r24, 0x33	; 51
    4b82:	8f 7b       	andi	r24, 0xBF	; 191
    4b84:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    4b86:	83 b7       	in	r24, 0x33	; 51
    4b88:	87 7f       	andi	r24, 0xF7	; 247
    4b8a:	83 bf       	out	0x33, r24	; 51

	/*Set the Required Preload Value*/
	TCNT0 = TIMER0_PRELOAD_VAL ;
    4b8c:	80 ec       	ldi	r24, 0xC0	; 192
    4b8e:	82 bf       	out	0x32, r24	; 50

	/*Timer0 Overflow Interrupt Enable*/
#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_TOIE0) ;
#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
	SET_BIT(TIMSK , TIMSK_TOIE0) ;
    4b90:	89 b7       	in	r24, 0x39	; 57
    4b92:	81 60       	ori	r24, 0x01	; 1
    4b94:	89 bf       	out	0x39, r24	; 57
#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    4b96:	83 b7       	in	r24, 0x33	; 51
    4b98:	88 7f       	andi	r24, 0xF8	; 248
    4b9a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER ;
    4b9c:	83 b7       	in	r24, 0x33	; 51
    4b9e:	82 60       	ori	r24, 0x02	; 2
    4ba0:	83 bf       	out	0x33, r24	; 51
}
    4ba2:	08 95       	ret

00004ba4 <TIMER1_voidInit>:
	SET_BIT(TCCR1A,TCCR1A_WGM10);
	SET_BIT(TCCR1A,TCCR1A_WGM11);
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	SET_BIT(TCCR1B,TCCR1B_WGM13);
#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4ba4:	8f b5       	in	r24, 0x2f	; 47
    4ba6:	8e 7f       	andi	r24, 0xFE	; 254
    4ba8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    4baa:	8f b5       	in	r24, 0x2f	; 47
    4bac:	82 60       	ori	r24, 0x02	; 2
    4bae:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    4bb0:	8e b5       	in	r24, 0x2e	; 46
    4bb2:	88 60       	ori	r24, 0x08	; 8
    4bb4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    4bb6:	8e b5       	in	r24, 0x2e	; 46
    4bb8:	80 61       	ori	r24, 0x10	; 16
    4bba:	8e bd       	out	0x2e, r24	; 46
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the require CTC Values*/
	OCR1A = TIMER1_CTCA_VAL ;
    4bbc:	84 ef       	ldi	r24, 0xF4	; 244
    4bbe:	91 e0       	ldi	r25, 0x01	; 1
    4bc0:	9b bd       	out	0x2b, r25	; 43
    4bc2:	8a bd       	out	0x2a, r24	; 42
	OCR1B = TIMER1_CTCB_VAL ;
    4bc4:	19 bc       	out	0x29, r1	; 41
    4bc6:	18 bc       	out	0x28, r1	; 40

	/*Set ICR1*/
#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
	ICR1 = TIMER1_ICR1_VAL ;
    4bc8:	80 e2       	ldi	r24, 0x20	; 32
    4bca:	9e e4       	ldi	r25, 0x4E	; 78
    4bcc:	97 bd       	out	0x27, r25	; 39
    4bce:	86 bd       	out	0x26, r24	; 38

#if TIMER1_ICR_EDGE == RISING_EDGE
	SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    4bd0:	8e b5       	in	r24, 0x2e	; 46
    4bd2:	80 64       	ori	r24, 0x40	; 64
    4bd4:	8e bd       	out	0x2e, r24	; 46
	/*Set OCR1A mode*/
#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
	CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    4bd6:	8f b5       	in	r24, 0x2f	; 47
    4bd8:	8f 7b       	andi	r24, 0xBF	; 191
    4bda:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    4bdc:	8f b5       	in	r24, 0x2f	; 47
    4bde:	80 68       	ori	r24, 0x80	; 128
    4be0:	8f bd       	out	0x2f, r24	; 47
	/*Set OCR1B mode*/
#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
	CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    4be2:	8f b5       	in	r24, 0x2f	; 47
    4be4:	8f 7e       	andi	r24, 0xEF	; 239
    4be6:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    4be8:	8f b5       	in	r24, 0x2f	; 47
    4bea:	80 62       	ori	r24, 0x20	; 32
    4bec:	8f bd       	out	0x2f, r24	; 47
#error "Wrong TIMER1_OCR1B_MODE Config"
#endif

	/*Timer1 PWM Interrupt Enable*/
#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    4bee:	89 b7       	in	r24, 0x39	; 57
    4bf0:	8b 7f       	andi	r24, 0xFB	; 251
    4bf2:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
#endif

#if TIMER1_CTCA_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    4bf4:	89 b7       	in	r24, 0x39	; 57
    4bf6:	8f 7e       	andi	r24, 0xEF	; 239
    4bf8:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_CTCA_INTERRUPT Config"
#endif

#if TIMER1_CTCB_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    4bfa:	89 b7       	in	r24, 0x39	; 57
    4bfc:	87 7f       	andi	r24, 0xF7	; 247
    4bfe:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_CTCB_INTERRUPT Config"
#endif

#if TIMER1_ICR_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    4c00:	89 b7       	in	r24, 0x39	; 57
    4c02:	8f 7d       	andi	r24, 0xDF	; 223
    4c04:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    4c06:	8e b5       	in	r24, 0x2e	; 46
    4c08:	88 7f       	andi	r24, 0xF8	; 248
    4c0a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    4c0c:	8e b5       	in	r24, 0x2e	; 46
    4c0e:	82 60       	ori	r24, 0x02	; 2
    4c10:	8e bd       	out	0x2e, r24	; 46


}
    4c12:	08 95       	ret

00004c14 <TIMER2_voidInit>:
#error "Wrong TIMER2_OVERFLOW_INTERRUPT Config"
#endif

#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Initialize Waveform Generation Mode as PWM Mode*/
	SET_BIT(TCCR2 , TCCR2_WGM20) ;
    4c14:	85 b5       	in	r24, 0x25	; 37
    4c16:	80 64       	ori	r24, 0x40	; 64
    4c18:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    4c1a:	85 b5       	in	r24, 0x25	; 37
    4c1c:	87 7f       	andi	r24, 0xF7	; 247
    4c1e:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2 , TCCR2_COM21) ;
#elif TIMER2_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR2 , TCCR2_COM20) ;
	SET_BIT(TCCR2 , TCCR2_COM21) ;
#elif TIMER2_CTC_PWM_MODE == TIMER_SET_ON_CTC_CLR_ON_TOP
	SET_BIT(TCCR2 , TCCR2_COM20) ;
    4c20:	85 b5       	in	r24, 0x25	; 37
    4c22:	80 61       	ori	r24, 0x10	; 16
    4c24:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2 , TCCR2_COM21) ;
    4c26:	85 b5       	in	r24, 0x25	; 37
    4c28:	80 62       	ori	r24, 0x20	; 32
    4c2a:	85 bd       	out	0x25, r24	; 37
#else
#error "Wrong TIMER2_CTC_PWM_MODE Config"
#endif

	/*Set the Required CTC Value*/
	OCR2 = TIMER2_CTC_VAL ;
    4c2c:	8a ef       	ldi	r24, 0xFA	; 250
    4c2e:	83 bd       	out	0x23, r24	; 35
#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    4c30:	85 b5       	in	r24, 0x25	; 37
    4c32:	88 7f       	andi	r24, 0xF8	; 248
    4c34:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER ;
    4c36:	85 b5       	in	r24, 0x25	; 37
    4c38:	83 60       	ori	r24, 0x03	; 3
    4c3a:	85 bd       	out	0x25, r24	; 37
}
    4c3c:	08 95       	ret

00004c3e <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
	TCNT0 = Copy_u8Preload ;
    4c3e:	82 bf       	out	0x32, r24	; 50
}
    4c40:	08 95       	ret

00004c42 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
	TCNT1 = Copy_u16Preload ;
    4c42:	9d bd       	out	0x2d, r25	; 45
    4c44:	8c bd       	out	0x2c, r24	; 44
}
    4c46:	08 95       	ret

00004c48 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
	TCNT2 = Copy_u8Preload ;
    4c48:	84 bd       	out	0x24, r24	; 36
}
    4c4a:	08 95       	ret

00004c4c <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
	OCR0 = Copy_u8CTC ;
    4c4c:	8c bf       	out	0x3c, r24	; 60
}
    4c4e:	08 95       	ret

00004c50 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
	OCR1A = Copy_u16CTCA ;
    4c50:	9b bd       	out	0x2b, r25	; 43
    4c52:	8a bd       	out	0x2a, r24	; 42
}
    4c54:	08 95       	ret

00004c56 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
	OCR1B = Copy_u16CTCB ;
    4c56:	99 bd       	out	0x29, r25	; 41
    4c58:	88 bd       	out	0x28, r24	; 40
}
    4c5a:	08 95       	ret

00004c5c <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
	OCR2 = Copy_u8CTC ;
    4c5c:	83 bd       	out	0x23, r24	; 35
}
    4c5e:	08 95       	ret

00004c60 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
	ICR1 = Copy_u16ICR1 ;
    4c60:	97 bd       	out	0x27, r25	; 39
    4c62:	86 bd       	out	0x26, r24	; 38
}
    4c64:	08 95       	ret

00004c66 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
	return TCNT0 ;
    4c66:	82 b7       	in	r24, 0x32	; 50
}
    4c68:	08 95       	ret

00004c6a <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
	return TCNT1 ;
    4c6a:	2c b5       	in	r18, 0x2c	; 44
    4c6c:	3d b5       	in	r19, 0x2d	; 45
}
    4c6e:	c9 01       	movw	r24, r18
    4c70:	08 95       	ret

00004c72 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
	return TCNT2 ;
    4c72:	84 b5       	in	r24, 0x24	; 36
}
    4c74:	08 95       	ret

00004c76 <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
	OCR1A = Copy_u16CompareValue;
    4c76:	9b bd       	out	0x2b, r25	; 43
    4c78:	8a bd       	out	0x2a, r24	; 42
}
    4c7a:	08 95       	ret

00004c7c <TIMER_voidICUInitEnable>:
 */
void TIMER_voidICUInitEnable(void)
{
	/* Set trigger source as rising edge Initially  */
#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    4c7c:	8e b5       	in	r24, 0x2e	; 46
    4c7e:	80 64       	ori	r24, 0x40	; 64
    4c80:	8e bd       	out	0x2e, r24	; 46
#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
	CLR_BIT(TCCR1B,TCCR1B_ICES1);
#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4c82:	89 b7       	in	r24, 0x39	; 57
    4c84:	80 62       	ori	r24, 0x20	; 32
    4c86:	89 bf       	out	0x39, r24	; 57
}
    4c88:	08 95       	ret

00004c8a <TIMER_voidICUSetTriggerEdge>:
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
	u8 Local_u8ErrorStatus = E_OK ;

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    4c8a:	81 30       	cpi	r24, 0x01	; 1
    4c8c:	29 f4       	brne	.+10     	; 0x4c98 <TIMER_voidICUSetTriggerEdge+0xe>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4c8e:	8e b5       	in	r24, 0x2e	; 46
    4c90:	80 64       	ori	r24, 0x40	; 64
    4c92:	8e bd       	out	0x2e, r24	; 46
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	08 95       	ret
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    4c98:	88 23       	and	r24, r24
    4c9a:	11 f0       	breq	.+4      	; 0x4ca0 <TIMER_voidICUSetTriggerEdge+0x16>
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	08 95       	ret
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    4ca0:	8e b5       	in	r24, 0x2e	; 46
    4ca2:	8f 7b       	andi	r24, 0xBF	; 191
    4ca4:	8e bd       	out	0x2e, r24	; 46
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorStatus = E_NOK ;
	}
	return Local_u8ErrorStatus;

}
    4ca8:	08 95       	ret

00004caa <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4caa:	89 b7       	in	r24, 0x39	; 57
    4cac:	80 62       	ori	r24, 0x20	; 32
    4cae:	89 bf       	out	0x39, r24	; 57
}
    4cb0:	08 95       	ret

00004cb2 <TIMER_voidICUDisableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    4cb2:	89 b7       	in	r24, 0x39	; 57
    4cb4:	8f 7d       	andi	r24, 0xDF	; 223
    4cb6:	89 bf       	out	0x39, r24	; 57
}
    4cb8:	08 95       	ret

00004cba <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
	return ICR1;
    4cba:	26 b5       	in	r18, 0x26	; 38
    4cbc:	37 b5       	in	r19, 0x27	; 39
}
    4cbe:	c9 01       	movw	r24, r18
    4cc0:	08 95       	ret

00004cc2 <TIMER_voidWDTSleep>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    4cc2:	81 b5       	in	r24, 0x21	; 33
    4cc4:	88 7f       	andi	r24, 0xF8	; 248
    4cc6:	81 bd       	out	0x21, r24	; 33
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    4cc8:	81 b5       	in	r24, 0x21	; 33
    4cca:	86 60       	ori	r24, 0x06	; 6
    4ccc:	81 bd       	out	0x21, r24	; 33
}
    4cce:	08 95       	ret

00004cd0 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
	SET_BIT (WDTCR , WDTCR_WDE);
    4cd0:	81 b5       	in	r24, 0x21	; 33
    4cd2:	88 60       	ori	r24, 0x08	; 8
    4cd4:	81 bd       	out	0x21, r24	; 33
}
    4cd6:	08 95       	ret

00004cd8 <TIMER_voidWDTDisable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    4cd8:	81 b5       	in	r24, 0x21	; 33
    4cda:	88 61       	ori	r24, 0x18	; 24
    4cdc:	81 bd       	out	0x21, r24	; 33
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    4cde:	11 bc       	out	0x21, r1	; 33
}
    4ce0:	08 95       	ret

00004ce2 <TIMER_u8SetCallBack>:

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	u8 Local_u8ErrorState = E_OK ;

	if (Copy_pvCallBackFunc != NULL)
    4ce2:	00 97       	sbiw	r24, 0x00	; 0
    4ce4:	11 f4       	brne	.+4      	; 0x4cea <TIMER_u8SetCallBack+0x8>
    4ce6:	83 e0       	ldi	r24, 0x03	; 3
    4ce8:	08 95       	ret
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    4cea:	e6 2f       	mov	r30, r22
    4cec:	f0 e0       	ldi	r31, 0x00	; 0
    4cee:	ee 0f       	add	r30, r30
    4cf0:	ff 1f       	adc	r31, r31
    4cf2:	e7 57       	subi	r30, 0x77	; 119
    4cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf6:	91 83       	std	Z+1, r25	; 0x01
    4cf8:	80 83       	st	Z, r24
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    4cfc:	08 95       	ret

00004cfe <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    4cfe:	1f 92       	push	r1
    4d00:	0f 92       	push	r0
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	0f 92       	push	r0
    4d06:	11 24       	eor	r1, r1
    4d08:	2f 93       	push	r18
    4d0a:	3f 93       	push	r19
    4d0c:	4f 93       	push	r20
    4d0e:	5f 93       	push	r21
    4d10:	6f 93       	push	r22
    4d12:	7f 93       	push	r23
    4d14:	8f 93       	push	r24
    4d16:	9f 93       	push	r25
    4d18:	af 93       	push	r26
    4d1a:	bf 93       	push	r27
    4d1c:	ef 93       	push	r30
    4d1e:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    4d20:	e0 91 9f 01 	lds	r30, 0x019F
    4d24:	f0 91 a0 01 	lds	r31, 0x01A0
    4d28:	30 97       	sbiw	r30, 0x00	; 0
    4d2a:	09 f0       	breq	.+2      	; 0x4d2e <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    4d2c:	09 95       	icall
	}
}
    4d2e:	ff 91       	pop	r31
    4d30:	ef 91       	pop	r30
    4d32:	bf 91       	pop	r27
    4d34:	af 91       	pop	r26
    4d36:	9f 91       	pop	r25
    4d38:	8f 91       	pop	r24
    4d3a:	7f 91       	pop	r23
    4d3c:	6f 91       	pop	r22
    4d3e:	5f 91       	pop	r21
    4d40:	4f 91       	pop	r20
    4d42:	3f 91       	pop	r19
    4d44:	2f 91       	pop	r18
    4d46:	0f 90       	pop	r0
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	0f 90       	pop	r0
    4d4c:	1f 90       	pop	r1
    4d4e:	18 95       	reti

00004d50 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    4d50:	1f 92       	push	r1
    4d52:	0f 92       	push	r0
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	0f 92       	push	r0
    4d58:	11 24       	eor	r1, r1
    4d5a:	2f 93       	push	r18
    4d5c:	3f 93       	push	r19
    4d5e:	4f 93       	push	r20
    4d60:	5f 93       	push	r21
    4d62:	6f 93       	push	r22
    4d64:	7f 93       	push	r23
    4d66:	8f 93       	push	r24
    4d68:	9f 93       	push	r25
    4d6a:	af 93       	push	r26
    4d6c:	bf 93       	push	r27
    4d6e:	ef 93       	push	r30
    4d70:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    4d72:	e0 91 9d 01 	lds	r30, 0x019D
    4d76:	f0 91 9e 01 	lds	r31, 0x019E
    4d7a:	30 97       	sbiw	r30, 0x00	; 0
    4d7c:	09 f0       	breq	.+2      	; 0x4d80 <__vector_10+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    4d7e:	09 95       	icall
	}
}
    4d80:	ff 91       	pop	r31
    4d82:	ef 91       	pop	r30
    4d84:	bf 91       	pop	r27
    4d86:	af 91       	pop	r26
    4d88:	9f 91       	pop	r25
    4d8a:	8f 91       	pop	r24
    4d8c:	7f 91       	pop	r23
    4d8e:	6f 91       	pop	r22
    4d90:	5f 91       	pop	r21
    4d92:	4f 91       	pop	r20
    4d94:	3f 91       	pop	r19
    4d96:	2f 91       	pop	r18
    4d98:	0f 90       	pop	r0
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	0f 90       	pop	r0
    4d9e:	1f 90       	pop	r1
    4da0:	18 95       	reti

00004da2 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    4da2:	1f 92       	push	r1
    4da4:	0f 92       	push	r0
    4da6:	0f b6       	in	r0, 0x3f	; 63
    4da8:	0f 92       	push	r0
    4daa:	11 24       	eor	r1, r1
    4dac:	2f 93       	push	r18
    4dae:	3f 93       	push	r19
    4db0:	4f 93       	push	r20
    4db2:	5f 93       	push	r21
    4db4:	6f 93       	push	r22
    4db6:	7f 93       	push	r23
    4db8:	8f 93       	push	r24
    4dba:	9f 93       	push	r25
    4dbc:	af 93       	push	r26
    4dbe:	bf 93       	push	r27
    4dc0:	ef 93       	push	r30
    4dc2:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    4dc4:	e0 91 9b 01 	lds	r30, 0x019B
    4dc8:	f0 91 9c 01 	lds	r31, 0x019C
    4dcc:	30 97       	sbiw	r30, 0x00	; 0
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    4dd0:	09 95       	icall
	}
}
    4dd2:	ff 91       	pop	r31
    4dd4:	ef 91       	pop	r30
    4dd6:	bf 91       	pop	r27
    4dd8:	af 91       	pop	r26
    4dda:	9f 91       	pop	r25
    4ddc:	8f 91       	pop	r24
    4dde:	7f 91       	pop	r23
    4de0:	6f 91       	pop	r22
    4de2:	5f 91       	pop	r21
    4de4:	4f 91       	pop	r20
    4de6:	3f 91       	pop	r19
    4de8:	2f 91       	pop	r18
    4dea:	0f 90       	pop	r0
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	0f 90       	pop	r0
    4df0:	1f 90       	pop	r1
    4df2:	18 95       	reti

00004df4 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    4df4:	1f 92       	push	r1
    4df6:	0f 92       	push	r0
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	0f 92       	push	r0
    4dfc:	11 24       	eor	r1, r1
    4dfe:	2f 93       	push	r18
    4e00:	3f 93       	push	r19
    4e02:	4f 93       	push	r20
    4e04:	5f 93       	push	r21
    4e06:	6f 93       	push	r22
    4e08:	7f 93       	push	r23
    4e0a:	8f 93       	push	r24
    4e0c:	9f 93       	push	r25
    4e0e:	af 93       	push	r26
    4e10:	bf 93       	push	r27
    4e12:	ef 93       	push	r30
    4e14:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    4e16:	e0 91 99 01 	lds	r30, 0x0199
    4e1a:	f0 91 9a 01 	lds	r31, 0x019A
    4e1e:	30 97       	sbiw	r30, 0x00	; 0
    4e20:	09 f0       	breq	.+2      	; 0x4e24 <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    4e22:	09 95       	icall
	}
}
    4e24:	ff 91       	pop	r31
    4e26:	ef 91       	pop	r30
    4e28:	bf 91       	pop	r27
    4e2a:	af 91       	pop	r26
    4e2c:	9f 91       	pop	r25
    4e2e:	8f 91       	pop	r24
    4e30:	7f 91       	pop	r23
    4e32:	6f 91       	pop	r22
    4e34:	5f 91       	pop	r21
    4e36:	4f 91       	pop	r20
    4e38:	3f 91       	pop	r19
    4e3a:	2f 91       	pop	r18
    4e3c:	0f 90       	pop	r0
    4e3e:	0f be       	out	0x3f, r0	; 63
    4e40:	0f 90       	pop	r0
    4e42:	1f 90       	pop	r1
    4e44:	18 95       	reti

00004e46 <__vector_6>:
}
*/
/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    4e46:	1f 92       	push	r1
    4e48:	0f 92       	push	r0
    4e4a:	0f b6       	in	r0, 0x3f	; 63
    4e4c:	0f 92       	push	r0
    4e4e:	11 24       	eor	r1, r1
    4e50:	2f 93       	push	r18
    4e52:	3f 93       	push	r19
    4e54:	4f 93       	push	r20
    4e56:	5f 93       	push	r21
    4e58:	6f 93       	push	r22
    4e5a:	7f 93       	push	r23
    4e5c:	8f 93       	push	r24
    4e5e:	9f 93       	push	r25
    4e60:	af 93       	push	r26
    4e62:	bf 93       	push	r27
    4e64:	ef 93       	push	r30
    4e66:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    4e68:	e0 91 95 01 	lds	r30, 0x0195
    4e6c:	f0 91 96 01 	lds	r31, 0x0196
    4e70:	30 97       	sbiw	r30, 0x00	; 0
    4e72:	09 f0       	breq	.+2      	; 0x4e76 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    4e74:	09 95       	icall
	}
}
    4e76:	ff 91       	pop	r31
    4e78:	ef 91       	pop	r30
    4e7a:	bf 91       	pop	r27
    4e7c:	af 91       	pop	r26
    4e7e:	9f 91       	pop	r25
    4e80:	8f 91       	pop	r24
    4e82:	7f 91       	pop	r23
    4e84:	6f 91       	pop	r22
    4e86:	5f 91       	pop	r21
    4e88:	4f 91       	pop	r20
    4e8a:	3f 91       	pop	r19
    4e8c:	2f 91       	pop	r18
    4e8e:	0f 90       	pop	r0
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	0f 90       	pop	r0
    4e94:	1f 90       	pop	r1
    4e96:	18 95       	reti

00004e98 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    4e98:	1f 92       	push	r1
    4e9a:	0f 92       	push	r0
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	0f 92       	push	r0
    4ea0:	11 24       	eor	r1, r1
    4ea2:	2f 93       	push	r18
    4ea4:	3f 93       	push	r19
    4ea6:	4f 93       	push	r20
    4ea8:	5f 93       	push	r21
    4eaa:	6f 93       	push	r22
    4eac:	7f 93       	push	r23
    4eae:	8f 93       	push	r24
    4eb0:	9f 93       	push	r25
    4eb2:	af 93       	push	r26
    4eb4:	bf 93       	push	r27
    4eb6:	ef 93       	push	r30
    4eb8:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    4eba:	e0 91 93 01 	lds	r30, 0x0193
    4ebe:	f0 91 94 01 	lds	r31, 0x0194
    4ec2:	30 97       	sbiw	r30, 0x00	; 0
    4ec4:	09 f0       	breq	.+2      	; 0x4ec8 <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    4ec6:	09 95       	icall
	}
}
    4ec8:	ff 91       	pop	r31
    4eca:	ef 91       	pop	r30
    4ecc:	bf 91       	pop	r27
    4ece:	af 91       	pop	r26
    4ed0:	9f 91       	pop	r25
    4ed2:	8f 91       	pop	r24
    4ed4:	7f 91       	pop	r23
    4ed6:	6f 91       	pop	r22
    4ed8:	5f 91       	pop	r21
    4eda:	4f 91       	pop	r20
    4edc:	3f 91       	pop	r19
    4ede:	2f 91       	pop	r18
    4ee0:	0f 90       	pop	r0
    4ee2:	0f be       	out	0x3f, r0	; 63
    4ee4:	0f 90       	pop	r0
    4ee6:	1f 90       	pop	r1
    4ee8:	18 95       	reti

00004eea <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    4eea:	1f 92       	push	r1
    4eec:	0f 92       	push	r0
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	0f 92       	push	r0
    4ef2:	11 24       	eor	r1, r1
    4ef4:	2f 93       	push	r18
    4ef6:	3f 93       	push	r19
    4ef8:	4f 93       	push	r20
    4efa:	5f 93       	push	r21
    4efc:	6f 93       	push	r22
    4efe:	7f 93       	push	r23
    4f00:	8f 93       	push	r24
    4f02:	9f 93       	push	r25
    4f04:	af 93       	push	r26
    4f06:	bf 93       	push	r27
    4f08:	ef 93       	push	r30
    4f0a:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    4f0c:	e0 91 91 01 	lds	r30, 0x0191
    4f10:	f0 91 92 01 	lds	r31, 0x0192
    4f14:	30 97       	sbiw	r30, 0x00	; 0
    4f16:	09 f0       	breq	.+2      	; 0x4f1a <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    4f18:	09 95       	icall
	}
}
    4f1a:	ff 91       	pop	r31
    4f1c:	ef 91       	pop	r30
    4f1e:	bf 91       	pop	r27
    4f20:	af 91       	pop	r26
    4f22:	9f 91       	pop	r25
    4f24:	8f 91       	pop	r24
    4f26:	7f 91       	pop	r23
    4f28:	6f 91       	pop	r22
    4f2a:	5f 91       	pop	r21
    4f2c:	4f 91       	pop	r20
    4f2e:	3f 91       	pop	r19
    4f30:	2f 91       	pop	r18
    4f32:	0f 90       	pop	r0
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	0f 90       	pop	r0
    4f38:	1f 90       	pop	r1
    4f3a:	18 95       	reti

00004f3c <Timer0_Interrupt_voidEnable>:
void Timer0_Interrupt_voidEnable(void)
{
	SET_BIT(TIMSK , TIMSK_TOIE0) ;
    4f3c:	89 b7       	in	r24, 0x39	; 57
    4f3e:	81 60       	ori	r24, 0x01	; 1
    4f40:	89 bf       	out	0x39, r24	; 57
}
    4f42:	08 95       	ret

00004f44 <Timer0_Interrupt_voidDisable>:

void Timer0_Interrupt_voidDisable(void)
{
	CLR_BIT(TIMSK , TIMSK_TOIE0);
    4f44:	89 b7       	in	r24, 0x39	; 57
    4f46:	8e 7f       	andi	r24, 0xFE	; 254
    4f48:	89 bf       	out	0x39, r24	; 57
}
    4f4a:	08 95       	ret

00004f4c <SPI_Init>:
/******************MCAL*********************/
#include "../SPI/SPI_Private.h"
#include "SPI.h"
void SPI_Init(SPIMode_type mode)
{
	if(mode==Master)
    4f4c:	88 23       	and	r24, r24
    4f4e:	11 f4       	brne	.+4      	; 0x4f54 <SPI_Init+0x8>
	{
		//clock 2Mhz
		SET_BIT(SPCR , SPCR_MSTR) ;
    4f50:	6c 9a       	sbi	0x0d, 4	; 13
    4f52:	01 c0       	rjmp	.+2      	; 0x4f56 <SPI_Init+0xa>
	}
	else
	{
		CLR_BIT(SPCR , SPCR_MSTR) ;
    4f54:	6c 98       	cbi	0x0d, 4	; 13
	}
	// SPI Enable
	SET_BIT(SPCR,SPCR_SPE);
    4f56:	6e 9a       	sbi	0x0d, 6	; 13
}
    4f58:	08 95       	ret

00004f5a <SPI_SendReceieve>:
u8 SPI_SendReceieve(u8 data)
{
	SPDR=data;
    4f5a:	8f b9       	out	0x0f, r24	; 15
	while(!(GET_BIT(SPSR , SPSR_SPIF)));
    4f5c:	77 9b       	sbis	0x0e, 7	; 14
    4f5e:	fe cf       	rjmp	.-4      	; 0x4f5c <SPI_SendReceieve+0x2>
	return  SPDR;
    4f60:	8f b1       	in	r24, 0x0f	; 15
}
    4f62:	08 95       	ret

00004f64 <SPI_Receieveperodic>:
u8 SPI_Receieveperodic(u8 *pdata)
{
    4f64:	fc 01       	movw	r30, r24
	if(GET_BIT(SPSR , SPSR_SPIF))
    4f66:	77 99       	sbic	0x0e, 7	; 14
    4f68:	02 c0       	rjmp	.+4      	; 0x4f6e <SPI_Receieveperodic+0xa>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	08 95       	ret
	{
		*pdata=SPDR;
    4f6e:	8f b1       	in	r24, 0x0f	; 15
    4f70:	80 83       	st	Z, r24
    4f72:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    4f74:	08 95       	ret

00004f76 <SPI_Receieve>:
u8 SPI_Receieve()
{
	return SPDR;
    4f76:	8f b1       	in	r24, 0x0f	; 15
}
    4f78:	08 95       	ret

00004f7a <SPI_Send>:
void SPI_Send(u8 data)
{
	SPDR=data;
    4f7a:	8f b9       	out	0x0f, r24	; 15
}
    4f7c:	08 95       	ret

00004f7e <SPI_VoidInit>:
{
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
    4f7e:	6d 98       	cbi	0x0d, 5	; 13

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
	#elif SPI_MASTER_SLAVE_SELECT == SPI_SLAVE
		CLR_BIT(SPCR , SPCR_MSTR) ;
    4f80:	6c 98       	cbi	0x0d, 4	; 13
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
    4f82:	6b 98       	cbi	0x0d, 3	; 13
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
    4f84:	6a 98       	cbi	0x0d, 2	; 13
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
    4f86:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR , SPCR_SPR1) ;
    4f88:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR , SPSR_SPI2X) ;
    4f8a:	70 98       	cbi	0x0e, 0	; 14
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
    4f8c:	6f 98       	cbi	0x0d, 7	; 13

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
    4f8e:	6e 9a       	sbi	0x0d, 6	; 13
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
    4f90:	08 95       	ret

00004f92 <SPI_u8InitConfig>:


*/

u8 SPI_u8InitConfig (SPI_CONFIG * spi)
{
    4f92:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if ((spi != NULL) && (spi->SPI_u8ClockPhase != 0) && (spi->SPI_u8ClockPolarity != 0) && (spi->SPI_u8ClockRate != 0) && (spi->SPI_u8DataOrder != 0) && (spi->SPI_u8InterruptEnable != 0) && (spi->SPI_u8MasterSlaveSelect != 0) && (spi->SPI_u8SPIEnable != 0))
    4f94:	00 97       	sbiw	r24, 0x00	; 0
    4f96:	09 f4       	brne	.+2      	; 0x4f9a <SPI_u8InitConfig+0x8>
    4f98:	78 c0       	rjmp	.+240    	; 0x508a <SPI_u8InitConfig+0xf8>
    4f9a:	35 81       	ldd	r19, Z+5	; 0x05
    4f9c:	33 23       	and	r19, r19
    4f9e:	09 f4       	brne	.+2      	; 0x4fa2 <SPI_u8InitConfig+0x10>
    4fa0:	74 c0       	rjmp	.+232    	; 0x508a <SPI_u8InitConfig+0xf8>
    4fa2:	44 81       	ldd	r20, Z+4	; 0x04
    4fa4:	44 23       	and	r20, r20
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <SPI_u8InitConfig+0x18>
    4fa8:	70 c0       	rjmp	.+224    	; 0x508a <SPI_u8InitConfig+0xf8>
    4faa:	26 81       	ldd	r18, Z+6	; 0x06
    4fac:	22 23       	and	r18, r18
    4fae:	09 f4       	brne	.+2      	; 0x4fb2 <SPI_u8InitConfig+0x20>
    4fb0:	6c c0       	rjmp	.+216    	; 0x508a <SPI_u8InitConfig+0xf8>
    4fb2:	52 81       	ldd	r21, Z+2	; 0x02
    4fb4:	55 23       	and	r21, r21
    4fb6:	09 f4       	brne	.+2      	; 0x4fba <SPI_u8InitConfig+0x28>
    4fb8:	68 c0       	rjmp	.+208    	; 0x508a <SPI_u8InitConfig+0xf8>
    4fba:	70 81       	ld	r23, Z
    4fbc:	77 23       	and	r23, r23
    4fbe:	09 f4       	brne	.+2      	; 0x4fc2 <SPI_u8InitConfig+0x30>
    4fc0:	64 c0       	rjmp	.+200    	; 0x508a <SPI_u8InitConfig+0xf8>
    4fc2:	63 81       	ldd	r22, Z+3	; 0x03
    4fc4:	66 23       	and	r22, r22
    4fc6:	09 f4       	brne	.+2      	; 0x4fca <SPI_u8InitConfig+0x38>
    4fc8:	60 c0       	rjmp	.+192    	; 0x508a <SPI_u8InitConfig+0xf8>
    4fca:	91 81       	ldd	r25, Z+1	; 0x01
    4fcc:	99 23       	and	r25, r25
    4fce:	09 f4       	brne	.+2      	; 0x4fd2 <SPI_u8InitConfig+0x40>
    4fd0:	5c c0       	rjmp	.+184    	; 0x508a <SPI_u8InitConfig+0xf8>
	{
		switch (spi->SPI_u8ClockPhase)
    4fd2:	31 30       	cpi	r19, 0x01	; 1
    4fd4:	21 f0       	breq	.+8      	; 0x4fde <SPI_u8InitConfig+0x4c>
    4fd6:	32 30       	cpi	r19, 0x02	; 2
    4fd8:	21 f0       	breq	.+8      	; 0x4fe2 <SPI_u8InitConfig+0x50>
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	04 c0       	rjmp	.+8      	; 0x4fe6 <SPI_u8InitConfig+0x54>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING: CLR_BIT(SPCR,SPCR_CPHA) ; break ;
    4fde:	6a 98       	cbi	0x0d, 2	; 13
    4fe0:	01 c0       	rjmp	.+2      	; 0x4fe4 <SPI_u8InitConfig+0x52>
		case SPI_SETUP_LEADING_SAMPLE_TRAILING: SET_BIT(SPCR,SPCR_CPHA) ; break ;
    4fe2:	6a 9a       	sbi	0x0d, 2	; 13
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
		default: 								Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8ClockPolarity)
    4fe6:	41 30       	cpi	r20, 0x01	; 1
    4fe8:	21 f0       	breq	.+8      	; 0x4ff2 <SPI_u8InitConfig+0x60>
    4fea:	42 30       	cpi	r20, 0x02	; 2
    4fec:	21 f0       	breq	.+8      	; 0x4ff6 <SPI_u8InitConfig+0x64>
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	03 c0       	rjmp	.+6      	; 0x4ff8 <SPI_u8InitConfig+0x66>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING: CLR_BIT(SPCR , SPCR_CPOL) ; break ;
    4ff2:	6b 98       	cbi	0x0d, 3	; 13
    4ff4:	01 c0       	rjmp	.+2      	; 0x4ff8 <SPI_u8InitConfig+0x66>
		case SPI_FALLING_LEADING_RISING_TRAILING: SET_BIT(SPCR , SPCR_CPOL) ; break ;
    4ff6:	6b 9a       	sbi	0x0d, 3	; 13
		default:								  Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8ClockRate)
    4ff8:	23 30       	cpi	r18, 0x03	; 3
    4ffa:	b9 f0       	breq	.+46     	; 0x502a <SPI_u8InitConfig+0x98>
    4ffc:	24 30       	cpi	r18, 0x04	; 4
    4ffe:	28 f4       	brcc	.+10     	; 0x500a <SPI_u8InitConfig+0x78>
    5000:	21 30       	cpi	r18, 0x01	; 1
    5002:	69 f0       	breq	.+26     	; 0x501e <SPI_u8InitConfig+0x8c>
    5004:	22 30       	cpi	r18, 0x02	; 2
    5006:	68 f4       	brcc	.+26     	; 0x5022 <SPI_u8InitConfig+0x90>
    5008:	08 c0       	rjmp	.+16     	; 0x501a <SPI_u8InitConfig+0x88>
    500a:	25 30       	cpi	r18, 0x05	; 5
    500c:	a1 f0       	breq	.+40     	; 0x5036 <SPI_u8InitConfig+0xa4>
    500e:	25 30       	cpi	r18, 0x05	; 5
    5010:	78 f0       	brcs	.+30     	; 0x5030 <SPI_u8InitConfig+0x9e>
    5012:	26 30       	cpi	r18, 0x06	; 6
    5014:	91 f0       	breq	.+36     	; 0x503a <SPI_u8InitConfig+0xa8>
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	13 c0       	rjmp	.+38     	; 0x5040 <SPI_u8InitConfig+0xae>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    501a:	68 98       	cbi	0x0d, 0	; 13
    501c:	03 c0       	rjmp	.+6      	; 0x5024 <SPI_u8InitConfig+0x92>
			CLR_BIT(SPCR , SPCR_SPR1) ;
			SET_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    501e:	68 98       	cbi	0x0d, 0	; 13
    5020:	05 c0       	rjmp	.+10     	; 0x502c <SPI_u8InitConfig+0x9a>
			CLR_BIT(SPCR , SPCR_SPR1) ;
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR , SPCR_SPR0) ;
    5022:	68 9a       	sbi	0x0d, 0	; 13
			CLR_BIT(SPCR , SPCR_SPR1) ;
    5024:	69 98       	cbi	0x0d, 1	; 13
			SET_BIT(SPSR , SPSR_SPI2X) ;
    5026:	70 9a       	sbi	0x0e, 0	; 14
    5028:	0b c0       	rjmp	.+22     	; 0x5040 <SPI_u8InitConfig+0xae>
			break ;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR , SPCR_SPR0) ;
    502a:	68 9a       	sbi	0x0d, 0	; 13
			CLR_BIT(SPCR , SPCR_SPR1) ;
    502c:	69 98       	cbi	0x0d, 1	; 13
    502e:	07 c0       	rjmp	.+14     	; 0x503e <SPI_u8InitConfig+0xac>
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    5030:	68 98       	cbi	0x0d, 0	; 13
			SET_BIT(SPCR , SPCR_SPR1) ;
    5032:	69 9a       	sbi	0x0d, 1	; 13
    5034:	f8 cf       	rjmp	.-16     	; 0x5026 <SPI_u8InitConfig+0x94>
			SET_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    5036:	68 98       	cbi	0x0d, 0	; 13
    5038:	01 c0       	rjmp	.+2      	; 0x503c <SPI_u8InitConfig+0xaa>
			SET_BIT(SPCR , SPCR_SPR1) ;
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR , SPCR_SPR0) ;
    503a:	68 9a       	sbi	0x0d, 0	; 13
			SET_BIT(SPCR , SPCR_SPR1) ;
    503c:	69 9a       	sbi	0x0d, 1	; 13
			CLR_BIT(SPSR , SPSR_SPI2X) ;
    503e:	70 98       	cbi	0x0e, 0	; 14
			break ;
		default:
			Local_u8ErrorState = E_NOK ;
			break ;
		}
		switch (spi->SPI_u8DataOrder)
    5040:	51 30       	cpi	r21, 0x01	; 1
    5042:	31 f0       	breq	.+12     	; 0x5050 <SPI_u8InitConfig+0xbe>
    5044:	52 30       	cpi	r21, 0x02	; 2
    5046:	11 f0       	breq	.+4      	; 0x504c <SPI_u8InitConfig+0xba>
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	03 c0       	rjmp	.+6      	; 0x5052 <SPI_u8InitConfig+0xc0>
		{
		case SPI_DATA_MSP_FIRST: CLR_BIT(SPCR , SPCR_DORD) ; break ;
    504c:	6d 98       	cbi	0x0d, 5	; 13
    504e:	01 c0       	rjmp	.+2      	; 0x5052 <SPI_u8InitConfig+0xc0>
		case SPI_DATA_LSB_FIRST: SET_BIT(SPCR , SPCR_DORD) ; break ;
    5050:	6d 9a       	sbi	0x0d, 5	; 13
		default:				 Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8MasterSlaveSelect)
    5052:	61 30       	cpi	r22, 0x01	; 1
    5054:	21 f0       	breq	.+8      	; 0x505e <SPI_u8InitConfig+0xcc>
    5056:	62 30       	cpi	r22, 0x02	; 2
    5058:	21 f0       	breq	.+8      	; 0x5062 <SPI_u8InitConfig+0xd0>
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	03 c0       	rjmp	.+6      	; 0x5064 <SPI_u8InitConfig+0xd2>
		{
		case SPI_MASTER: SET_BIT(SPCR , SPCR_MSTR) ; break ;
    505e:	6c 9a       	sbi	0x0d, 4	; 13
    5060:	01 c0       	rjmp	.+2      	; 0x5064 <SPI_u8InitConfig+0xd2>
		case SPI_SLAVE:  CLR_BIT(SPCR , SPCR_MSTR) ; break ;
    5062:	6c 98       	cbi	0x0d, 4	; 13
		default:		 Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8InterruptEnable)
    5064:	71 30       	cpi	r23, 0x01	; 1
    5066:	21 f0       	breq	.+8      	; 0x5070 <SPI_u8InitConfig+0xde>
    5068:	72 30       	cpi	r23, 0x02	; 2
    506a:	21 f0       	breq	.+8      	; 0x5074 <SPI_u8InitConfig+0xe2>
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	03 c0       	rjmp	.+6      	; 0x5076 <SPI_u8InitConfig+0xe4>
		{
		case SPI_INTERRUPT_DISABLE: CLR_BIT(SPCR , SPCR_SPIE) ; break ;
    5070:	6f 98       	cbi	0x0d, 7	; 13
    5072:	01 c0       	rjmp	.+2      	; 0x5076 <SPI_u8InitConfig+0xe4>
		case SPI_INTERRUPT_ENABLE:  SET_BIT(SPCR , SPCR_SPIE) ; break ;
    5074:	6f 9a       	sbi	0x0d, 7	; 13
		default:		 			Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8SPIEnable)
    5076:	91 30       	cpi	r25, 0x01	; 1
    5078:	21 f0       	breq	.+8      	; 0x5082 <SPI_u8InitConfig+0xf0>
    507a:	92 30       	cpi	r25, 0x02	; 2
    507c:	21 f0       	breq	.+8      	; 0x5086 <SPI_u8InitConfig+0xf4>
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	08 95       	ret
		{
		case SPI_DISABLE: CLR_BIT(SPCR , SPCR_SPE) ; break ;
    5082:	6e 98       	cbi	0x0d, 6	; 13
    5084:	08 95       	ret
		case SPI_ENABLE:  SET_BIT(SPCR , SPCR_SPE) ; break ;
    5086:	6e 9a       	sbi	0x0d, 6	; 13
    5088:	08 95       	ret
    508a:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}
	return Local_u8ErrorState ;
}
    508c:	08 95       	ret

0000508e <SPI_u8Tranceive>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8Tranceive (u8 Copy_u8TData , u8 * Copy_u8RData)
{
    508e:	98 2f       	mov	r25, r24
    5090:	fb 01       	movw	r30, r22
	u8 Local_u8ErrorState = E_OK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
    5092:	80 91 ab 01 	lds	r24, 0x01AB
    5096:	88 23       	and	r24, r24
    5098:	11 f0       	breq	.+4      	; 0x509e <SPI_u8Tranceive+0x10>
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	08 95       	ret
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8TData ;
    509e:	9f b9       	out	0x0f, r25	; 15

		while (((GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT))
    50a0:	77 9b       	sbis	0x0e, 7	; 14
    50a2:	fe cf       	rjmp	.-4      	; 0x50a0 <SPI_u8Tranceive+0x12>
		{
			Local_u8ErrorState = E_NOK ;
		}
		else
		{
			* Copy_u8RData = SPDR ;
    50a4:	8f b1       	in	r24, 0x0f	; 15
    50a6:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE ;
    50a8:	10 92 ab 01 	sts	0x01AB, r1
    50ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    50ae:	08 95       	ret

000050b0 <SPI_u8BufferTranceiverSynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverSynch (u8 * Copy_u8TData , u8 * Copy_u8RData , u8 Copy_u8BufferSize)
{
    50b0:	df 92       	push	r13
    50b2:	ef 92       	push	r14
    50b4:	ff 92       	push	r15
    50b6:	0f 93       	push	r16
    50b8:	1f 93       	push	r17
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	7b 01       	movw	r14, r22
    50c0:	d4 2e       	mov	r13, r20
	u8 Local_u8ErrorState = E_OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
    50c2:	00 97       	sbiw	r24, 0x00	; 0
    50c4:	a1 f0       	breq	.+40     	; 0x50ee <SPI_u8BufferTranceiverSynch+0x3e>
    50c6:	61 15       	cp	r22, r1
    50c8:	71 05       	cpc	r23, r1
    50ca:	89 f0       	breq	.+34     	; 0x50ee <SPI_u8BufferTranceiverSynch+0x3e>
    50cc:	8c 01       	movw	r16, r24
    50ce:	c0 e0       	ldi	r28, 0x00	; 0
    50d0:	d0 e0       	ldi	r29, 0x00	; 0
    50d2:	09 c0       	rjmp	.+18     	; 0x50e6 <SPI_u8BufferTranceiverSynch+0x36>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter] , &Copy_u8RData[Local_u8Counter]) ;
    50d4:	b7 01       	movw	r22, r14
    50d6:	6c 0f       	add	r22, r28
    50d8:	7d 1f       	adc	r23, r29
    50da:	f8 01       	movw	r30, r16
    50dc:	81 91       	ld	r24, Z+
    50de:	8f 01       	movw	r16, r30
    50e0:	0e 94 47 28 	call	0x508e	; 0x508e <SPI_u8Tranceive>
    50e4:	21 96       	adiw	r28, 0x01	; 1
{
	u8 Local_u8ErrorState = E_OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
    50e6:	cd 15       	cp	r28, r13
    50e8:	a8 f3       	brcs	.-22     	; 0x50d4 <SPI_u8BufferTranceiverSynch+0x24>
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	01 c0       	rjmp	.+2      	; 0x50f0 <SPI_u8BufferTranceiverSynch+0x40>
    50ee:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}
	return Local_u8ErrorState ;
}
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	1f 91       	pop	r17
    50f6:	0f 91       	pop	r16
    50f8:	ff 90       	pop	r15
    50fa:	ef 90       	pop	r14
    50fc:	df 90       	pop	r13
    50fe:	08 95       	ret

00005100 <SPI_u8BufferTranceiverAsynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverAsynch (SPI_BUFFER * spi_buffer)
{
    5100:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (SPI_u8State == IDLE)
    5102:	80 91 ab 01 	lds	r24, 0x01AB
    5106:	88 23       	and	r24, r24
    5108:	11 f0       	breq	.+4      	; 0x510e <SPI_u8BufferTranceiverAsynch+0xe>
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	08 95       	ret
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
    510e:	30 97       	sbiw	r30, 0x00	; 0
    5110:	39 f1       	breq	.+78     	; 0x5160 <SPI_u8BufferTranceiverAsynch+0x60>
    5112:	a0 81       	ld	r26, Z
    5114:	b1 81       	ldd	r27, Z+1	; 0x01
    5116:	10 97       	sbiw	r26, 0x00	; 0
    5118:	19 f1       	breq	.+70     	; 0x5160 <SPI_u8BufferTranceiverAsynch+0x60>
    511a:	42 81       	ldd	r20, Z+2	; 0x02
    511c:	53 81       	ldd	r21, Z+3	; 0x03
    511e:	41 15       	cp	r20, r1
    5120:	51 05       	cpc	r21, r1
    5122:	f1 f0       	breq	.+60     	; 0x5160 <SPI_u8BufferTranceiverAsynch+0x60>
    5124:	25 81       	ldd	r18, Z+5	; 0x05
    5126:	36 81       	ldd	r19, Z+6	; 0x06
    5128:	21 15       	cp	r18, r1
    512a:	31 05       	cpc	r19, r1
    512c:	c9 f0       	breq	.+50     	; 0x5160 <SPI_u8BufferTranceiverAsynch+0x60>
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY ;
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	80 93 ab 01 	sts	0x01AB, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData = spi_buffer->Copy_u8TData ;
    5134:	b0 93 af 01 	sts	0x01AF, r27
    5138:	a0 93 ae 01 	sts	0x01AE, r26
			SPI_pu8RData = spi_buffer->Copy_u8RData ;
    513c:	50 93 aa 01 	sts	0x01AA, r21
    5140:	40 93 a9 01 	sts	0x01A9, r20
			SPI_u8BufferSize = spi_buffer->Copy_u8BufferSize ;
    5144:	84 81       	ldd	r24, Z+4	; 0x04
    5146:	80 93 b0 01 	sts	0x01B0, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn ;
    514a:	30 93 ad 01 	sts	0x01AD, r19
    514e:	20 93 ac 01 	sts	0x01AC, r18

			/*Set Index to first element*/
			SPI_u8Index = 0 ;
    5152:	10 92 b1 01 	sts	0x01B1, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index] ;
    5156:	8c 91       	ld	r24, X
    5158:	8f b9       	out	0x0f, r24	; 15

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR , SPCR_SPIE) ;
    515a:	6f 9a       	sbi	0x0d, 7	; 13
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (SPI_u8State == IDLE)
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
    5160:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		Local_u8ErrorState = E_NOK ;
	}
	return Local_u8ErrorState ;
}
    5162:	08 95       	ret

00005164 <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12 (void)		__attribute__ ((signal)) ;
void __vector_12 (void)
{
    5164:	1f 92       	push	r1
    5166:	0f 92       	push	r0
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	0f 92       	push	r0
    516c:	11 24       	eor	r1, r1
    516e:	2f 93       	push	r18
    5170:	3f 93       	push	r19
    5172:	4f 93       	push	r20
    5174:	5f 93       	push	r21
    5176:	6f 93       	push	r22
    5178:	7f 93       	push	r23
    517a:	8f 93       	push	r24
    517c:	9f 93       	push	r25
    517e:	af 93       	push	r26
    5180:	bf 93       	push	r27
    5182:	ef 93       	push	r30
    5184:	ff 93       	push	r31
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR ;
    5186:	90 91 b1 01 	lds	r25, 0x01B1
    518a:	8f b1       	in	r24, 0x0f	; 15
    518c:	e0 91 a9 01 	lds	r30, 0x01A9
    5190:	f0 91 aa 01 	lds	r31, 0x01AA
    5194:	e9 0f       	add	r30, r25
    5196:	f1 1d       	adc	r31, r1
    5198:	80 83       	st	Z, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++ ;
    519a:	9f 5f       	subi	r25, 0xFF	; 255
    519c:	90 93 b1 01 	sts	0x01B1, r25

	if (SPI_u8Index == SPI_u8BufferSize)
    51a0:	80 91 b0 01 	lds	r24, 0x01B0
    51a4:	98 17       	cp	r25, r24
    51a6:	49 f4       	brne	.+18     	; 0x51ba <__vector_12+0x56>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE ;
    51a8:	10 92 ab 01 	sts	0x01AB, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR , SPCR_SPIE) ;
    51ac:	6f 98       	cbi	0x0d, 7	; 13

		/*Call Notification Function*/
		SPI_pvNotificationFunc() ;
    51ae:	e0 91 ac 01 	lds	r30, 0x01AC
    51b2:	f0 91 ad 01 	lds	r31, 0x01AD
    51b6:	09 95       	icall
    51b8:	08 c0       	rjmp	.+16     	; 0x51ca <__vector_12+0x66>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index] ;
    51ba:	e0 91 ae 01 	lds	r30, 0x01AE
    51be:	f0 91 af 01 	lds	r31, 0x01AF
    51c2:	e9 0f       	add	r30, r25
    51c4:	f1 1d       	adc	r31, r1
    51c6:	80 81       	ld	r24, Z
    51c8:	8f b9       	out	0x0f, r24	; 15
	}
}
    51ca:	ff 91       	pop	r31
    51cc:	ef 91       	pop	r30
    51ce:	bf 91       	pop	r27
    51d0:	af 91       	pop	r26
    51d2:	9f 91       	pop	r25
    51d4:	8f 91       	pop	r24
    51d6:	7f 91       	pop	r23
    51d8:	6f 91       	pop	r22
    51da:	5f 91       	pop	r21
    51dc:	4f 91       	pop	r20
    51de:	3f 91       	pop	r19
    51e0:	2f 91       	pop	r18
    51e2:	0f 90       	pop	r0
    51e4:	0f be       	out	0x3f, r0	; 63
    51e6:	0f 90       	pop	r0
    51e8:	1f 90       	pop	r1
    51ea:	18 95       	reti

000051ec <PORT_voidInit>:
/**************************************************************/
/*					FUNCTIONS DEFINITIONS					  */
/**************************************************************/
void PORT_voidInit(void)
{
	DDRA_Register=PORTA_DIR;
    51ec:	9d ef       	ldi	r25, 0xFD	; 253
    51ee:	9a bb       	out	0x1a, r25	; 26
	DDRB_Register=PORTB_DIR;
    51f0:	8f ef       	ldi	r24, 0xFF	; 255
    51f2:	87 bb       	out	0x17, r24	; 23
	DDRC_Register=PORTC_DIR;
    51f4:	84 bb       	out	0x14, r24	; 20
	DDRD_Register=PORTD_DIR;
    51f6:	81 bb       	out	0x11, r24	; 17

	/*
			Hint : will set 1 if The pin input Pullup
	 */
	PORTA_Register=PORTA_INITIAL_VALUE;
    51f8:	9b bb       	out	0x1b, r25	; 27
	PORTB_Register=PORTB_INITIAL_VALUE;
    51fa:	88 bb       	out	0x18, r24	; 24
	PORTC_Register=PORTC_INITIAL_VALUE;
    51fc:	85 bb       	out	0x15, r24	; 21
	PORTD_Register=PORTD_INITIAL_VALUE;
    51fe:	82 bb       	out	0x12, r24	; 18
}
    5200:	08 95       	ret

00005202 <LED_voidToggle>:

}


void LED_voidToggle( LED_Type LED_Configuration)
{
    5202:	df 93       	push	r29
    5204:	cf 93       	push	r28
    5206:	00 d0       	rcall	.+0      	; 0x5208 <LED_voidToggle+0x6>
    5208:	0f 92       	push	r0
    520a:	cd b7       	in	r28, 0x3d	; 61
    520c:	de b7       	in	r29, 0x3e	; 62
    520e:	96 2f       	mov	r25, r22
    5210:	69 83       	std	Y+1, r22	; 0x01
    5212:	67 2f       	mov	r22, r23
    5214:	7a 83       	std	Y+2, r23	; 0x02
    5216:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8TogglePinValue( LED_Configuration.Port , LED_Configuration.Pin );
    5218:	89 2f       	mov	r24, r25
    521a:	0e 94 87 2c 	call	0x590e	; 0x590e <DIO_u8TogglePinValue>
}
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	0f 90       	pop	r0
    5224:	cf 91       	pop	r28
    5226:	df 91       	pop	r29
    5228:	08 95       	ret

0000522a <LED_voidOff>:

}


void LED_voidOff(LED_Type LED_Configuration)
{
    522a:	df 93       	push	r29
    522c:	cf 93       	push	r28
    522e:	00 d0       	rcall	.+0      	; 0x5230 <LED_voidOff+0x6>
    5230:	0f 92       	push	r0
    5232:	cd b7       	in	r28, 0x3d	; 61
    5234:	de b7       	in	r29, 0x3e	; 62
    5236:	26 2f       	mov	r18, r22
    5238:	69 83       	std	Y+1, r22	; 0x01
    523a:	7a 83       	std	Y+2, r23	; 0x02
    523c:	8b 83       	std	Y+3, r24	; 0x03
    523e:	67 2f       	mov	r22, r23

	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    5240:	81 30       	cpi	r24, 0x01	; 1
    5242:	19 f4       	brne	.+6      	; 0x524a <LED_voidOff+0x20>

		DIO_u8SetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    5244:	82 2f       	mov	r24, r18
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	04 c0       	rjmp	.+8      	; 0x5252 <LED_voidOff+0x28>

	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    524a:	88 23       	and	r24, r24
    524c:	21 f4       	brne	.+8      	; 0x5256 <LED_voidOff+0x2c>

		DIO_u8SetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
    524e:	82 2f       	mov	r24, r18
    5250:	41 e0       	ldi	r20, 0x01	; 1
    5252:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

	}

}
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
    525c:	cf 91       	pop	r28
    525e:	df 91       	pop	r29
    5260:	08 95       	ret

00005262 <LED_voidOn>:

}


void LED_voidOn  (LED_Type LED_Configuration)
{
    5262:	df 93       	push	r29
    5264:	cf 93       	push	r28
    5266:	00 d0       	rcall	.+0      	; 0x5268 <LED_voidOn+0x6>
    5268:	0f 92       	push	r0
    526a:	cd b7       	in	r28, 0x3d	; 61
    526c:	de b7       	in	r29, 0x3e	; 62
    526e:	26 2f       	mov	r18, r22
    5270:	69 83       	std	Y+1, r22	; 0x01
    5272:	7a 83       	std	Y+2, r23	; 0x02
    5274:	8b 83       	std	Y+3, r24	; 0x03
    5276:	67 2f       	mov	r22, r23

	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    5278:	81 30       	cpi	r24, 0x01	; 1
    527a:	19 f4       	brne	.+6      	; 0x5282 <LED_voidOn+0x20>

		DIO_u8SetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    527c:	82 2f       	mov	r24, r18
    527e:	41 e0       	ldi	r20, 0x01	; 1
    5280:	04 c0       	rjmp	.+8      	; 0x528a <LED_voidOn+0x28>

	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    5282:	88 23       	and	r24, r24
    5284:	21 f4       	brne	.+8      	; 0x528e <LED_voidOn+0x2c>

		DIO_u8SetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    5286:	82 2f       	mov	r24, r18
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

	}

}
    528e:	0f 90       	pop	r0
    5290:	0f 90       	pop	r0
    5292:	0f 90       	pop	r0
    5294:	cf 91       	pop	r28
    5296:	df 91       	pop	r29
    5298:	08 95       	ret

0000529a <LED_voidInit>:

/**************************************************************/
/*					FUNCTIONS DEFINITIONS					  */
/**************************************************************/
void LED_voidInit(LED_Type LED_Configuration)
{
    529a:	df 93       	push	r29
    529c:	cf 93       	push	r28
    529e:	00 d0       	rcall	.+0      	; 0x52a0 <LED_voidInit+0x6>
    52a0:	0f 92       	push	r0
    52a2:	cd b7       	in	r28, 0x3d	; 61
    52a4:	de b7       	in	r29, 0x3e	; 62
    52a6:	96 2f       	mov	r25, r22
    52a8:	69 83       	std	Y+1, r22	; 0x01
    52aa:	67 2f       	mov	r22, r23
    52ac:	7a 83       	std	Y+2, r23	; 0x02
    52ae:	8b 83       	std	Y+3, r24	; 0x03

	DIO_u8SetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    52b0:	89 2f       	mov	r24, r25
    52b2:	41 e0       	ldi	r20, 0x01	; 1
    52b4:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>

}
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	0f 90       	pop	r0
    52be:	cf 91       	pop	r28
    52c0:	df 91       	pop	r29
    52c2:	08 95       	ret

000052c4 <EXTI_voidInit>:

/*********************FUNCTIONS DEFINITIONS******************************/
void EXTI_voidInit (void)
{
	#if	EXTI_INT0_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT0);
    52c4:	8b b7       	in	r24, 0x3b	; 59
    52c6:	80 64       	ori	r24, 0x40	; 64
    52c8:	8b bf       	out	0x3b, r24	; 59
			CLR_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == ON_CHANGE
			CLR_BIT(MCUCR, MCUCR_ISC01);
			SET_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
    52ca:	85 b7       	in	r24, 0x35	; 53
    52cc:	82 60       	ori	r24, 0x02	; 2
    52ce:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, MCUCR_ISC00);
    52d0:	85 b7       	in	r24, 0x35	; 53
    52d2:	8e 7f       	andi	r24, 0xFE	; 254
    52d4:	85 bf       	out	0x35, r24	; 53
		#error "EXTI_INT0_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT1_ENALBE == ENALBE
		SET_BIT(GICR, GICR_INT1);
    52d6:	8b b7       	in	r24, 0x3b	; 59
    52d8:	80 68       	ori	r24, 0x80	; 128
    52da:	8b bf       	out	0x3b, r24	; 59
			SET_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
			CLR_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
    52dc:	85 b7       	in	r24, 0x35	; 53
    52de:	88 60       	ori	r24, 0x08	; 8
    52e0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, MCUCR_ISC10);
    52e2:	85 b7       	in	r24, 0x35	; 53
    52e4:	84 60       	ori	r24, 0x04	; 4
    52e6:	85 bf       	out	0x35, r24	; 53
		#error "EXTI_INT1_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT2_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT2);
    52e8:	8b b7       	in	r24, 0x3b	; 59
    52ea:	80 62       	ori	r24, 0x20	; 32
    52ec:	8b bf       	out	0x3b, r24	; 59
		#if EXTI_INT2_SENSE_CONTROL == FALLING_EDGE
			CLR_BIT(MCUCSR, MCUCSR_ISC2);
		#elif EXTI_INT2_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCSR, MCUCSR_ISC2);
    52ee:	84 b7       	in	r24, 0x34	; 52
    52f0:	80 64       	ori	r24, 0x40	; 64
    52f2:	84 bf       	out	0x34, r24	; 52
	#elif EXTI_INT2_ENALBE == DISABLE
		CLR_BIT(GICR, GICR_INT2);
	#else
		#error "EXTI_INT2_ENALBE Error Configuration"
	#endif
}
    52f4:	08 95       	ret

000052f6 <EXTI_u8SetInt0SenseControl>:


u8 EXTI_u8SetInt0SenseControl (u8 Copy_u8SenseControl)
{
	switch (Copy_u8SenseControl)
    52f6:	81 30       	cpi	r24, 0x01	; 1
    52f8:	a1 f0       	breq	.+40     	; 0x5322 <EXTI_u8SetInt0SenseControl+0x2c>
    52fa:	81 30       	cpi	r24, 0x01	; 1
    52fc:	60 f0       	brcs	.+24     	; 0x5316 <EXTI_u8SetInt0SenseControl+0x20>
    52fe:	82 30       	cpi	r24, 0x02	; 2
    5300:	21 f0       	breq	.+8      	; 0x530a <EXTI_u8SetInt0SenseControl+0x14>
    5302:	83 30       	cpi	r24, 0x03	; 3
    5304:	29 f0       	breq	.+10     	; 0x5310 <EXTI_u8SetInt0SenseControl+0x1a>
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	08 95       	ret
	{
		case LOW_LEVEL:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
    530a:	85 b7       	in	r24, 0x35	; 53
    530c:	8d 7f       	andi	r24, 0xFD	; 253
    530e:	05 c0       	rjmp	.+10     	; 0x531a <EXTI_u8SetInt0SenseControl+0x24>
			CLR_BIT(MCUCR, MCUCR_ISC00);
			break;
		}
		case ON_CHANGE:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
    5310:	85 b7       	in	r24, 0x35	; 53
    5312:	8d 7f       	andi	r24, 0xFD	; 253
    5314:	08 c0       	rjmp	.+16     	; 0x5326 <EXTI_u8SetInt0SenseControl+0x30>
			SET_BIT(MCUCR, MCUCR_ISC00);
			break;
		}
		case FALLING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
    5316:	85 b7       	in	r24, 0x35	; 53
    5318:	82 60       	ori	r24, 0x02	; 2
    531a:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, MCUCR_ISC00);
    531c:	85 b7       	in	r24, 0x35	; 53
    531e:	8e 7f       	andi	r24, 0xFE	; 254
    5320:	05 c0       	rjmp	.+10     	; 0x532c <EXTI_u8SetInt0SenseControl+0x36>
			break;
		}
		case RISING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
    5322:	85 b7       	in	r24, 0x35	; 53
    5324:	82 60       	ori	r24, 0x02	; 2
    5326:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, MCUCR_ISC00);
    5328:	85 b7       	in	r24, 0x35	; 53
    532a:	81 60       	ori	r24, 0x01	; 1
    532c:	85 bf       	out	0x35, r24	; 53
		default:
		{
			return E_NOK;
		}
	}
	SET_BIT(GICR, GICR_INT0);
    532e:	8b b7       	in	r24, 0x3b	; 59
    5330:	80 64       	ori	r24, 0x40	; 64
    5332:	8b bf       	out	0x3b, r24	; 59
    5334:	80 e0       	ldi	r24, 0x00	; 0
	return E_OK;
}
    5336:	08 95       	ret

00005338 <EXTI_u8SetInt1SenseControl>:

u8 EXTI_u8SetInt1SenseControl(u8 Copy_u8SenseControl)
{
	switch (Copy_u8SenseControl)
    5338:	81 30       	cpi	r24, 0x01	; 1
    533a:	a1 f0       	breq	.+40     	; 0x5364 <EXTI_u8SetInt1SenseControl+0x2c>
    533c:	81 30       	cpi	r24, 0x01	; 1
    533e:	60 f0       	brcs	.+24     	; 0x5358 <EXTI_u8SetInt1SenseControl+0x20>
    5340:	82 30       	cpi	r24, 0x02	; 2
    5342:	21 f0       	breq	.+8      	; 0x534c <EXTI_u8SetInt1SenseControl+0x14>
    5344:	83 30       	cpi	r24, 0x03	; 3
    5346:	29 f0       	breq	.+10     	; 0x5352 <EXTI_u8SetInt1SenseControl+0x1a>
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	08 95       	ret
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
    534c:	85 b7       	in	r24, 0x35	; 53
    534e:	87 7f       	andi	r24, 0xF7	; 247
    5350:	05 c0       	rjmp	.+10     	; 0x535c <EXTI_u8SetInt1SenseControl+0x24>
		CLR_BIT(MCUCR, MCUCR_ISC10);
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
    5352:	85 b7       	in	r24, 0x35	; 53
    5354:	87 7f       	andi	r24, 0xF7	; 247
    5356:	08 c0       	rjmp	.+16     	; 0x5368 <EXTI_u8SetInt1SenseControl+0x30>
		SET_BIT(MCUCR, MCUCR_ISC10);
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
    5358:	85 b7       	in	r24, 0x35	; 53
    535a:	88 60       	ori	r24, 0x08	; 8
    535c:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR, MCUCR_ISC10);
    535e:	85 b7       	in	r24, 0x35	; 53
    5360:	8b 7f       	andi	r24, 0xFB	; 251
    5362:	05 c0       	rjmp	.+10     	; 0x536e <EXTI_u8SetInt1SenseControl+0x36>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
    5364:	85 b7       	in	r24, 0x35	; 53
    5366:	88 60       	ori	r24, 0x08	; 8
    5368:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, MCUCR_ISC10);
    536a:	85 b7       	in	r24, 0x35	; 53
    536c:	84 60       	ori	r24, 0x04	; 4
    536e:	85 bf       	out	0x35, r24	; 53
	default:
	{
		return E_NOK;
	}
	}
	SET_BIT(GICR, GICR_INT1);
    5370:	8b b7       	in	r24, 0x3b	; 59
    5372:	80 68       	ori	r24, 0x80	; 128
    5374:	8b bf       	out	0x3b, r24	; 59
    5376:	80 e0       	ldi	r24, 0x00	; 0
	return E_OK;
}
    5378:	08 95       	ret

0000537a <EXTI_u8SetInt2SenseControl>:

u8 EXTI_u8SetInt2SenseControl(u8 Copy_u8SenseControl)
{
	switch (Copy_u8SenseControl)
    537a:	88 23       	and	r24, r24
    537c:	21 f0       	breq	.+8      	; 0x5386 <EXTI_u8SetInt2SenseControl+0xc>
    537e:	81 30       	cpi	r24, 0x01	; 1
    5380:	29 f0       	breq	.+10     	; 0x538c <EXTI_u8SetInt2SenseControl+0x12>
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	08 95       	ret
	{
	case FALLING_EDGE:
	{
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
    5386:	84 b7       	in	r24, 0x34	; 52
    5388:	8f 7b       	andi	r24, 0xBF	; 191
    538a:	02 c0       	rjmp	.+4      	; 0x5390 <EXTI_u8SetInt2SenseControl+0x16>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCSR, MCUCSR_ISC2);
    538c:	84 b7       	in	r24, 0x34	; 52
    538e:	80 64       	ori	r24, 0x40	; 64
    5390:	84 bf       	out	0x34, r24	; 52
	default:
	{
		return E_NOK;
	}
	}
	SET_BIT(GICR, GICR_INT2);
    5392:	8b b7       	in	r24, 0x3b	; 59
    5394:	80 62       	ori	r24, 0x20	; 32
    5396:	8b bf       	out	0x3b, r24	; 59
    5398:	80 e0       	ldi	r24, 0x00	; 0
	return E_OK;
}
    539a:	08 95       	ret

0000539c <EXTI_u8Int0SetCallBack>:


u8 EXTI_u8Int0SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
	if (Copy_pvNotificationFunction != NULL)
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	11 f4       	brne	.+4      	; 0x53a4 <EXTI_u8Int0SetCallBack+0x8>
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	08 95       	ret
	{
		Global_pvInt0NotifcationFunction = Copy_pvNotificationFunction;
    53a4:	90 93 b7 01 	sts	0x01B7, r25
    53a8:	80 93 b6 01 	sts	0x01B6, r24
    53ac:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return E_NOK;
	}
}
    53ae:	08 95       	ret

000053b0 <__vector_1>:

/*ISR for INT0*/

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    53b0:	1f 92       	push	r1
    53b2:	0f 92       	push	r0
    53b4:	0f b6       	in	r0, 0x3f	; 63
    53b6:	0f 92       	push	r0
    53b8:	11 24       	eor	r1, r1
    53ba:	2f 93       	push	r18
    53bc:	3f 93       	push	r19
    53be:	4f 93       	push	r20
    53c0:	5f 93       	push	r21
    53c2:	6f 93       	push	r22
    53c4:	7f 93       	push	r23
    53c6:	8f 93       	push	r24
    53c8:	9f 93       	push	r25
    53ca:	af 93       	push	r26
    53cc:	bf 93       	push	r27
    53ce:	ef 93       	push	r30
    53d0:	ff 93       	push	r31
	if (Global_pvInt0NotifcationFunction != NULL)
    53d2:	e0 91 b6 01 	lds	r30, 0x01B6
    53d6:	f0 91 b7 01 	lds	r31, 0x01B7
    53da:	30 97       	sbiw	r30, 0x00	; 0
    53dc:	09 f0       	breq	.+2      	; 0x53e0 <__vector_1+0x30>
	{
		Global_pvInt0NotifcationFunction();
    53de:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    53e0:	ff 91       	pop	r31
    53e2:	ef 91       	pop	r30
    53e4:	bf 91       	pop	r27
    53e6:	af 91       	pop	r26
    53e8:	9f 91       	pop	r25
    53ea:	8f 91       	pop	r24
    53ec:	7f 91       	pop	r23
    53ee:	6f 91       	pop	r22
    53f0:	5f 91       	pop	r21
    53f2:	4f 91       	pop	r20
    53f4:	3f 91       	pop	r19
    53f6:	2f 91       	pop	r18
    53f8:	0f 90       	pop	r0
    53fa:	0f be       	out	0x3f, r0	; 63
    53fc:	0f 90       	pop	r0
    53fe:	1f 90       	pop	r1
    5400:	18 95       	reti

00005402 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
	if (Copy_pvNotificationFunction != NULL)
    5402:	00 97       	sbiw	r24, 0x00	; 0
    5404:	11 f4       	brne	.+4      	; 0x540a <EXTI_u8Int1SetCallBack+0x8>
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	08 95       	ret
	{
		Global_pvInt1NotifcationFunction = Copy_pvNotificationFunction;
    540a:	90 93 b5 01 	sts	0x01B5, r25
    540e:	80 93 b4 01 	sts	0x01B4, r24
    5412:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return E_NOK;
	}
}
    5414:	08 95       	ret

00005416 <__vector_2>:

/*ISR for INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    5416:	1f 92       	push	r1
    5418:	0f 92       	push	r0
    541a:	0f b6       	in	r0, 0x3f	; 63
    541c:	0f 92       	push	r0
    541e:	11 24       	eor	r1, r1
    5420:	2f 93       	push	r18
    5422:	3f 93       	push	r19
    5424:	4f 93       	push	r20
    5426:	5f 93       	push	r21
    5428:	6f 93       	push	r22
    542a:	7f 93       	push	r23
    542c:	8f 93       	push	r24
    542e:	9f 93       	push	r25
    5430:	af 93       	push	r26
    5432:	bf 93       	push	r27
    5434:	ef 93       	push	r30
    5436:	ff 93       	push	r31
	if (Global_pvInt1NotifcationFunction != NULL)
    5438:	e0 91 b4 01 	lds	r30, 0x01B4
    543c:	f0 91 b5 01 	lds	r31, 0x01B5
    5440:	30 97       	sbiw	r30, 0x00	; 0
    5442:	09 f0       	breq	.+2      	; 0x5446 <__vector_2+0x30>
	{
		Global_pvInt1NotifcationFunction();
    5444:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    5446:	ff 91       	pop	r31
    5448:	ef 91       	pop	r30
    544a:	bf 91       	pop	r27
    544c:	af 91       	pop	r26
    544e:	9f 91       	pop	r25
    5450:	8f 91       	pop	r24
    5452:	7f 91       	pop	r23
    5454:	6f 91       	pop	r22
    5456:	5f 91       	pop	r21
    5458:	4f 91       	pop	r20
    545a:	3f 91       	pop	r19
    545c:	2f 91       	pop	r18
    545e:	0f 90       	pop	r0
    5460:	0f be       	out	0x3f, r0	; 63
    5462:	0f 90       	pop	r0
    5464:	1f 90       	pop	r1
    5466:	18 95       	reti

00005468 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
	if (Copy_pvNotificationFunction != NULL)
    5468:	00 97       	sbiw	r24, 0x00	; 0
    546a:	11 f4       	brne	.+4      	; 0x5470 <EXTI_u8Int2SetCallBack+0x8>
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	08 95       	ret
	{
		Global_pvInt2NotifcationFunction = Copy_pvNotificationFunction;
    5470:	90 93 b3 01 	sts	0x01B3, r25
    5474:	80 93 b2 01 	sts	0x01B2, r24
    5478:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return E_NOK;
	}
}
    547a:	08 95       	ret

0000547c <__vector_3>:

/*ISR for INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    547c:	1f 92       	push	r1
    547e:	0f 92       	push	r0
    5480:	0f b6       	in	r0, 0x3f	; 63
    5482:	0f 92       	push	r0
    5484:	11 24       	eor	r1, r1
    5486:	2f 93       	push	r18
    5488:	3f 93       	push	r19
    548a:	4f 93       	push	r20
    548c:	5f 93       	push	r21
    548e:	6f 93       	push	r22
    5490:	7f 93       	push	r23
    5492:	8f 93       	push	r24
    5494:	9f 93       	push	r25
    5496:	af 93       	push	r26
    5498:	bf 93       	push	r27
    549a:	ef 93       	push	r30
    549c:	ff 93       	push	r31
	if (Global_pvInt2NotifcationFunction != NULL)
    549e:	e0 91 b2 01 	lds	r30, 0x01B2
    54a2:	f0 91 b3 01 	lds	r31, 0x01B3
    54a6:	30 97       	sbiw	r30, 0x00	; 0
    54a8:	09 f0       	breq	.+2      	; 0x54ac <__vector_3+0x30>
	{
		Global_pvInt2NotifcationFunction();
    54aa:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    54ac:	ff 91       	pop	r31
    54ae:	ef 91       	pop	r30
    54b0:	bf 91       	pop	r27
    54b2:	af 91       	pop	r26
    54b4:	9f 91       	pop	r25
    54b6:	8f 91       	pop	r24
    54b8:	7f 91       	pop	r23
    54ba:	6f 91       	pop	r22
    54bc:	5f 91       	pop	r21
    54be:	4f 91       	pop	r20
    54c0:	3f 91       	pop	r19
    54c2:	2f 91       	pop	r18
    54c4:	0f 90       	pop	r0
    54c6:	0f be       	out	0x3f, r0	; 63
    54c8:	0f 90       	pop	r0
    54ca:	1f 90       	pop	r1
    54cc:	18 95       	reti

000054ce <EEPROM_u8ReadDataByte>:
	/* 5)Sending stop condition*/
	TWI_voidSendStopCondition();
}

u8 EEPROM_u8ReadDataByte(u16 Copy_u16Adderss)
{
    54ce:	0f 93       	push	r16
    54d0:	1f 93       	push	r17
    54d2:	df 93       	push	r29
    54d4:	cf 93       	push	r28
    54d6:	0f 92       	push	r0
    54d8:	cd b7       	in	r28, 0x3d	; 61
    54da:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address;

	//1010 fixed
	//A2 pin configurable (either high or low)
	//last two bits is for page access
	Local_u8Address = (((EEPROM_FIXED_ADDRESS) |(A2_PIN_CONNECTION<<2) | ((Copy_u16Adderss >> 8) & 3)));
    54dc:	8c 01       	movw	r16, r24
    54de:	13 70       	andi	r17, 0x03	; 3
    54e0:	10 65       	ori	r17, 0x50	; 80

	/* 1)Sending start condition on the bus*/
	TWI_enSendStartCondition();
    54e2:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <TWI_enSendStartCondition>

	/* 2)Sending address of EEPROM with target page and write command*/
	TWI_enSendSlaveAddressWithWriteCmd(Local_u8Address);
    54e6:	81 2f       	mov	r24, r17
    54e8:	0e 94 6d 25 	call	0x4ada	; 0x4ada <TWI_enSendSlaveAddressWithWriteCmd>

	/* 3)Sending target location of the EEPROM*/
	TWI_enSendByte((u8)Copy_u16Adderss);
    54ec:	80 2f       	mov	r24, r16
    54ee:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <TWI_enSendByte>

	/* 4)Sending repeated start condition*/
	TWI_enSendStartCondition();
    54f2:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <TWI_enSendStartCondition>

	/* 5)Sending address of EEPROM with target page and read command*/
	TWI_enSendSlaveAddressWithReadCmd(Local_u8Address);
    54f6:	81 2f       	mov	r24, r17
    54f8:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <TWI_enSendSlaveAddressWithReadCmd>

	/* 6)Reading from target location*/
	TWI_enReceiveByteNoAck(&Local_u8Data);
    54fc:	ce 01       	movw	r24, r28
    54fe:	01 96       	adiw	r24, 0x01	; 1
    5500:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <TWI_enReceiveByteNoAck>

	/* 5)Sending stop condition*/
	TWI_voidSendStopCondition();
    5504:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <TWI_voidSendStopCondition>

	return Local_u8Data;
}
    5508:	89 81       	ldd	r24, Y+1	; 0x01
    550a:	0f 90       	pop	r0
    550c:	cf 91       	pop	r28
    550e:	df 91       	pop	r29
    5510:	1f 91       	pop	r17
    5512:	0f 91       	pop	r16
    5514:	08 95       	ret

00005516 <EEPROM_voidSendDataByte>:
{
	TWI_voidInit();
}

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte , u16 Copy_u16Address)
{
    5516:	ff 92       	push	r15
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	f8 2e       	mov	r15, r24
    551e:	8b 01       	movw	r16, r22
	//A2 pin configurable (either high or low)
	//last two bits is for page access
	Local_u8Address = (((EEPROM_FIXED_ADDRESS) |(A2_PIN_CONNECTION<<2) |((Copy_u16Address>> 8) & 3)));

	/* 1)Sending start condition on the bus*/
	TWI_enSendStartCondition();
    5520:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <TWI_enSendStartCondition>

	/* 2)Sending address of EEPROM with target page and write command*/
	TWI_enSendSlaveAddressWithWriteCmd(Local_u8Address);
    5524:	13 70       	andi	r17, 0x03	; 3
    5526:	81 2f       	mov	r24, r17
    5528:	80 65       	ori	r24, 0x50	; 80
    552a:	0e 94 6d 25 	call	0x4ada	; 0x4ada <TWI_enSendSlaveAddressWithWriteCmd>


	/* 3)Sending target location of the EEPROM*/
	TWI_enSendByte((u8)Copy_u16Address);
    552e:	80 2f       	mov	r24, r16
    5530:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <TWI_enSendByte>

	/* 4)Sending target data to the specified location*/
	TWI_enSendByte(Copy_u8DataByte);
    5534:	8f 2d       	mov	r24, r15
    5536:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <TWI_enSendByte>

	/* 5)Sending stop condition*/
	TWI_voidSendStopCondition();
    553a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <TWI_voidSendStopCondition>
}
    553e:	1f 91       	pop	r17
    5540:	0f 91       	pop	r16
    5542:	ff 90       	pop	r15
    5544:	08 95       	ret

00005546 <EEPROM_voidInit>:
/*********************************************************************************/
/*							FUNCTIONS DEFINITIONS								 */
/*********************************************************************************/
void EEPROM_voidInit(void)
{
	TWI_voidInit();
    5546:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <TWI_voidInit>
}
    554a:	08 95       	ret

0000554c <DIO_u8SetPortValue>:

/***************Functions Definitions********************/
ReturnType_State_t DIO_u8SetPortValue(u8 copy_u8Port,u8 copy_u8Value)
{
	u8 Local_u8State = E_OK;
	switch(copy_u8Port)
    554c:	81 30       	cpi	r24, 0x01	; 1
    554e:	51 f0       	breq	.+20     	; 0x5564 <DIO_u8SetPortValue+0x18>
    5550:	81 30       	cpi	r24, 0x01	; 1
    5552:	30 f0       	brcs	.+12     	; 0x5560 <DIO_u8SetPortValue+0x14>
    5554:	82 30       	cpi	r24, 0x02	; 2
    5556:	41 f0       	breq	.+16     	; 0x5568 <DIO_u8SetPortValue+0x1c>
    5558:	83 30       	cpi	r24, 0x03	; 3
    555a:	49 f0       	breq	.+18     	; 0x556e <DIO_u8SetPortValue+0x22>
    555c:	81 e0       	ldi	r24, 0x01	; 1
    555e:	08 95       	ret
	{
	case DIO_PORTA:
		PORTA = copy_u8Value;
    5560:	6b bb       	out	0x1b, r22	; 27
    5562:	03 c0       	rjmp	.+6      	; 0x556a <DIO_u8SetPortValue+0x1e>
		break;

	case DIO_PORTB:
		PORTB = copy_u8Value;
    5564:	68 bb       	out	0x18, r22	; 24
    5566:	01 c0       	rjmp	.+2      	; 0x556a <DIO_u8SetPortValue+0x1e>
		break;

	case DIO_PORTC:
		PORTC = copy_u8Value;
    5568:	65 bb       	out	0x15, r22	; 21
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	08 95       	ret
		break;

	case DIO_PORTD:
		PORTD = copy_u8Value;
    556e:	62 bb       	out	0x12, r22	; 18
    5570:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    5572:	08 95       	ret

00005574 <DIO_u8SetPortDirection>:


ReturnType_State_t DIO_u8SetPortDirection(u8 copy_u8Port,u8 copy_u8Direction)
{
	u8 Local_u8State = E_OK;
	switch(copy_u8Port)
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	51 f0       	breq	.+20     	; 0x558c <DIO_u8SetPortDirection+0x18>
    5578:	81 30       	cpi	r24, 0x01	; 1
    557a:	30 f0       	brcs	.+12     	; 0x5588 <DIO_u8SetPortDirection+0x14>
    557c:	82 30       	cpi	r24, 0x02	; 2
    557e:	41 f0       	breq	.+16     	; 0x5590 <DIO_u8SetPortDirection+0x1c>
    5580:	83 30       	cpi	r24, 0x03	; 3
    5582:	49 f0       	breq	.+18     	; 0x5596 <DIO_u8SetPortDirection+0x22>
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	08 95       	ret
	{
	case DIO_PORTA:
		DDRA = copy_u8Direction;
    5588:	6a bb       	out	0x1a, r22	; 26
    558a:	03 c0       	rjmp	.+6      	; 0x5592 <DIO_u8SetPortDirection+0x1e>
		break;

	case DIO_PORTB:
		DDRB = copy_u8Direction;
    558c:	67 bb       	out	0x17, r22	; 23
    558e:	01 c0       	rjmp	.+2      	; 0x5592 <DIO_u8SetPortDirection+0x1e>
		break;

	case DIO_PORTC:
		DDRC = copy_u8Direction;
    5590:	64 bb       	out	0x14, r22	; 20
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	08 95       	ret
		break;

	case DIO_PORTD:
		DDRD = copy_u8Direction;
    5596:	61 bb       	out	0x11, r22	; 17
    5598:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    559a:	08 95       	ret

0000559c <DIO_u8GetPortValue>:



ReturnType_State_t DIO_u8GetPortValue(u8 copy_u8Port,u8 *copy_u8Variable)
{
    559c:	fb 01       	movw	r30, r22
	u8 Local_u8State = E_OK;
	if(copy_u8Variable != NULL)
    559e:	61 15       	cp	r22, r1
    55a0:	71 05       	cpc	r23, r1
    55a2:	11 f4       	brne	.+4      	; 0x55a8 <DIO_u8GetPortValue+0xc>
    55a4:	83 e0       	ldi	r24, 0x03	; 3
    55a6:	08 95       	ret
	{
		switch(copy_u8Port)
    55a8:	81 30       	cpi	r24, 0x01	; 1
    55aa:	51 f0       	breq	.+20     	; 0x55c0 <DIO_u8GetPortValue+0x24>
    55ac:	81 30       	cpi	r24, 0x01	; 1
    55ae:	30 f0       	brcs	.+12     	; 0x55bc <DIO_u8GetPortValue+0x20>
    55b0:	82 30       	cpi	r24, 0x02	; 2
    55b2:	41 f0       	breq	.+16     	; 0x55c4 <DIO_u8GetPortValue+0x28>
    55b4:	83 30       	cpi	r24, 0x03	; 3
    55b6:	51 f0       	breq	.+20     	; 0x55cc <DIO_u8GetPortValue+0x30>
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	08 95       	ret
		{
		case DIO_PORTA:
			*copy_u8Variable = PINA;
    55bc:	89 b3       	in	r24, 0x19	; 25
    55be:	03 c0       	rjmp	.+6      	; 0x55c6 <DIO_u8GetPortValue+0x2a>
			break;

		case DIO_PORTB:
			*copy_u8Variable = PINB;
    55c0:	86 b3       	in	r24, 0x16	; 22
    55c2:	01 c0       	rjmp	.+2      	; 0x55c6 <DIO_u8GetPortValue+0x2a>
			break;

		case DIO_PORTC:
			*copy_u8Variable = PINC;
    55c4:	83 b3       	in	r24, 0x13	; 19
    55c6:	80 83       	st	Z, r24
    55c8:	80 e0       	ldi	r24, 0x00	; 0
    55ca:	08 95       	ret
			break;

		case DIO_PORTD:
			*copy_u8Variable = PIND;
    55cc:	80 b3       	in	r24, 0x10	; 16
    55ce:	80 83       	st	Z, r24
    55d0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8State = E_NOK_NULL_PTR;
	}
	return Local_u8State;
}
    55d2:	08 95       	ret

000055d4 <DIO_u8SetPinValue>:


ReturnType_State_t DIO_u8SetPinValue(u8 copy_u8Port,u8 copy_u8Pin ,u8 copy_u8Value)
{
	u8 Local_u8State = E_OK;
	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    55d4:	68 30       	cpi	r22, 0x08	; 8
    55d6:	08 f0       	brcs	.+2      	; 0x55da <DIO_u8SetPinValue+0x6>
    55d8:	74 c0       	rjmp	.+232    	; 0x56c2 <DIO_u8SetPinValue+0xee>
	{
		if(copy_u8Value==DIO_PIN_LOW)
    55da:	44 23       	and	r20, r20
    55dc:	d1 f5       	brne	.+116    	; 0x5652 <DIO_u8SetPinValue+0x7e>
		{
			switch(copy_u8Port)
    55de:	81 30       	cpi	r24, 0x01	; 1
    55e0:	a1 f0       	breq	.+40     	; 0x560a <DIO_u8SetPinValue+0x36>
    55e2:	81 30       	cpi	r24, 0x01	; 1
    55e4:	30 f0       	brcs	.+12     	; 0x55f2 <DIO_u8SetPinValue+0x1e>
    55e6:	82 30       	cpi	r24, 0x02	; 2
    55e8:	e1 f0       	breq	.+56     	; 0x5622 <DIO_u8SetPinValue+0x4e>
    55ea:	83 30       	cpi	r24, 0x03	; 3
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <DIO_u8SetPinValue+0x1c>
    55ee:	69 c0       	rjmp	.+210    	; 0x56c2 <DIO_u8SetPinValue+0xee>
    55f0:	24 c0       	rjmp	.+72     	; 0x563a <DIO_u8SetPinValue+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA,copy_u8Pin);
    55f2:	2b b3       	in	r18, 0x1b	; 27
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	02 c0       	rjmp	.+4      	; 0x55fe <DIO_u8SetPinValue+0x2a>
    55fa:	88 0f       	add	r24, r24
    55fc:	99 1f       	adc	r25, r25
    55fe:	6a 95       	dec	r22
    5600:	e2 f7       	brpl	.-8      	; 0x55fa <DIO_u8SetPinValue+0x26>
    5602:	80 95       	com	r24
    5604:	82 23       	and	r24, r18
    5606:	8b bb       	out	0x1b, r24	; 27
    5608:	5a c0       	rjmp	.+180    	; 0x56be <DIO_u8SetPinValue+0xea>
				break;
			case DIO_PORTB:
				CLR_BIT(PORTB,copy_u8Pin);
    560a:	28 b3       	in	r18, 0x18	; 24
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	02 c0       	rjmp	.+4      	; 0x5616 <DIO_u8SetPinValue+0x42>
    5612:	88 0f       	add	r24, r24
    5614:	99 1f       	adc	r25, r25
    5616:	6a 95       	dec	r22
    5618:	e2 f7       	brpl	.-8      	; 0x5612 <DIO_u8SetPinValue+0x3e>
    561a:	80 95       	com	r24
    561c:	82 23       	and	r24, r18
    561e:	88 bb       	out	0x18, r24	; 24
    5620:	4e c0       	rjmp	.+156    	; 0x56be <DIO_u8SetPinValue+0xea>
				break;
			case DIO_PORTC:
				CLR_BIT(PORTC,copy_u8Pin);
    5622:	25 b3       	in	r18, 0x15	; 21
    5624:	81 e0       	ldi	r24, 0x01	; 1
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	02 c0       	rjmp	.+4      	; 0x562e <DIO_u8SetPinValue+0x5a>
    562a:	88 0f       	add	r24, r24
    562c:	99 1f       	adc	r25, r25
    562e:	6a 95       	dec	r22
    5630:	e2 f7       	brpl	.-8      	; 0x562a <DIO_u8SetPinValue+0x56>
    5632:	80 95       	com	r24
    5634:	82 23       	and	r24, r18
    5636:	85 bb       	out	0x15, r24	; 21
    5638:	42 c0       	rjmp	.+132    	; 0x56be <DIO_u8SetPinValue+0xea>
				break;
			case DIO_PORTD:
				CLR_BIT(PORTD,copy_u8Pin);
    563a:	22 b3       	in	r18, 0x12	; 18
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	02 c0       	rjmp	.+4      	; 0x5646 <DIO_u8SetPinValue+0x72>
    5642:	88 0f       	add	r24, r24
    5644:	99 1f       	adc	r25, r25
    5646:	6a 95       	dec	r22
    5648:	e2 f7       	brpl	.-8      	; 0x5642 <DIO_u8SetPinValue+0x6e>
    564a:	80 95       	com	r24
    564c:	82 23       	and	r24, r18
    564e:	82 bb       	out	0x12, r24	; 18
    5650:	36 c0       	rjmp	.+108    	; 0x56be <DIO_u8SetPinValue+0xea>
			default:
				Local_u8State = E_NOK;
				break;
			}
		}
		else if(copy_u8Value==DIO_PIN_HIGH)
    5652:	41 30       	cpi	r20, 0x01	; 1
    5654:	b1 f5       	brne	.+108    	; 0x56c2 <DIO_u8SetPinValue+0xee>
		{
			switch(copy_u8Port)
    5656:	81 30       	cpi	r24, 0x01	; 1
    5658:	91 f0       	breq	.+36     	; 0x567e <DIO_u8SetPinValue+0xaa>
    565a:	81 30       	cpi	r24, 0x01	; 1
    565c:	28 f0       	brcs	.+10     	; 0x5668 <DIO_u8SetPinValue+0x94>
    565e:	82 30       	cpi	r24, 0x02	; 2
    5660:	c9 f0       	breq	.+50     	; 0x5694 <DIO_u8SetPinValue+0xc0>
    5662:	83 30       	cpi	r24, 0x03	; 3
    5664:	71 f5       	brne	.+92     	; 0x56c2 <DIO_u8SetPinValue+0xee>
    5666:	21 c0       	rjmp	.+66     	; 0x56aa <DIO_u8SetPinValue+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(PORTA,copy_u8Pin);
    5668:	2b b3       	in	r18, 0x1b	; 27
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <DIO_u8SetPinValue+0xa0>
    5670:	88 0f       	add	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	6a 95       	dec	r22
    5676:	e2 f7       	brpl	.-8      	; 0x5670 <DIO_u8SetPinValue+0x9c>
    5678:	28 2b       	or	r18, r24
    567a:	2b bb       	out	0x1b, r18	; 27
    567c:	20 c0       	rjmp	.+64     	; 0x56be <DIO_u8SetPinValue+0xea>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB,copy_u8Pin);
    567e:	28 b3       	in	r18, 0x18	; 24
    5680:	81 e0       	ldi	r24, 0x01	; 1
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	02 c0       	rjmp	.+4      	; 0x568a <DIO_u8SetPinValue+0xb6>
    5686:	88 0f       	add	r24, r24
    5688:	99 1f       	adc	r25, r25
    568a:	6a 95       	dec	r22
    568c:	e2 f7       	brpl	.-8      	; 0x5686 <DIO_u8SetPinValue+0xb2>
    568e:	28 2b       	or	r18, r24
    5690:	28 bb       	out	0x18, r18	; 24
    5692:	15 c0       	rjmp	.+42     	; 0x56be <DIO_u8SetPinValue+0xea>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC,copy_u8Pin);
    5694:	25 b3       	in	r18, 0x15	; 21
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	02 c0       	rjmp	.+4      	; 0x56a0 <DIO_u8SetPinValue+0xcc>
    569c:	88 0f       	add	r24, r24
    569e:	99 1f       	adc	r25, r25
    56a0:	6a 95       	dec	r22
    56a2:	e2 f7       	brpl	.-8      	; 0x569c <DIO_u8SetPinValue+0xc8>
    56a4:	28 2b       	or	r18, r24
    56a6:	25 bb       	out	0x15, r18	; 21
    56a8:	0a c0       	rjmp	.+20     	; 0x56be <DIO_u8SetPinValue+0xea>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD,copy_u8Pin);
    56aa:	22 b3       	in	r18, 0x12	; 18
    56ac:	81 e0       	ldi	r24, 0x01	; 1
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	02 c0       	rjmp	.+4      	; 0x56b6 <DIO_u8SetPinValue+0xe2>
    56b2:	88 0f       	add	r24, r24
    56b4:	99 1f       	adc	r25, r25
    56b6:	6a 95       	dec	r22
    56b8:	e2 f7       	brpl	.-8      	; 0x56b2 <DIO_u8SetPinValue+0xde>
    56ba:	28 2b       	or	r18, r24
    56bc:	22 bb       	out	0x12, r18	; 18
    56be:	80 e0       	ldi	r24, 0x00	; 0
    56c0:	08 95       	ret
				break;
    56c2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    56c4:	08 95       	ret

000056c6 <DIO_u8SetPinDirection>:

ReturnType_State_t DIO_u8SetPinDirection(u8 copy_u8Port,u8 copy_u8Pin ,u8 copy_u8Direction)
{
	u8 Local_u8State = E_OK;
	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    56c6:	68 30       	cpi	r22, 0x08	; 8
    56c8:	08 f0       	brcs	.+2      	; 0x56cc <DIO_u8SetPinDirection+0x6>
    56ca:	74 c0       	rjmp	.+232    	; 0x57b4 <DIO_u8SetPinDirection+0xee>
	{
		if(copy_u8Direction==DIO_PIN_INPUT)
    56cc:	44 23       	and	r20, r20
    56ce:	d1 f5       	brne	.+116    	; 0x5744 <DIO_u8SetPinDirection+0x7e>
		{
			switch(copy_u8Port)
    56d0:	81 30       	cpi	r24, 0x01	; 1
    56d2:	a1 f0       	breq	.+40     	; 0x56fc <DIO_u8SetPinDirection+0x36>
    56d4:	81 30       	cpi	r24, 0x01	; 1
    56d6:	30 f0       	brcs	.+12     	; 0x56e4 <DIO_u8SetPinDirection+0x1e>
    56d8:	82 30       	cpi	r24, 0x02	; 2
    56da:	e1 f0       	breq	.+56     	; 0x5714 <DIO_u8SetPinDirection+0x4e>
    56dc:	83 30       	cpi	r24, 0x03	; 3
    56de:	09 f0       	breq	.+2      	; 0x56e2 <DIO_u8SetPinDirection+0x1c>
    56e0:	69 c0       	rjmp	.+210    	; 0x57b4 <DIO_u8SetPinDirection+0xee>
    56e2:	24 c0       	rjmp	.+72     	; 0x572c <DIO_u8SetPinDirection+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,copy_u8Pin);
    56e4:	2a b3       	in	r18, 0x1a	; 26
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <DIO_u8SetPinDirection+0x2a>
    56ec:	88 0f       	add	r24, r24
    56ee:	99 1f       	adc	r25, r25
    56f0:	6a 95       	dec	r22
    56f2:	e2 f7       	brpl	.-8      	; 0x56ec <DIO_u8SetPinDirection+0x26>
    56f4:	80 95       	com	r24
    56f6:	82 23       	and	r24, r18
    56f8:	8a bb       	out	0x1a, r24	; 26
    56fa:	5a c0       	rjmp	.+180    	; 0x57b0 <DIO_u8SetPinDirection+0xea>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB,copy_u8Pin);
    56fc:	27 b3       	in	r18, 0x17	; 23
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	02 c0       	rjmp	.+4      	; 0x5708 <DIO_u8SetPinDirection+0x42>
    5704:	88 0f       	add	r24, r24
    5706:	99 1f       	adc	r25, r25
    5708:	6a 95       	dec	r22
    570a:	e2 f7       	brpl	.-8      	; 0x5704 <DIO_u8SetPinDirection+0x3e>
    570c:	80 95       	com	r24
    570e:	82 23       	and	r24, r18
    5710:	87 bb       	out	0x17, r24	; 23
    5712:	4e c0       	rjmp	.+156    	; 0x57b0 <DIO_u8SetPinDirection+0xea>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC,copy_u8Pin);
    5714:	24 b3       	in	r18, 0x14	; 20
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	02 c0       	rjmp	.+4      	; 0x5720 <DIO_u8SetPinDirection+0x5a>
    571c:	88 0f       	add	r24, r24
    571e:	99 1f       	adc	r25, r25
    5720:	6a 95       	dec	r22
    5722:	e2 f7       	brpl	.-8      	; 0x571c <DIO_u8SetPinDirection+0x56>
    5724:	80 95       	com	r24
    5726:	82 23       	and	r24, r18
    5728:	84 bb       	out	0x14, r24	; 20
    572a:	42 c0       	rjmp	.+132    	; 0x57b0 <DIO_u8SetPinDirection+0xea>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD,copy_u8Pin);
    572c:	21 b3       	in	r18, 0x11	; 17
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	02 c0       	rjmp	.+4      	; 0x5738 <DIO_u8SetPinDirection+0x72>
    5734:	88 0f       	add	r24, r24
    5736:	99 1f       	adc	r25, r25
    5738:	6a 95       	dec	r22
    573a:	e2 f7       	brpl	.-8      	; 0x5734 <DIO_u8SetPinDirection+0x6e>
    573c:	80 95       	com	r24
    573e:	82 23       	and	r24, r18
    5740:	81 bb       	out	0x11, r24	; 17
    5742:	36 c0       	rjmp	.+108    	; 0x57b0 <DIO_u8SetPinDirection+0xea>
			default:
				Local_u8State = E_NOK;
				break;
			}
		}
		else if(copy_u8Direction==DIO_PIN_OUTPUT)
    5744:	41 30       	cpi	r20, 0x01	; 1
    5746:	b1 f5       	brne	.+108    	; 0x57b4 <DIO_u8SetPinDirection+0xee>
		{
			switch(copy_u8Port)
    5748:	81 30       	cpi	r24, 0x01	; 1
    574a:	91 f0       	breq	.+36     	; 0x5770 <DIO_u8SetPinDirection+0xaa>
    574c:	81 30       	cpi	r24, 0x01	; 1
    574e:	28 f0       	brcs	.+10     	; 0x575a <DIO_u8SetPinDirection+0x94>
    5750:	82 30       	cpi	r24, 0x02	; 2
    5752:	c9 f0       	breq	.+50     	; 0x5786 <DIO_u8SetPinDirection+0xc0>
    5754:	83 30       	cpi	r24, 0x03	; 3
    5756:	71 f5       	brne	.+92     	; 0x57b4 <DIO_u8SetPinDirection+0xee>
    5758:	21 c0       	rjmp	.+66     	; 0x579c <DIO_u8SetPinDirection+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,copy_u8Pin);
    575a:	2a b3       	in	r18, 0x1a	; 26
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	02 c0       	rjmp	.+4      	; 0x5766 <DIO_u8SetPinDirection+0xa0>
    5762:	88 0f       	add	r24, r24
    5764:	99 1f       	adc	r25, r25
    5766:	6a 95       	dec	r22
    5768:	e2 f7       	brpl	.-8      	; 0x5762 <DIO_u8SetPinDirection+0x9c>
    576a:	28 2b       	or	r18, r24
    576c:	2a bb       	out	0x1a, r18	; 26
    576e:	20 c0       	rjmp	.+64     	; 0x57b0 <DIO_u8SetPinDirection+0xea>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB,copy_u8Pin);
    5770:	27 b3       	in	r18, 0x17	; 23
    5772:	81 e0       	ldi	r24, 0x01	; 1
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	02 c0       	rjmp	.+4      	; 0x577c <DIO_u8SetPinDirection+0xb6>
    5778:	88 0f       	add	r24, r24
    577a:	99 1f       	adc	r25, r25
    577c:	6a 95       	dec	r22
    577e:	e2 f7       	brpl	.-8      	; 0x5778 <DIO_u8SetPinDirection+0xb2>
    5780:	28 2b       	or	r18, r24
    5782:	27 bb       	out	0x17, r18	; 23
    5784:	15 c0       	rjmp	.+42     	; 0x57b0 <DIO_u8SetPinDirection+0xea>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC,copy_u8Pin);
    5786:	24 b3       	in	r18, 0x14	; 20
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	02 c0       	rjmp	.+4      	; 0x5792 <DIO_u8SetPinDirection+0xcc>
    578e:	88 0f       	add	r24, r24
    5790:	99 1f       	adc	r25, r25
    5792:	6a 95       	dec	r22
    5794:	e2 f7       	brpl	.-8      	; 0x578e <DIO_u8SetPinDirection+0xc8>
    5796:	28 2b       	or	r18, r24
    5798:	24 bb       	out	0x14, r18	; 20
    579a:	0a c0       	rjmp	.+20     	; 0x57b0 <DIO_u8SetPinDirection+0xea>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD,copy_u8Pin);
    579c:	21 b3       	in	r18, 0x11	; 17
    579e:	81 e0       	ldi	r24, 0x01	; 1
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <DIO_u8SetPinDirection+0xe2>
    57a4:	88 0f       	add	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	6a 95       	dec	r22
    57aa:	e2 f7       	brpl	.-8      	; 0x57a4 <DIO_u8SetPinDirection+0xde>
    57ac:	28 2b       	or	r18, r24
    57ae:	21 bb       	out	0x11, r18	; 17
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	08 95       	ret
				break;
    57b4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    57b6:	08 95       	ret

000057b8 <DIO_u8GetPinValue>:

ReturnType_State_t DIO_u8GetPinValue(u8 copy_u8Port,u8 copy_u8Pin ,u8 *copy_u8Variable)
{
    57b8:	fa 01       	movw	r30, r20
	u8 Local_u8State = E_OK;
	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    57ba:	68 30       	cpi	r22, 0x08	; 8
    57bc:	d0 f4       	brcc	.+52     	; 0x57f2 <DIO_u8GetPinValue+0x3a>
	{
		switch(copy_u8Port)
    57be:	81 30       	cpi	r24, 0x01	; 1
    57c0:	49 f0       	breq	.+18     	; 0x57d4 <DIO_u8GetPinValue+0x1c>
    57c2:	81 30       	cpi	r24, 0x01	; 1
    57c4:	28 f0       	brcs	.+10     	; 0x57d0 <DIO_u8GetPinValue+0x18>
    57c6:	82 30       	cpi	r24, 0x02	; 2
    57c8:	39 f0       	breq	.+14     	; 0x57d8 <DIO_u8GetPinValue+0x20>
    57ca:	83 30       	cpi	r24, 0x03	; 3
    57cc:	91 f4       	brne	.+36     	; 0x57f2 <DIO_u8GetPinValue+0x3a>
    57ce:	06 c0       	rjmp	.+12     	; 0x57dc <DIO_u8GetPinValue+0x24>
		{
		case DIO_PORTA:
			*copy_u8Variable =GET_BIT(PINA,copy_u8Pin) ;
    57d0:	89 b3       	in	r24, 0x19	; 25
    57d2:	05 c0       	rjmp	.+10     	; 0x57de <DIO_u8GetPinValue+0x26>
			break;
		case DIO_PORTB:
			*copy_u8Variable =GET_BIT(PINB,copy_u8Pin) ;
    57d4:	86 b3       	in	r24, 0x16	; 22
    57d6:	03 c0       	rjmp	.+6      	; 0x57de <DIO_u8GetPinValue+0x26>
			break;
		case DIO_PORTC:
			*copy_u8Variable =GET_BIT(PINC,copy_u8Pin) ;
    57d8:	83 b3       	in	r24, 0x13	; 19
    57da:	01 c0       	rjmp	.+2      	; 0x57de <DIO_u8GetPinValue+0x26>
			break;
		case DIO_PORTD:
			*copy_u8Variable =GET_BIT(PIND,copy_u8Pin) ;
    57dc:	80 b3       	in	r24, 0x10	; 16
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	02 c0       	rjmp	.+4      	; 0x57e6 <DIO_u8GetPinValue+0x2e>
    57e2:	95 95       	asr	r25
    57e4:	87 95       	ror	r24
    57e6:	6a 95       	dec	r22
    57e8:	e2 f7       	brpl	.-8      	; 0x57e2 <DIO_u8GetPinValue+0x2a>
    57ea:	81 70       	andi	r24, 0x01	; 1
    57ec:	80 83       	st	Z, r24
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	08 95       	ret
			break;
    57f2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    57f4:	08 95       	ret

000057f6 <DIO_u8GetConnectPullUp>:


/********************************PULL UP Coonecting Functions****************/
ReturnType_State_t DIO_u8GetConnectPullUp(u8 copy_u8Port,u8 copy_u8Pin ,u8 copy_u8ConnectPullUp)
{
    57f6:	98 2f       	mov	r25, r24
	ReturnType_State_t Local_error_state=E_OK;
	if((copy_u8Port<=DIO_PORTD) && (copy_u8Pin<=DIO_PIN7))
    57f8:	84 30       	cpi	r24, 0x04	; 4
    57fa:	08 f0       	brcs	.+2      	; 0x57fe <DIO_u8GetConnectPullUp+0x8>
    57fc:	86 c0       	rjmp	.+268    	; 0x590a <DIO_u8GetConnectPullUp+0x114>
    57fe:	68 30       	cpi	r22, 0x08	; 8
    5800:	08 f0       	brcs	.+2      	; 0x5804 <DIO_u8GetConnectPullUp+0xe>
    5802:	83 c0       	rjmp	.+262    	; 0x590a <DIO_u8GetConnectPullUp+0x114>
	{
		CLR_BIT(SFIOR,PUD);
    5804:	80 b7       	in	r24, 0x30	; 48
    5806:	8b 7f       	andi	r24, 0xFB	; 251
    5808:	80 bf       	out	0x30, r24	; 48
		switch(copy_u8Port)
    580a:	91 30       	cpi	r25, 0x01	; 1
    580c:	31 f1       	breq	.+76     	; 0x585a <DIO_u8GetConnectPullUp+0x64>
    580e:	91 30       	cpi	r25, 0x01	; 1
    5810:	38 f0       	brcs	.+14     	; 0x5820 <DIO_u8GetConnectPullUp+0x2a>
    5812:	92 30       	cpi	r25, 0x02	; 2
    5814:	09 f4       	brne	.+2      	; 0x5818 <DIO_u8GetConnectPullUp+0x22>
    5816:	3e c0       	rjmp	.+124    	; 0x5894 <DIO_u8GetConnectPullUp+0x9e>
    5818:	93 30       	cpi	r25, 0x03	; 3
    581a:	09 f0       	breq	.+2      	; 0x581e <DIO_u8GetConnectPullUp+0x28>
    581c:	74 c0       	rjmp	.+232    	; 0x5906 <DIO_u8GetConnectPullUp+0x110>
    581e:	57 c0       	rjmp	.+174    	; 0x58ce <DIO_u8GetConnectPullUp+0xd8>
		{
		case DIO_PORTA:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    5820:	41 30       	cpi	r20, 0x01	; 1
    5822:	79 f4       	brne	.+30     	; 0x5842 <DIO_u8GetConnectPullUp+0x4c>
			{
				CLR_BIT(DDRA,copy_u8Pin);
    5824:	3a b3       	in	r19, 0x1a	; 26
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	02 c0       	rjmp	.+4      	; 0x5830 <DIO_u8GetConnectPullUp+0x3a>
    582c:	88 0f       	add	r24, r24
    582e:	99 1f       	adc	r25, r25
    5830:	6a 95       	dec	r22
    5832:	e2 f7       	brpl	.-8      	; 0x582c <DIO_u8GetConnectPullUp+0x36>
    5834:	28 2f       	mov	r18, r24
    5836:	20 95       	com	r18
    5838:	23 23       	and	r18, r19
    583a:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA,copy_u8Pin);
    583c:	2b b3       	in	r18, 0x1b	; 27
    583e:	82 2b       	or	r24, r18
    5840:	0a c0       	rjmp	.+20     	; 0x5856 <DIO_u8GetConnectPullUp+0x60>
			}
			else
			{
				CLR_BIT(PORTA,copy_u8Pin);
    5842:	2b b3       	in	r18, 0x1b	; 27
    5844:	81 e0       	ldi	r24, 0x01	; 1
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	02 c0       	rjmp	.+4      	; 0x584e <DIO_u8GetConnectPullUp+0x58>
    584a:	88 0f       	add	r24, r24
    584c:	99 1f       	adc	r25, r25
    584e:	6a 95       	dec	r22
    5850:	e2 f7       	brpl	.-8      	; 0x584a <DIO_u8GetConnectPullUp+0x54>
    5852:	80 95       	com	r24
    5854:	82 23       	and	r24, r18
    5856:	8b bb       	out	0x1b, r24	; 27
    5858:	56 c0       	rjmp	.+172    	; 0x5906 <DIO_u8GetConnectPullUp+0x110>
			}
			break;
		case DIO_PORTB:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    585a:	41 30       	cpi	r20, 0x01	; 1
    585c:	79 f4       	brne	.+30     	; 0x587c <DIO_u8GetConnectPullUp+0x86>
			{
				CLR_BIT(DDRB,copy_u8Pin);
    585e:	37 b3       	in	r19, 0x17	; 23
    5860:	81 e0       	ldi	r24, 0x01	; 1
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	02 c0       	rjmp	.+4      	; 0x586a <DIO_u8GetConnectPullUp+0x74>
    5866:	88 0f       	add	r24, r24
    5868:	99 1f       	adc	r25, r25
    586a:	6a 95       	dec	r22
    586c:	e2 f7       	brpl	.-8      	; 0x5866 <DIO_u8GetConnectPullUp+0x70>
    586e:	28 2f       	mov	r18, r24
    5870:	20 95       	com	r18
    5872:	23 23       	and	r18, r19
    5874:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB,copy_u8Pin);
    5876:	28 b3       	in	r18, 0x18	; 24
    5878:	82 2b       	or	r24, r18
    587a:	0a c0       	rjmp	.+20     	; 0x5890 <DIO_u8GetConnectPullUp+0x9a>
			}
			else
			{
				CLR_BIT(PORTB,copy_u8Pin);
    587c:	28 b3       	in	r18, 0x18	; 24
    587e:	81 e0       	ldi	r24, 0x01	; 1
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	02 c0       	rjmp	.+4      	; 0x5888 <DIO_u8GetConnectPullUp+0x92>
    5884:	88 0f       	add	r24, r24
    5886:	99 1f       	adc	r25, r25
    5888:	6a 95       	dec	r22
    588a:	e2 f7       	brpl	.-8      	; 0x5884 <DIO_u8GetConnectPullUp+0x8e>
    588c:	80 95       	com	r24
    588e:	82 23       	and	r24, r18
    5890:	88 bb       	out	0x18, r24	; 24
    5892:	39 c0       	rjmp	.+114    	; 0x5906 <DIO_u8GetConnectPullUp+0x110>
			}
			break;
		case DIO_PORTC :
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    5894:	41 30       	cpi	r20, 0x01	; 1
    5896:	79 f4       	brne	.+30     	; 0x58b6 <DIO_u8GetConnectPullUp+0xc0>
			{
				CLR_BIT(DDRC,copy_u8Pin);
    5898:	34 b3       	in	r19, 0x14	; 20
    589a:	81 e0       	ldi	r24, 0x01	; 1
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	02 c0       	rjmp	.+4      	; 0x58a4 <DIO_u8GetConnectPullUp+0xae>
    58a0:	88 0f       	add	r24, r24
    58a2:	99 1f       	adc	r25, r25
    58a4:	6a 95       	dec	r22
    58a6:	e2 f7       	brpl	.-8      	; 0x58a0 <DIO_u8GetConnectPullUp+0xaa>
    58a8:	28 2f       	mov	r18, r24
    58aa:	20 95       	com	r18
    58ac:	23 23       	and	r18, r19
    58ae:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC,copy_u8Pin);
    58b0:	25 b3       	in	r18, 0x15	; 21
    58b2:	82 2b       	or	r24, r18
    58b4:	0a c0       	rjmp	.+20     	; 0x58ca <DIO_u8GetConnectPullUp+0xd4>
			}
			else
			{
				CLR_BIT(PORTC,copy_u8Pin);
    58b6:	25 b3       	in	r18, 0x15	; 21
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	02 c0       	rjmp	.+4      	; 0x58c2 <DIO_u8GetConnectPullUp+0xcc>
    58be:	88 0f       	add	r24, r24
    58c0:	99 1f       	adc	r25, r25
    58c2:	6a 95       	dec	r22
    58c4:	e2 f7       	brpl	.-8      	; 0x58be <DIO_u8GetConnectPullUp+0xc8>
    58c6:	80 95       	com	r24
    58c8:	82 23       	and	r24, r18
    58ca:	85 bb       	out	0x15, r24	; 21
    58cc:	1c c0       	rjmp	.+56     	; 0x5906 <DIO_u8GetConnectPullUp+0x110>
			}
			break;
		case DIO_PORTD :
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    58ce:	41 30       	cpi	r20, 0x01	; 1
    58d0:	79 f4       	brne	.+30     	; 0x58f0 <DIO_u8GetConnectPullUp+0xfa>
			{
				CLR_BIT(DDRD,copy_u8Pin);
    58d2:	31 b3       	in	r19, 0x11	; 17
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	02 c0       	rjmp	.+4      	; 0x58de <DIO_u8GetConnectPullUp+0xe8>
    58da:	88 0f       	add	r24, r24
    58dc:	99 1f       	adc	r25, r25
    58de:	6a 95       	dec	r22
    58e0:	e2 f7       	brpl	.-8      	; 0x58da <DIO_u8GetConnectPullUp+0xe4>
    58e2:	28 2f       	mov	r18, r24
    58e4:	20 95       	com	r18
    58e6:	23 23       	and	r18, r19
    58e8:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD,copy_u8Pin);
    58ea:	22 b3       	in	r18, 0x12	; 18
    58ec:	82 2b       	or	r24, r18
    58ee:	0a c0       	rjmp	.+20     	; 0x5904 <DIO_u8GetConnectPullUp+0x10e>
			}
			else
			{
				CLR_BIT(PORTD,copy_u8Pin);
    58f0:	22 b3       	in	r18, 0x12	; 18
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	02 c0       	rjmp	.+4      	; 0x58fc <DIO_u8GetConnectPullUp+0x106>
    58f8:	88 0f       	add	r24, r24
    58fa:	99 1f       	adc	r25, r25
    58fc:	6a 95       	dec	r22
    58fe:	e2 f7       	brpl	.-8      	; 0x58f8 <DIO_u8GetConnectPullUp+0x102>
    5900:	80 95       	com	r24
    5902:	82 23       	and	r24, r18
    5904:	82 bb       	out	0x12, r24	; 18
    5906:	80 e0       	ldi	r24, 0x00	; 0
    5908:	08 95       	ret
    590a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_error_state=E_NOK;
	}
  return Local_error_state ;
}
    590c:	08 95       	ret

0000590e <DIO_u8TogglePinValue>:

ReturnType_State_t DIO_u8TogglePinValue(u8 copy_u8Port,u8 copy_u8Pin)
{
	u8 Local_u8State = E_OK;
		if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    590e:	68 30       	cpi	r22, 0x08	; 8
    5910:	b0 f5       	brcc	.+108    	; 0x597e <DIO_u8TogglePinValue+0x70>
		{
			switch(copy_u8Port)
    5912:	81 30       	cpi	r24, 0x01	; 1
    5914:	91 f0       	breq	.+36     	; 0x593a <DIO_u8TogglePinValue+0x2c>
    5916:	81 30       	cpi	r24, 0x01	; 1
    5918:	28 f0       	brcs	.+10     	; 0x5924 <DIO_u8TogglePinValue+0x16>
    591a:	82 30       	cpi	r24, 0x02	; 2
    591c:	c9 f0       	breq	.+50     	; 0x5950 <DIO_u8TogglePinValue+0x42>
    591e:	83 30       	cpi	r24, 0x03	; 3
    5920:	71 f5       	brne	.+92     	; 0x597e <DIO_u8TogglePinValue+0x70>
    5922:	21 c0       	rjmp	.+66     	; 0x5966 <DIO_u8TogglePinValue+0x58>
			{
			case DIO_PORTA:
				TOG_BIT(PORTA,copy_u8Pin) ;
    5924:	2b b3       	in	r18, 0x1b	; 27
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	02 c0       	rjmp	.+4      	; 0x5930 <DIO_u8TogglePinValue+0x22>
    592c:	88 0f       	add	r24, r24
    592e:	99 1f       	adc	r25, r25
    5930:	6a 95       	dec	r22
    5932:	e2 f7       	brpl	.-8      	; 0x592c <DIO_u8TogglePinValue+0x1e>
    5934:	28 27       	eor	r18, r24
    5936:	2b bb       	out	0x1b, r18	; 27
    5938:	20 c0       	rjmp	.+64     	; 0x597a <DIO_u8TogglePinValue+0x6c>
				break;
			case DIO_PORTB:
				TOG_BIT(PORTB,copy_u8Pin) ;
    593a:	28 b3       	in	r18, 0x18	; 24
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	90 e0       	ldi	r25, 0x00	; 0
    5940:	02 c0       	rjmp	.+4      	; 0x5946 <DIO_u8TogglePinValue+0x38>
    5942:	88 0f       	add	r24, r24
    5944:	99 1f       	adc	r25, r25
    5946:	6a 95       	dec	r22
    5948:	e2 f7       	brpl	.-8      	; 0x5942 <DIO_u8TogglePinValue+0x34>
    594a:	28 27       	eor	r18, r24
    594c:	28 bb       	out	0x18, r18	; 24
    594e:	15 c0       	rjmp	.+42     	; 0x597a <DIO_u8TogglePinValue+0x6c>
				break;
			case DIO_PORTC:
				TOG_BIT(PORTC,copy_u8Pin) ;
    5950:	25 b3       	in	r18, 0x15	; 21
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	02 c0       	rjmp	.+4      	; 0x595c <DIO_u8TogglePinValue+0x4e>
    5958:	88 0f       	add	r24, r24
    595a:	99 1f       	adc	r25, r25
    595c:	6a 95       	dec	r22
    595e:	e2 f7       	brpl	.-8      	; 0x5958 <DIO_u8TogglePinValue+0x4a>
    5960:	28 27       	eor	r18, r24
    5962:	25 bb       	out	0x15, r18	; 21
    5964:	0a c0       	rjmp	.+20     	; 0x597a <DIO_u8TogglePinValue+0x6c>
				break;
			case DIO_PORTD:
				TOG_BIT(PORTD,copy_u8Pin) ;
    5966:	22 b3       	in	r18, 0x12	; 18
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	02 c0       	rjmp	.+4      	; 0x5972 <DIO_u8TogglePinValue+0x64>
    596e:	88 0f       	add	r24, r24
    5970:	99 1f       	adc	r25, r25
    5972:	6a 95       	dec	r22
    5974:	e2 f7       	brpl	.-8      	; 0x596e <DIO_u8TogglePinValue+0x60>
    5976:	28 27       	eor	r18, r24
    5978:	22 bb       	out	0x12, r18	; 18
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	08 95       	ret
				break;
    597e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			Local_u8State = E_NOK;
		}
		return Local_u8State;
}
    5980:	08 95       	ret

00005982 <BUZ_voidToggle>:

}


void BUZ_voidToggle( BUZ_Type BUZ_Configuration)
{
    5982:	df 93       	push	r29
    5984:	cf 93       	push	r28
    5986:	00 d0       	rcall	.+0      	; 0x5988 <BUZ_voidToggle+0x6>
    5988:	0f 92       	push	r0
    598a:	cd b7       	in	r28, 0x3d	; 61
    598c:	de b7       	in	r29, 0x3e	; 62
    598e:	96 2f       	mov	r25, r22
    5990:	69 83       	std	Y+1, r22	; 0x01
    5992:	67 2f       	mov	r22, r23
    5994:	7a 83       	std	Y+2, r23	; 0x02
    5996:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8TogglePinValue  ( BUZ_Configuration.Port , BUZ_Configuration.Pin);
    5998:	89 2f       	mov	r24, r25
    599a:	0e 94 87 2c 	call	0x590e	; 0x590e <DIO_u8TogglePinValue>
}
    599e:	0f 90       	pop	r0
    59a0:	0f 90       	pop	r0
    59a2:	0f 90       	pop	r0
    59a4:	cf 91       	pop	r28
    59a6:	df 91       	pop	r29
    59a8:	08 95       	ret

000059aa <BUZ_voidOff>:

}


void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
    59aa:	df 93       	push	r29
    59ac:	cf 93       	push	r28
    59ae:	00 d0       	rcall	.+0      	; 0x59b0 <BUZ_voidOff+0x6>
    59b0:	0f 92       	push	r0
    59b2:	cd b7       	in	r28, 0x3d	; 61
    59b4:	de b7       	in	r29, 0x3e	; 62
    59b6:	26 2f       	mov	r18, r22
    59b8:	69 83       	std	Y+1, r22	; 0x01
    59ba:	7a 83       	std	Y+2, r23	; 0x02
    59bc:	8b 83       	std	Y+3, r24	; 0x03
    59be:	67 2f       	mov	r22, r23

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    59c0:	81 30       	cpi	r24, 0x01	; 1
    59c2:	19 f4       	brne	.+6      	; 0x59ca <BUZ_voidOff+0x20>

		DIO_u8SetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    59c4:	82 2f       	mov	r24, r18
    59c6:	40 e0       	ldi	r20, 0x00	; 0
    59c8:	04 c0       	rjmp	.+8      	; 0x59d2 <BUZ_voidOff+0x28>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    59ca:	88 23       	and	r24, r24
    59cc:	21 f4       	brne	.+8      	; 0x59d6 <BUZ_voidOff+0x2c>

		DIO_u8SetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
    59ce:	82 2f       	mov	r24, r18
    59d0:	41 e0       	ldi	r20, 0x01	; 1
    59d2:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

	}

}
    59d6:	0f 90       	pop	r0
    59d8:	0f 90       	pop	r0
    59da:	0f 90       	pop	r0
    59dc:	cf 91       	pop	r28
    59de:	df 91       	pop	r29
    59e0:	08 95       	ret

000059e2 <BUZ_voidOn>:

}


void BUZ_voidOn  ( BUZ_Type BUZ_Configuration )
{
    59e2:	df 93       	push	r29
    59e4:	cf 93       	push	r28
    59e6:	00 d0       	rcall	.+0      	; 0x59e8 <BUZ_voidOn+0x6>
    59e8:	0f 92       	push	r0
    59ea:	cd b7       	in	r28, 0x3d	; 61
    59ec:	de b7       	in	r29, 0x3e	; 62
    59ee:	26 2f       	mov	r18, r22
    59f0:	69 83       	std	Y+1, r22	; 0x01
    59f2:	7a 83       	std	Y+2, r23	; 0x02
    59f4:	8b 83       	std	Y+3, r24	; 0x03
    59f6:	67 2f       	mov	r22, r23

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    59f8:	81 30       	cpi	r24, 0x01	; 1
    59fa:	19 f4       	brne	.+6      	; 0x5a02 <BUZ_voidOn+0x20>

		DIO_u8SetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH );
    59fc:	82 2f       	mov	r24, r18
    59fe:	41 e0       	ldi	r20, 0x01	; 1
    5a00:	04 c0       	rjmp	.+8      	; 0x5a0a <BUZ_voidOn+0x28>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    5a02:	88 23       	and	r24, r24
    5a04:	21 f4       	brne	.+8      	; 0x5a0e <BUZ_voidOn+0x2c>

		DIO_u8SetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    5a06:	82 2f       	mov	r24, r18
    5a08:	40 e0       	ldi	r20, 0x00	; 0
    5a0a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

	}

}
    5a0e:	0f 90       	pop	r0
    5a10:	0f 90       	pop	r0
    5a12:	0f 90       	pop	r0
    5a14:	cf 91       	pop	r28
    5a16:	df 91       	pop	r29
    5a18:	08 95       	ret

00005a1a <BUZ_voidInit>:

/**************************************************************/
/*					FUNCTIONS DEFINITIONS					  */
/**************************************************************/
void BUZ_voidInit( BUZ_Type BUZ_Configuration)
{
    5a1a:	df 93       	push	r29
    5a1c:	cf 93       	push	r28
    5a1e:	00 d0       	rcall	.+0      	; 0x5a20 <BUZ_voidInit+0x6>
    5a20:	0f 92       	push	r0
    5a22:	cd b7       	in	r28, 0x3d	; 61
    5a24:	de b7       	in	r29, 0x3e	; 62
    5a26:	96 2f       	mov	r25, r22
    5a28:	69 83       	std	Y+1, r22	; 0x01
    5a2a:	67 2f       	mov	r22, r23
    5a2c:	7a 83       	std	Y+2, r23	; 0x02
    5a2e:	8b 83       	std	Y+3, r24	; 0x03

	DIO_u8SetPinDirection( BUZ_Configuration.Port , BUZ_Configuration.Pin ,DIO_PIN_OUTPUT);
    5a30:	89 2f       	mov	r24, r25
    5a32:	41 e0       	ldi	r20, 0x01	; 1
    5a34:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>

}
    5a38:	0f 90       	pop	r0
    5a3a:	0f 90       	pop	r0
    5a3c:	0f 90       	pop	r0
    5a3e:	cf 91       	pop	r28
    5a40:	df 91       	pop	r29
    5a42:	08 95       	ret

00005a44 <ADC_voidInit>:
{
#if ADC_REF_SELECTION == AREFF
	CLR_BIT(ADMUX, REFS0);
	CLR_BIT(ADMUX, REFS1);
#elif ADC_REF_SELECTION == AVCC
	SET_BIT(ADMUX, REFS0);
    5a44:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX, REFS1);
    5a46:	3f 98       	cbi	0x07, 7	; 7

#endif

	/***************Challenge: Make configurations***************/
	/*clear ADLAR bit, so the first 8-bits will return in ADCL, and last 2-bits in ADCH*/
	CLR_BIT(ADMUX, ADLAR);
    5a48:	3d 98       	cbi	0x07, 5	; 7
	/*clear AUTO trigger ADC, so the ADC conversion will start only when you call:  ADC_convert_read() */
	CLR_BIT(ADCSRA, ADATE);
    5a4a:	35 98       	cbi	0x06, 5	; 6
	/*disable ADC interrupt: */
	CLR_BIT(ADCSRA, ADIE);
    5a4c:	33 98       	cbi	0x06, 3	; 6
	/*set pre-scaler to be: (F_CPU/64) = (8000000/64) = 125 KHz */
	CLR_BIT(ADCSRA, ADPS0);
    5a4e:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA, ADPS1);
    5a50:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA, ADPS2);
    5a52:	32 9a       	sbi	0x06, 2	; 6

	/*enable ADC peripheral in MCU*/
	SET_BIT(ADCSRA, ADEN);
    5a54:	37 9a       	sbi	0x06, 7	; 6
}
    5a56:	08 95       	ret

00005a58 <ADC_u16GetConversionReading>:

u16 ADC_u16GetConversionReading(u8 copy_u8Channel)
{
	u16 ADC_data = 0;

	if(copy_u8Channel == CHANNEL0)
    5a58:	81 30       	cpi	r24, 0x01	; 1
    5a5a:	49 f4       	brne	.+18     	; 0x5a6e <ADC_u16GetConversionReading+0x16>
	{
		/*select input channel to pin PA0*/
		CLR_BIT(ADMUX, MUX0);
    5a5c:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
    5a5e:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
    5a60:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5a62:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5a64:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5a66:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5a68:	36 99       	sbic	0x06, 6	; 6
    5a6a:	fe cf       	rjmp	.-4      	; 0x5a68 <ADC_u16GetConversionReading+0x10>
    5a6c:	4f c0       	rjmp	.+158    	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);
	}

	else if(copy_u8Channel == CHANNEL1)
    5a6e:	82 30       	cpi	r24, 0x02	; 2
    5a70:	49 f4       	brne	.+18     	; 0x5a84 <ADC_u16GetConversionReading+0x2c>
	{
		/*select input channel to pin PA1*/
		SET_BIT(ADMUX, MUX0);
    5a72:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
    5a74:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
    5a76:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5a78:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5a7a:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5a7c:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5a7e:	36 99       	sbic	0x06, 6	; 6
    5a80:	fe cf       	rjmp	.-4      	; 0x5a7e <ADC_u16GetConversionReading+0x26>
    5a82:	44 c0       	rjmp	.+136    	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);
	}

	else if(copy_u8Channel == CHANNEL2)
    5a84:	83 30       	cpi	r24, 0x03	; 3
    5a86:	49 f4       	brne	.+18     	; 0x5a9a <ADC_u16GetConversionReading+0x42>
	{
		/*select input channel to pin PA2*/
		CLR_BIT(ADMUX, MUX0);
    5a88:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
    5a8a:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
    5a8c:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5a8e:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5a90:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5a92:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5a94:	36 99       	sbic	0x06, 6	; 6
    5a96:	fe cf       	rjmp	.-4      	; 0x5a94 <ADC_u16GetConversionReading+0x3c>
    5a98:	39 c0       	rjmp	.+114    	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);
	}

	else if(copy_u8Channel == CHANNEL3)
    5a9a:	84 30       	cpi	r24, 0x04	; 4
    5a9c:	49 f4       	brne	.+18     	; 0x5ab0 <ADC_u16GetConversionReading+0x58>
	{

		/*select input channel to pin PA3*/
		SET_BIT(ADMUX, MUX0);
    5a9e:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
    5aa0:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
    5aa2:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5aa4:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5aa6:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5aa8:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5aaa:	36 99       	sbic	0x06, 6	; 6
    5aac:	fe cf       	rjmp	.-4      	; 0x5aaa <ADC_u16GetConversionReading+0x52>
    5aae:	2e c0       	rjmp	.+92     	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);

	}

	else if(copy_u8Channel == CHANNEL4)
    5ab0:	85 30       	cpi	r24, 0x05	; 5
    5ab2:	49 f4       	brne	.+18     	; 0x5ac6 <ADC_u16GetConversionReading+0x6e>
	{
		/*select input channel to pin PA4*/
		CLR_BIT(ADMUX, MUX0);
    5ab4:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
    5ab6:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
    5ab8:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5aba:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5abc:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5abe:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5ac0:	36 99       	sbic	0x06, 6	; 6
    5ac2:	fe cf       	rjmp	.-4      	; 0x5ac0 <ADC_u16GetConversionReading+0x68>
    5ac4:	23 c0       	rjmp	.+70     	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);
	}

	else if(copy_u8Channel == CHANNEL5)
    5ac6:	86 30       	cpi	r24, 0x06	; 6
    5ac8:	49 f4       	brne	.+18     	; 0x5adc <ADC_u16GetConversionReading+0x84>
	{

		/*select input channel to pin PA5*/
		SET_BIT(ADMUX, MUX0);
    5aca:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
    5acc:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
    5ace:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5ad0:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5ad2:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5ad4:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5ad6:	36 99       	sbic	0x06, 6	; 6
    5ad8:	fe cf       	rjmp	.-4      	; 0x5ad6 <ADC_u16GetConversionReading+0x7e>
    5ada:	18 c0       	rjmp	.+48     	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);
	}

	else if(copy_u8Channel == CHANNEL6)
    5adc:	87 30       	cpi	r24, 0x07	; 7
    5ade:	49 f4       	brne	.+18     	; 0x5af2 <ADC_u16GetConversionReading+0x9a>
	{

		/*select input channel to pin PA6*/
		CLR_BIT(ADMUX, MUX0);
    5ae0:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
    5ae2:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
    5ae4:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5ae6:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5ae8:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5aea:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5aec:	36 99       	sbic	0x06, 6	; 6
    5aee:	fe cf       	rjmp	.-4      	; 0x5aec <ADC_u16GetConversionReading+0x94>
    5af0:	0d c0       	rjmp	.+26     	; 0x5b0c <ADC_u16GetConversionReading+0xb4>
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
		ADC_data |= (ADCH << 8);

	}
	else if(copy_u8Channel == CHANNEL7)
    5af2:	88 30       	cpi	r24, 0x08	; 8
    5af4:	19 f0       	breq	.+6      	; 0x5afc <ADC_u16GetConversionReading+0xa4>
    5af6:	40 e0       	ldi	r20, 0x00	; 0
    5af8:	50 e0       	ldi	r21, 0x00	; 0
    5afa:	10 c0       	rjmp	.+32     	; 0x5b1c <ADC_u16GetConversionReading+0xc4>
	{

		/*select input channel to pin PA7*/
		SET_BIT(ADMUX, MUX0);
    5afc:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
    5afe:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
    5b00:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX, MUX3);
    5b02:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, MUX4);
    5b04:	3c 98       	cbi	0x07, 4	; 7

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    5b06:	36 9a       	sbi	0x06, 6	; 6
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    5b08:	36 99       	sbic	0x06, 6	; 6
    5b0a:	fe cf       	rjmp	.-4      	; 0x5b08 <ADC_u16GetConversionReading+0xb0>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    5b0c:	84 b1       	in	r24, 0x04	; 4
    5b0e:	48 2f       	mov	r20, r24
    5b10:	50 e0       	ldi	r21, 0x00	; 0
		ADC_data |= (ADCH << 8);
    5b12:	25 b1       	in	r18, 0x05	; 5
    5b14:	92 2f       	mov	r25, r18
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	48 2b       	or	r20, r24
    5b1a:	59 2b       	or	r21, r25
	}
	/*return ADC data*/
	return ADC_data;
}
    5b1c:	ca 01       	movw	r24, r20
    5b1e:	08 95       	ret

00005b20 <STEPPER_voidRotate>:

}

void STEPPER_voidRotate(u8 copy_u8Direction)
{
	switch(copy_u8Direction)
    5b20:	81 30       	cpi	r24, 0x01	; 1
    5b22:	19 f0       	breq	.+6      	; 0x5b2a <STEPPER_voidRotate+0xa>
    5b24:	83 30       	cpi	r24, 0x03	; 3
    5b26:	51 f5       	brne	.+84     	; 0x5b7c <STEPPER_voidRotate+0x5c>
    5b28:	15 c0       	rjmp	.+42     	; 0x5b54 <STEPPER_voidRotate+0x34>
	{
	case NORTH:
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_BLUE_PIN,   DIO_PIN_HIGH);
    5b2a:	83 e0       	ldi	r24, 0x03	; 3
    5b2c:	60 e0       	ldi	r22, 0x00	; 0
    5b2e:	41 e0       	ldi	r20, 0x01	; 1
    5b30:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_PINK_PIN,   DIO_PIN_LOW);
    5b34:	83 e0       	ldi	r24, 0x03	; 3
    5b36:	61 e0       	ldi	r22, 0x01	; 1
    5b38:	40 e0       	ldi	r20, 0x00	; 0
    5b3a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_YELLOW_PIN, DIO_PIN_LOW);
    5b3e:	83 e0       	ldi	r24, 0x03	; 3
    5b40:	62 e0       	ldi	r22, 0x02	; 2
    5b42:	40 e0       	ldi	r20, 0x00	; 0
    5b44:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_ORANGE_PIN, DIO_PIN_LOW);
    5b48:	83 e0       	ldi	r24, 0x03	; 3
    5b4a:	63 e0       	ldi	r22, 0x03	; 3
    5b4c:	40 e0       	ldi	r20, 0x00	; 0
    5b4e:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
    5b52:	08 95       	ret

	case EASTERN_NORTH:
		break;

	case EAST:
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_BLUE_PIN,   DIO_PIN_HIGH);
    5b54:	83 e0       	ldi	r24, 0x03	; 3
    5b56:	60 e0       	ldi	r22, 0x00	; 0
    5b58:	41 e0       	ldi	r20, 0x01	; 1
    5b5a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_PINK_PIN,   DIO_PIN_LOW);
    5b5e:	83 e0       	ldi	r24, 0x03	; 3
    5b60:	61 e0       	ldi	r22, 0x01	; 1
    5b62:	40 e0       	ldi	r20, 0x00	; 0
    5b64:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_YELLOW_PIN, DIO_PIN_LOW);
    5b68:	83 e0       	ldi	r24, 0x03	; 3
    5b6a:	62 e0       	ldi	r22, 0x02	; 2
    5b6c:	40 e0       	ldi	r20, 0x00	; 0
    5b6e:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT ,STEPPER_ORANGE_PIN, DIO_PIN_LOW);
    5b72:	83 e0       	ldi	r24, 0x03	; 3
    5b74:	63 e0       	ldi	r22, 0x03	; 3
    5b76:	40 e0       	ldi	r20, 0x00	; 0
    5b78:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
    5b7c:	08 95       	ret

00005b7e <STEPPER_voidInit>:
#include "avr/delay.h"

/*******************************Functions Defination*************************/\
void STEPPER_voidInit(void)
{
	DIO_u8SetPinDirection(STEPPER_PORT ,STEPPER_BLUE_PIN,   DIO_PIN_OUTPUT);
    5b7e:	83 e0       	ldi	r24, 0x03	; 3
    5b80:	60 e0       	ldi	r22, 0x00	; 0
    5b82:	41 e0       	ldi	r20, 0x01	; 1
    5b84:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(STEPPER_PORT ,STEPPER_PINK_PIN,   DIO_PIN_OUTPUT);
    5b88:	83 e0       	ldi	r24, 0x03	; 3
    5b8a:	61 e0       	ldi	r22, 0x01	; 1
    5b8c:	41 e0       	ldi	r20, 0x01	; 1
    5b8e:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(STEPPER_PORT ,STEPPER_YELLOW_PIN, DIO_PIN_OUTPUT);
    5b92:	83 e0       	ldi	r24, 0x03	; 3
    5b94:	62 e0       	ldi	r22, 0x02	; 2
    5b96:	41 e0       	ldi	r20, 0x01	; 1
    5b98:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(STEPPER_PORT ,STEPPER_ORANGE_PIN, DIO_PIN_OUTPUT);
    5b9c:	83 e0       	ldi	r24, 0x03	; 3
    5b9e:	63 e0       	ldi	r22, 0x03	; 3
    5ba0:	41 e0       	ldi	r20, 0x01	; 1
    5ba2:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>

}
    5ba6:	08 95       	ret

00005ba8 <LM35_u16GetTempReading>:
{
	u16 Local_u16TempValueDigital = 0;
	u16 Local_u16TempValueAnalog = 0;

	/*ADC conversion*/
	Local_u16TempValueDigital = ADC_u16GetConversionReading(u8_LMChannel);
    5ba8:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <ADC_u16GetConversionReading>
    5bac:	a0 e0       	ldi	r26, 0x00	; 0
    5bae:	b0 e0       	ldi	r27, 0x00	; 0
    5bb0:	bc 01       	movw	r22, r24
    5bb2:	cd 01       	movw	r24, r26
    5bb4:	0e 94 66 21 	call	0x42cc	; 0x42cc <__floatunsisf>
    5bb8:	20 e0       	ldi	r18, 0x00	; 0
    5bba:	30 e0       	ldi	r19, 0x00	; 0
    5bbc:	4a ef       	ldi	r20, 0xFA	; 250
    5bbe:	5e e3       	ldi	r21, 0x3E	; 62
    5bc0:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__mulsf3>
    5bc4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>

#endif


	return Local_u16TempValueAnalog;
}
    5bc8:	cb 01       	movw	r24, r22
    5bca:	08 95       	ret

00005bcc <LM35_voidInit>:

/***********FUNCTIONS DEFINITIONS*********/

void LM35_voidInit(void)
{
	ADC_voidInit();
    5bcc:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <ADC_voidInit>
}
    5bd0:	08 95       	ret

00005bd2 <LCD_voidSendData>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendData(u8 copy_u8Data)
{
    5bd2:	1f 93       	push	r17
    5bd4:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    5bd6:	83 e0       	ldi	r24, 0x03	; 3
    5bd8:	67 e0       	ldi	r22, 0x07	; 7
    5bda:	41 e0       	ldi	r20, 0x01	; 1
    5bdc:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    5be0:	83 e0       	ldi	r24, 0x03	; 3
    5be2:	66 e0       	ldi	r22, 0x06	; 6
    5be4:	40 e0       	ldi	r20, 0x00	; 0
    5be6:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Data);
    5bea:	82 e0       	ldi	r24, 0x02	; 2
    5bec:	61 2f       	mov	r22, r17
    5bee:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    5bf2:	83 e0       	ldi	r24, 0x03	; 3
    5bf4:	65 e0       	ldi	r22, 0x05	; 5
    5bf6:	41 e0       	ldi	r20, 0x01	; 1
    5bf8:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5bfc:	80 ea       	ldi	r24, 0xA0	; 160
    5bfe:	9f e0       	ldi	r25, 0x0F	; 15
    5c00:	01 97       	sbiw	r24, 0x01	; 1
    5c02:	f1 f7       	brne	.-4      	; 0x5c00 <LCD_voidSendData+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    5c04:	83 e0       	ldi	r24, 0x03	; 3
    5c06:	65 e0       	ldi	r22, 0x05	; 5
    5c08:	40 e0       	ldi	r20, 0x00	; 0
    5c0a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

}
    5c0e:	1f 91       	pop	r17
    5c10:	08 95       	ret

00005c12 <LCD_voidSendNumber>:
	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
}

void LCD_voidSendNumber(s64 copy_s32Number)
{
    5c12:	2f 92       	push	r2
    5c14:	3f 92       	push	r3
    5c16:	4f 92       	push	r4
    5c18:	5f 92       	push	r5
    5c1a:	6f 92       	push	r6
    5c1c:	7f 92       	push	r7
    5c1e:	8f 92       	push	r8
    5c20:	9f 92       	push	r9
    5c22:	af 92       	push	r10
    5c24:	bf 92       	push	r11
    5c26:	cf 92       	push	r12
    5c28:	df 92       	push	r13
    5c2a:	ef 92       	push	r14
    5c2c:	ff 92       	push	r15
    5c2e:	0f 93       	push	r16
    5c30:	1f 93       	push	r17
    5c32:	df 93       	push	r29
    5c34:	cf 93       	push	r28
    5c36:	cd b7       	in	r28, 0x3d	; 61
    5c38:	de b7       	in	r29, 0x3e	; 62
    5c3a:	29 97       	sbiw	r28, 0x09	; 9
    5c3c:	0f b6       	in	r0, 0x3f	; 63
    5c3e:	f8 94       	cli
    5c40:	de bf       	out	0x3e, r29	; 62
    5c42:	0f be       	out	0x3f, r0	; 63
    5c44:	cd bf       	out	0x3d, r28	; 61
    5c46:	2a 83       	std	Y+2, r18	; 0x02
    5c48:	3b 83       	std	Y+3, r19	; 0x03
    5c4a:	4c 83       	std	Y+4, r20	; 0x04
    5c4c:	5d 83       	std	Y+5, r21	; 0x05
    5c4e:	6e 83       	std	Y+6, r22	; 0x06
    5c50:	7f 83       	std	Y+7, r23	; 0x07
    5c52:	88 87       	std	Y+8, r24	; 0x08
    5c54:	99 87       	std	Y+9, r25	; 0x09
	u64 reversed = 1;
	if (copy_s32Number == 0)
    5c56:	82 2f       	mov	r24, r18
    5c58:	83 2b       	or	r24, r19
    5c5a:	84 2b       	or	r24, r20
    5c5c:	85 2b       	or	r24, r21
    5c5e:	86 2b       	or	r24, r22
    5c60:	87 2b       	or	r24, r23
    5c62:	98 85       	ldd	r25, Y+8	; 0x08
    5c64:	89 2b       	or	r24, r25
    5c66:	e9 85       	ldd	r30, Y+9	; 0x09
    5c68:	8e 2b       	or	r24, r30
    5c6a:	11 f4       	brne	.+4      	; 0x5c70 <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendData('0');
    5c6c:	80 e3       	ldi	r24, 0x30	; 48
    5c6e:	0e c0       	rjmp	.+28     	; 0x5c8c <LCD_voidSendNumber+0x7a>
	}
	else
	{
		if(copy_s32Number <0)
    5c70:	f9 85       	ldd	r31, Y+9	; 0x09
    5c72:	f7 fd       	sbrc	r31, 7
    5c74:	0a c0       	rjmp	.+20     	; 0x5c8a <LCD_voidSendNumber+0x78>
		{
			LCD_voidSendData('-');
    5c76:	22 24       	eor	r2, r2
    5c78:	23 94       	inc	r2
    5c7a:	33 24       	eor	r3, r3
    5c7c:	44 24       	eor	r4, r4
    5c7e:	55 24       	eor	r5, r5
    5c80:	66 24       	eor	r6, r6
    5c82:	77 24       	eor	r7, r7
    5c84:	88 24       	eor	r8, r8
    5c86:	99 24       	eor	r9, r9
    5c88:	04 c0       	rjmp	.+8      	; 0x5c92 <LCD_voidSendNumber+0x80>
    5c8a:	8d e2       	ldi	r24, 0x2D	; 45
    5c8c:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <LCD_voidSendData>
    5c90:	29 c1       	rjmp	.+594    	; 0x5ee4 <LCD_voidSendNumber+0x2d2>
		}
		else
		{
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
    5c92:	91 01       	movw	r18, r2
    5c94:	a2 01       	movw	r20, r4
    5c96:	b3 01       	movw	r22, r6
    5c98:	c4 01       	movw	r24, r8
    5c9a:	01 e0       	ldi	r16, 0x01	; 1
    5c9c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5ca0:	12 2f       	mov	r17, r18
    5ca2:	f3 2e       	mov	r15, r19
    5ca4:	e4 2e       	mov	r14, r20
    5ca6:	d5 2e       	mov	r13, r21
    5ca8:	c6 2e       	mov	r12, r22
    5caa:	b7 2e       	mov	r11, r23
    5cac:	a8 2e       	mov	r10, r24
    5cae:	89 2e       	mov	r8, r25
    5cb0:	02 e0       	ldi	r16, 0x02	; 2
    5cb2:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5cb6:	92 2e       	mov	r9, r18
    5cb8:	91 0e       	add	r9, r17
    5cba:	21 e0       	ldi	r18, 0x01	; 1
    5cbc:	91 16       	cp	r9, r17
    5cbe:	08 f0       	brcs	.+2      	; 0x5cc2 <LCD_voidSendNumber+0xb0>
    5cc0:	20 e0       	ldi	r18, 0x00	; 0
    5cc2:	3f 0d       	add	r19, r15
    5cc4:	e1 e0       	ldi	r30, 0x01	; 1
    5cc6:	3f 15       	cp	r19, r15
    5cc8:	08 f0       	brcs	.+2      	; 0x5ccc <LCD_voidSendNumber+0xba>
    5cca:	e0 e0       	ldi	r30, 0x00	; 0
    5ccc:	72 2e       	mov	r7, r18
    5cce:	73 0e       	add	r7, r19
    5cd0:	21 e0       	ldi	r18, 0x01	; 1
    5cd2:	73 16       	cp	r7, r19
    5cd4:	08 f0       	brcs	.+2      	; 0x5cd8 <LCD_voidSendNumber+0xc6>
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	e2 2b       	or	r30, r18
    5cda:	4e 0d       	add	r20, r14
    5cdc:	31 e0       	ldi	r19, 0x01	; 1
    5cde:	4e 15       	cp	r20, r14
    5ce0:	08 f0       	brcs	.+2      	; 0x5ce4 <LCD_voidSendNumber+0xd2>
    5ce2:	30 e0       	ldi	r19, 0x00	; 0
    5ce4:	6e 2e       	mov	r6, r30
    5ce6:	64 0e       	add	r6, r20
    5ce8:	21 e0       	ldi	r18, 0x01	; 1
    5cea:	64 16       	cp	r6, r20
    5cec:	08 f0       	brcs	.+2      	; 0x5cf0 <LCD_voidSendNumber+0xde>
    5cee:	20 e0       	ldi	r18, 0x00	; 0
    5cf0:	32 2b       	or	r19, r18
    5cf2:	5d 0d       	add	r21, r13
    5cf4:	41 e0       	ldi	r20, 0x01	; 1
    5cf6:	5d 15       	cp	r21, r13
    5cf8:	08 f0       	brcs	.+2      	; 0x5cfc <LCD_voidSendNumber+0xea>
    5cfa:	40 e0       	ldi	r20, 0x00	; 0
    5cfc:	53 2e       	mov	r5, r19
    5cfe:	55 0e       	add	r5, r21
    5d00:	21 e0       	ldi	r18, 0x01	; 1
    5d02:	55 16       	cp	r5, r21
    5d04:	08 f0       	brcs	.+2      	; 0x5d08 <LCD_voidSendNumber+0xf6>
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	42 2b       	or	r20, r18
    5d0a:	6c 0d       	add	r22, r12
    5d0c:	31 e0       	ldi	r19, 0x01	; 1
    5d0e:	6c 15       	cp	r22, r12
    5d10:	08 f0       	brcs	.+2      	; 0x5d14 <LCD_voidSendNumber+0x102>
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	44 2e       	mov	r4, r20
    5d16:	46 0e       	add	r4, r22
    5d18:	21 e0       	ldi	r18, 0x01	; 1
    5d1a:	46 16       	cp	r4, r22
    5d1c:	08 f0       	brcs	.+2      	; 0x5d20 <LCD_voidSendNumber+0x10e>
    5d1e:	20 e0       	ldi	r18, 0x00	; 0
    5d20:	32 2b       	or	r19, r18
    5d22:	7b 0d       	add	r23, r11
    5d24:	41 e0       	ldi	r20, 0x01	; 1
    5d26:	7b 15       	cp	r23, r11
    5d28:	08 f0       	brcs	.+2      	; 0x5d2c <LCD_voidSendNumber+0x11a>
    5d2a:	40 e0       	ldi	r20, 0x00	; 0
    5d2c:	33 2e       	mov	r3, r19
    5d2e:	37 0e       	add	r3, r23
    5d30:	21 e0       	ldi	r18, 0x01	; 1
    5d32:	37 16       	cp	r3, r23
    5d34:	08 f0       	brcs	.+2      	; 0x5d38 <LCD_voidSendNumber+0x126>
    5d36:	20 e0       	ldi	r18, 0x00	; 0
    5d38:	42 2b       	or	r20, r18
    5d3a:	8a 0d       	add	r24, r10
    5d3c:	31 e0       	ldi	r19, 0x01	; 1
    5d3e:	8a 15       	cp	r24, r10
    5d40:	08 f0       	brcs	.+2      	; 0x5d44 <LCD_voidSendNumber+0x132>
    5d42:	30 e0       	ldi	r19, 0x00	; 0
    5d44:	24 2e       	mov	r2, r20
    5d46:	28 0e       	add	r2, r24
    5d48:	21 e0       	ldi	r18, 0x01	; 1
    5d4a:	28 16       	cp	r2, r24
    5d4c:	08 f0       	brcs	.+2      	; 0x5d50 <LCD_voidSendNumber+0x13e>
    5d4e:	20 e0       	ldi	r18, 0x00	; 0
    5d50:	32 2b       	or	r19, r18
    5d52:	98 0d       	add	r25, r8
    5d54:	83 2f       	mov	r24, r19
    5d56:	89 0f       	add	r24, r25
    5d58:	89 83       	std	Y+1, r24	; 0x01
    5d5a:	2a 81       	ldd	r18, Y+2	; 0x02
    5d5c:	3b 81       	ldd	r19, Y+3	; 0x03
    5d5e:	4c 81       	ldd	r20, Y+4	; 0x04
    5d60:	5d 81       	ldd	r21, Y+5	; 0x05
    5d62:	6e 81       	ldd	r22, Y+6	; 0x06
    5d64:	7f 81       	ldd	r23, Y+7	; 0x07
    5d66:	88 85       	ldd	r24, Y+8	; 0x08
    5d68:	99 85       	ldd	r25, Y+9	; 0x09
    5d6a:	aa e0       	ldi	r26, 0x0A	; 10
    5d6c:	aa 2e       	mov	r10, r26
    5d6e:	bb 24       	eor	r11, r11
    5d70:	cc 24       	eor	r12, r12
    5d72:	dd 24       	eor	r13, r13
    5d74:	ee 24       	eor	r14, r14
    5d76:	ff 24       	eor	r15, r15
    5d78:	00 e0       	ldi	r16, 0x00	; 0
    5d7a:	10 e0       	ldi	r17, 0x00	; 0
    5d7c:	0e 94 1c 09 	call	0x1238	; 0x1238 <__moddi3>
    5d80:	12 2f       	mov	r17, r18
    5d82:	19 0d       	add	r17, r9
    5d84:	f1 e0       	ldi	r31, 0x01	; 1
    5d86:	12 17       	cp	r17, r18
    5d88:	08 f0       	brcs	.+2      	; 0x5d8c <LCD_voidSendNumber+0x17a>
    5d8a:	f0 e0       	ldi	r31, 0x00	; 0
    5d8c:	23 2f       	mov	r18, r19
    5d8e:	27 0d       	add	r18, r7
    5d90:	e1 e0       	ldi	r30, 0x01	; 1
    5d92:	23 17       	cp	r18, r19
    5d94:	08 f0       	brcs	.+2      	; 0x5d98 <LCD_voidSendNumber+0x186>
    5d96:	e0 e0       	ldi	r30, 0x00	; 0
    5d98:	bf 2f       	mov	r27, r31
    5d9a:	b2 0f       	add	r27, r18
    5d9c:	31 e0       	ldi	r19, 0x01	; 1
    5d9e:	b2 17       	cp	r27, r18
    5da0:	08 f0       	brcs	.+2      	; 0x5da4 <LCD_voidSendNumber+0x192>
    5da2:	30 e0       	ldi	r19, 0x00	; 0
    5da4:	e3 2b       	or	r30, r19
    5da6:	24 2f       	mov	r18, r20
    5da8:	26 0d       	add	r18, r6
    5daa:	f1 e0       	ldi	r31, 0x01	; 1
    5dac:	24 17       	cp	r18, r20
    5dae:	08 f0       	brcs	.+2      	; 0x5db2 <LCD_voidSendNumber+0x1a0>
    5db0:	f0 e0       	ldi	r31, 0x00	; 0
    5db2:	ae 2f       	mov	r26, r30
    5db4:	a2 0f       	add	r26, r18
    5db6:	31 e0       	ldi	r19, 0x01	; 1
    5db8:	a2 17       	cp	r26, r18
    5dba:	08 f0       	brcs	.+2      	; 0x5dbe <LCD_voidSendNumber+0x1ac>
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	f3 2b       	or	r31, r19
    5dc0:	25 2f       	mov	r18, r21
    5dc2:	25 0d       	add	r18, r5
    5dc4:	41 e0       	ldi	r20, 0x01	; 1
    5dc6:	25 17       	cp	r18, r21
    5dc8:	08 f0       	brcs	.+2      	; 0x5dcc <LCD_voidSendNumber+0x1ba>
    5dca:	40 e0       	ldi	r20, 0x00	; 0
    5dcc:	0f 2f       	mov	r16, r31
    5dce:	02 0f       	add	r16, r18
    5dd0:	31 e0       	ldi	r19, 0x01	; 1
    5dd2:	02 17       	cp	r16, r18
    5dd4:	08 f0       	brcs	.+2      	; 0x5dd8 <LCD_voidSendNumber+0x1c6>
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	43 2b       	or	r20, r19
    5dda:	26 2f       	mov	r18, r22
    5ddc:	24 0d       	add	r18, r4
    5dde:	51 e0       	ldi	r21, 0x01	; 1
    5de0:	26 17       	cp	r18, r22
    5de2:	08 f0       	brcs	.+2      	; 0x5de6 <LCD_voidSendNumber+0x1d4>
    5de4:	50 e0       	ldi	r21, 0x00	; 0
    5de6:	64 2f       	mov	r22, r20
    5de8:	62 0f       	add	r22, r18
    5dea:	31 e0       	ldi	r19, 0x01	; 1
    5dec:	62 17       	cp	r22, r18
    5dee:	08 f0       	brcs	.+2      	; 0x5df2 <LCD_voidSendNumber+0x1e0>
    5df0:	30 e0       	ldi	r19, 0x00	; 0
    5df2:	53 2b       	or	r21, r19
    5df4:	27 2f       	mov	r18, r23
    5df6:	23 0d       	add	r18, r3
    5df8:	41 e0       	ldi	r20, 0x01	; 1
    5dfa:	27 17       	cp	r18, r23
    5dfc:	08 f0       	brcs	.+2      	; 0x5e00 <LCD_voidSendNumber+0x1ee>
    5dfe:	40 e0       	ldi	r20, 0x00	; 0
    5e00:	52 0f       	add	r21, r18
    5e02:	31 e0       	ldi	r19, 0x01	; 1
    5e04:	52 17       	cp	r21, r18
    5e06:	08 f0       	brcs	.+2      	; 0x5e0a <LCD_voidSendNumber+0x1f8>
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	43 2b       	or	r20, r19
    5e0c:	28 2f       	mov	r18, r24
    5e0e:	22 0d       	add	r18, r2
    5e10:	31 e0       	ldi	r19, 0x01	; 1
    5e12:	28 17       	cp	r18, r24
    5e14:	08 f0       	brcs	.+2      	; 0x5e18 <LCD_voidSendNumber+0x206>
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	42 0f       	add	r20, r18
    5e1a:	81 e0       	ldi	r24, 0x01	; 1
    5e1c:	42 17       	cp	r20, r18
    5e1e:	08 f0       	brcs	.+2      	; 0x5e22 <LCD_voidSendNumber+0x210>
    5e20:	80 e0       	ldi	r24, 0x00	; 0
    5e22:	38 2b       	or	r19, r24
    5e24:	e9 81       	ldd	r30, Y+1	; 0x01
    5e26:	e9 0f       	add	r30, r25
    5e28:	21 2e       	mov	r2, r17
    5e2a:	3b 2e       	mov	r3, r27
    5e2c:	4a 2e       	mov	r4, r26
    5e2e:	50 2e       	mov	r5, r16
    5e30:	66 2e       	mov	r6, r22
    5e32:	75 2e       	mov	r7, r21
    5e34:	84 2e       	mov	r8, r20
    5e36:	9e 2e       	mov	r9, r30
    5e38:	93 0e       	add	r9, r19
				copy_s32Number/=10;
    5e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    5e3c:	3b 81       	ldd	r19, Y+3	; 0x03
    5e3e:	4c 81       	ldd	r20, Y+4	; 0x04
    5e40:	5d 81       	ldd	r21, Y+5	; 0x05
    5e42:	6e 81       	ldd	r22, Y+6	; 0x06
    5e44:	7f 81       	ldd	r23, Y+7	; 0x07
    5e46:	88 85       	ldd	r24, Y+8	; 0x08
    5e48:	99 85       	ldd	r25, Y+9	; 0x09
    5e4a:	fa e0       	ldi	r31, 0x0A	; 10
    5e4c:	af 2e       	mov	r10, r31
    5e4e:	bb 24       	eor	r11, r11
    5e50:	cc 24       	eor	r12, r12
    5e52:	dd 24       	eor	r13, r13
    5e54:	ee 24       	eor	r14, r14
    5e56:	ff 24       	eor	r15, r15
    5e58:	00 e0       	ldi	r16, 0x00	; 0
    5e5a:	10 e0       	ldi	r17, 0x00	; 0
    5e5c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__divdi3>
    5e60:	2a 83       	std	Y+2, r18	; 0x02
    5e62:	3b 83       	std	Y+3, r19	; 0x03
    5e64:	4c 83       	std	Y+4, r20	; 0x04
    5e66:	5d 83       	std	Y+5, r21	; 0x05
    5e68:	6e 83       	std	Y+6, r22	; 0x06
    5e6a:	7f 83       	std	Y+7, r23	; 0x07
    5e6c:	88 87       	std	Y+8, r24	; 0x08
    5e6e:	99 87       	std	Y+9, r25	; 0x09
			LCD_voidSendData('-');
			copy_s32Number *=-1;
		}
		else
		{
			while(copy_s32Number!= 0)
    5e70:	82 2f       	mov	r24, r18
    5e72:	83 2b       	or	r24, r19
    5e74:	84 2b       	or	r24, r20
    5e76:	85 2b       	or	r24, r21
    5e78:	86 2b       	or	r24, r22
    5e7a:	87 2b       	or	r24, r23
    5e7c:	f8 85       	ldd	r31, Y+8	; 0x08
    5e7e:	8f 2b       	or	r24, r31
    5e80:	89 2b       	or	r24, r25
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <LCD_voidSendNumber+0x274>
    5e84:	06 cf       	rjmp	.-500    	; 0x5c92 <LCD_voidSendNumber+0x80>
    5e86:	1d c0       	rjmp	.+58     	; 0x5ec2 <LCD_voidSendNumber+0x2b0>
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
			{
				LCD_voidSendData(reversed%10 +'0');
    5e88:	91 01       	movw	r18, r2
    5e8a:	a2 01       	movw	r20, r4
    5e8c:	b3 01       	movw	r22, r6
    5e8e:	c4 01       	movw	r24, r8
    5e90:	ea e0       	ldi	r30, 0x0A	; 10
    5e92:	ae 2e       	mov	r10, r30
    5e94:	bb 24       	eor	r11, r11
    5e96:	cc 24       	eor	r12, r12
    5e98:	dd 24       	eor	r13, r13
    5e9a:	ee 24       	eor	r14, r14
    5e9c:	ff 24       	eor	r15, r15
    5e9e:	00 e0       	ldi	r16, 0x00	; 0
    5ea0:	10 e0       	ldi	r17, 0x00	; 0
    5ea2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__umoddi3>
    5ea6:	82 2f       	mov	r24, r18
    5ea8:	80 5d       	subi	r24, 0xD0	; 208
    5eaa:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <LCD_voidSendData>
				reversed/=10;
    5eae:	91 01       	movw	r18, r2
    5eb0:	a2 01       	movw	r20, r4
    5eb2:	b3 01       	movw	r22, r6
    5eb4:	c4 01       	movw	r24, r8
    5eb6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivdi3>
    5eba:	19 01       	movw	r2, r18
    5ebc:	2a 01       	movw	r4, r20
    5ebe:	3b 01       	movw	r6, r22
    5ec0:	4c 01       	movw	r8, r24
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	28 16       	cp	r2, r24
    5ec6:	01 f7       	brne	.-64     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5ec8:	33 20       	and	r3, r3
    5eca:	f1 f6       	brne	.-68     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5ecc:	44 20       	and	r4, r4
    5ece:	e1 f6       	brne	.-72     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5ed0:	55 20       	and	r5, r5
    5ed2:	d1 f6       	brne	.-76     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5ed4:	66 20       	and	r6, r6
    5ed6:	c1 f6       	brne	.-80     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5ed8:	77 20       	and	r7, r7
    5eda:	b1 f6       	brne	.-84     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5edc:	88 20       	and	r8, r8
    5ede:	a1 f6       	brne	.-88     	; 0x5e88 <LCD_voidSendNumber+0x276>
    5ee0:	99 20       	and	r9, r9
    5ee2:	91 f6       	brne	.-92     	; 0x5e88 <LCD_voidSendNumber+0x276>
				LCD_voidSendData(reversed%10 +'0');
				reversed/=10;
			}
		}
	}
}
    5ee4:	29 96       	adiw	r28, 0x09	; 9
    5ee6:	0f b6       	in	r0, 0x3f	; 63
    5ee8:	f8 94       	cli
    5eea:	de bf       	out	0x3e, r29	; 62
    5eec:	0f be       	out	0x3f, r0	; 63
    5eee:	cd bf       	out	0x3d, r28	; 61
    5ef0:	cf 91       	pop	r28
    5ef2:	df 91       	pop	r29
    5ef4:	1f 91       	pop	r17
    5ef6:	0f 91       	pop	r16
    5ef8:	ff 90       	pop	r15
    5efa:	ef 90       	pop	r14
    5efc:	df 90       	pop	r13
    5efe:	cf 90       	pop	r12
    5f00:	bf 90       	pop	r11
    5f02:	af 90       	pop	r10
    5f04:	9f 90       	pop	r9
    5f06:	8f 90       	pop	r8
    5f08:	7f 90       	pop	r7
    5f0a:	6f 90       	pop	r6
    5f0c:	5f 90       	pop	r5
    5f0e:	4f 90       	pop	r4
    5f10:	3f 90       	pop	r3
    5f12:	2f 90       	pop	r2
    5f14:	08 95       	ret

00005f16 <LCD_voidSendString>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendString(const u8* copy_pu8String)
{
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	ec 01       	movw	r28, r24
    5f1e:	10 e0       	ldi	r17, 0x00	; 0
    5f20:	03 c0       	rjmp	.+6      	; 0x5f28 <LCD_voidSendString+0x12>
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
    5f22:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <LCD_voidSendData>

}

void LCD_voidSendString(const u8* copy_pu8String)
{
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
    5f26:	1f 5f       	subi	r17, 0xFF	; 255
    5f28:	fe 01       	movw	r30, r28
    5f2a:	e1 0f       	add	r30, r17
    5f2c:	f1 1d       	adc	r31, r1
    5f2e:	80 81       	ld	r24, Z
    5f30:	88 23       	and	r24, r24
    5f32:	b9 f7       	brne	.-18     	; 0x5f22 <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
	}
}
    5f34:	df 91       	pop	r29
    5f36:	cf 91       	pop	r28
    5f38:	1f 91       	pop	r17
    5f3a:	08 95       	ret

00005f3c <LCD_voidSendCommand>:




void LCD_voidSendCommand(u8 copy_u8Command)
{
    5f3c:	1f 93       	push	r17
    5f3e:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    5f40:	83 e0       	ldi	r24, 0x03	; 3
    5f42:	67 e0       	ldi	r22, 0x07	; 7
    5f44:	40 e0       	ldi	r20, 0x00	; 0
    5f46:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    5f4a:	83 e0       	ldi	r24, 0x03	; 3
    5f4c:	66 e0       	ldi	r22, 0x06	; 6
    5f4e:	40 e0       	ldi	r20, 0x00	; 0
    5f50:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Command);
    5f54:	82 e0       	ldi	r24, 0x02	; 2
    5f56:	61 2f       	mov	r22, r17
    5f58:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    5f5c:	83 e0       	ldi	r24, 0x03	; 3
    5f5e:	65 e0       	ldi	r22, 0x05	; 5
    5f60:	41 e0       	ldi	r20, 0x01	; 1
    5f62:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
    5f66:	80 ea       	ldi	r24, 0xA0	; 160
    5f68:	9f e0       	ldi	r25, 0x0F	; 15
    5f6a:	01 97       	sbiw	r24, 0x01	; 1
    5f6c:	f1 f7       	brne	.-4      	; 0x5f6a <LCD_voidSendCommand+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    5f6e:	83 e0       	ldi	r24, 0x03	; 3
    5f70:	65 e0       	ldi	r22, 0x05	; 5
    5f72:	40 e0       	ldi	r20, 0x00	; 0
    5f74:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

}
    5f78:	1f 91       	pop	r17
    5f7a:	08 95       	ret

00005f7c <LCD_voidClearScreen>:
	LCD_voidSendData(copy_u8PatternNumber);
}

void LCD_voidClearScreen(void)
{
	LCD_voidSendCommand(0x01);
    5f7c:	81 e0       	ldi	r24, 0x01	; 1
    5f7e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LCD_voidSendCommand>
}
    5f82:	08 95       	ret

00005f84 <LCD_voidSetPosition>:


void LCD_voidSetPosition(u8 copy_u8XPosition,u8 copy_u8YPosition)
{
	u8 Local_u8Address = 0;
	if(copy_u8XPosition == LCD_ROW0)
    5f84:	88 23       	and	r24, r24
    5f86:	29 f0       	breq	.+10     	; 0x5f92 <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition;
	}
	else if(copy_u8XPosition == LCD_ROW1)
    5f88:	81 30       	cpi	r24, 0x01	; 1
    5f8a:	11 f0       	breq	.+4      	; 0x5f90 <LCD_voidSetPosition+0xc>
    5f8c:	60 e0       	ldi	r22, 0x00	; 0
    5f8e:	01 c0       	rjmp	.+2      	; 0x5f92 <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition + DDRAM_OFFSET;
    5f90:	60 5c       	subi	r22, 0xC0	; 192
	{

	}

	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
    5f92:	86 2f       	mov	r24, r22
    5f94:	80 68       	ori	r24, 0x80	; 128
    5f96:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LCD_voidSendCommand>
}
    5f9a:	08 95       	ret

00005f9c <LCD_voidSendCustomCharacter>:
		}
	}
}

void LCD_voidSendCustomCharacter(u8* copy_pu8CharacterArray,u8 copy_u8PatternNumber,u8 copy_u8XPosition,u8 copy_u8YPosition)
{
    5f9c:	df 92       	push	r13
    5f9e:	ef 92       	push	r14
    5fa0:	ff 92       	push	r15
    5fa2:	0f 93       	push	r16
    5fa4:	1f 93       	push	r17
    5fa6:	cf 93       	push	r28
    5fa8:	df 93       	push	r29
    5faa:	8c 01       	movw	r16, r24
    5fac:	f6 2e       	mov	r15, r22
    5fae:	e4 2e       	mov	r14, r20
    5fb0:	d2 2e       	mov	r13, r18
	u8 Local_u8CGRAMAddress = 0 ,Local_u8LoopCounter;

	/*Calculating CGRAM Address*/
	Local_u8CGRAMAddress = copy_u8PatternNumber*8;
    5fb2:	86 2f       	mov	r24, r22
    5fb4:	88 0f       	add	r24, r24
    5fb6:	88 0f       	add	r24, r24
    5fb8:	88 0f       	add	r24, r24

	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    5fba:	80 64       	ori	r24, 0x40	; 64
    5fbc:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LCD_voidSendCommand>
    5fc0:	c0 e0       	ldi	r28, 0x00	; 0
    5fc2:	d0 e0       	ldi	r29, 0x00	; 0

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
    5fc4:	f8 01       	movw	r30, r16
    5fc6:	ec 0f       	add	r30, r28
    5fc8:	fd 1f       	adc	r31, r29
    5fca:	80 81       	ld	r24, Z
    5fcc:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <LCD_voidSendData>
    5fd0:	21 96       	adiw	r28, 0x01	; 1
	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
    5fd2:	c8 30       	cpi	r28, 0x08	; 8
    5fd4:	d1 05       	cpc	r29, r1
    5fd6:	b1 f7       	brne	.-20     	; 0x5fc4 <LCD_voidSendCustomCharacter+0x28>
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	LCD_voidSetPosition( copy_u8XPosition,copy_u8YPosition);
    5fd8:	8e 2d       	mov	r24, r14
    5fda:	6d 2d       	mov	r22, r13
    5fdc:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <LCD_voidSetPosition>

	/*Displaying the pattern from CGRAM*/
	LCD_voidSendData(copy_u8PatternNumber);
    5fe0:	8f 2d       	mov	r24, r15
    5fe2:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <LCD_voidSendData>
}
    5fe6:	df 91       	pop	r29
    5fe8:	cf 91       	pop	r28
    5fea:	1f 91       	pop	r17
    5fec:	0f 91       	pop	r16
    5fee:	ff 90       	pop	r15
    5ff0:	ef 90       	pop	r14
    5ff2:	df 90       	pop	r13
    5ff4:	08 95       	ret

00005ff6 <LCD_voidInit>:

/********************Functions Definitions*****************/
void LCD_voidInit(void)
{
	/************Set the control pins to be output**********/
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    5ff6:	83 e0       	ldi	r24, 0x03	; 3
    5ff8:	65 e0       	ldi	r22, 0x05	; 5
    5ffa:	41 e0       	ldi	r20, 0x01	; 1
    5ffc:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    6000:	83 e0       	ldi	r24, 0x03	; 3
    6002:	66 e0       	ldi	r22, 0x06	; 6
    6004:	41 e0       	ldi	r20, 0x01	; 1
    6006:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    600a:	83 e0       	ldi	r24, 0x03	; 3
    600c:	67 e0       	ldi	r22, 0x07	; 7
    600e:	41 e0       	ldi	r20, 0x01	; 1
    6010:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
    6014:	80 e9       	ldi	r24, 0x90	; 144
    6016:	91 e0       	ldi	r25, 0x01	; 1
    6018:	28 ec       	ldi	r18, 0xC8	; 200
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	f9 01       	movw	r30, r18
    601e:	31 97       	sbiw	r30, 0x01	; 1
    6020:	f1 f7       	brne	.-4      	; 0x601e <LCD_voidInit+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6022:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6024:	d9 f7       	brne	.-10     	; 0x601c <LCD_voidInit+0x26>

	/*Waiting for more than 30ms*/
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    6026:	82 e0       	ldi	r24, 0x02	; 2
    6028:	6f ef       	ldi	r22, 0xFF	; 255
    602a:	0e 94 ba 2a 	call	0x5574	; 0x5574 <DIO_u8SetPortDirection>

	/*Send the function set command: N->1 (2 lines) ,F-> 0 (5*7 char font)*/
	LCD_voidSendCommand(0x38);
    602e:	88 e3       	ldi	r24, 0x38	; 56
    6030:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LCD_voidSendCommand>

	/*delay 39 us*/
//	_delay_us(40);

	/*Display ON/OFF control*/
	LCD_voidSendCommand(0x0C);
    6034:	8c e0       	ldi	r24, 0x0C	; 12
    6036:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LCD_voidSendCommand>

	/*delay 39 us*/
	//_delay_us(40);

	/*Display clear control*/
	LCD_voidSendCommand(0x01);
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);

#else
#error "Wrong LCD_MODE Configuration parameter"
#endif
}
    6040:	08 95       	ret

00006042 <KEYPAD_u8GetPressed>:



}
u8 KEYPAD_u8GetPressed(void)
{
    6042:	8f 92       	push	r8
    6044:	9f 92       	push	r9
    6046:	bf 92       	push	r11
    6048:	cf 92       	push	r12
    604a:	df 92       	push	r13
    604c:	ef 92       	push	r14
    604e:	ff 92       	push	r15
    6050:	0f 93       	push	r16
    6052:	1f 93       	push	r17
    6054:	df 93       	push	r29
    6056:	cf 93       	push	r28
    6058:	0f 92       	push	r0
    605a:	cd b7       	in	r28, 0x3d	; 61
    605c:	de b7       	in	r29, 0x3e	; 62
    605e:	0f ef       	ldi	r16, 0xFF	; 255
    6060:	ee 24       	eor	r14, r14
    6062:	ff 24       	eor	r15, r15
	for(Local_u8Col=KPD_COL_INT ; Local_u8Col< KPD_COL_END+1 ; Local_u8Col++)
	{
		DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_LOW);
		for(Local_u8Row=KPD_ROW_INT ; Local_u8Row<KPD_ROW_END+1 ; Local_u8Row++)
		{
			DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    6064:	6e 01       	movw	r12, r28
    6066:	08 94       	sec
    6068:	c1 1c       	adc	r12, r1
    606a:	d1 1c       	adc	r13, r1
    606c:	98 ec       	ldi	r25, 0xC8	; 200
    606e:	89 2e       	mov	r8, r25
    6070:	91 2c       	mov	r9, r1



}
u8 KEYPAD_u8GetPressed(void)
{
    6072:	be 2c       	mov	r11, r14
	u8 Local_u8GetPressed;
	u8 Local_u8Col;
	u8 Local_u8Row;
	for(Local_u8Col=KPD_COL_INT ; Local_u8Col< KPD_COL_END+1 ; Local_u8Col++)
	{
		DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_LOW);
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	6e 2d       	mov	r22, r14
    6078:	40 e0       	ldi	r20, 0x00	; 0
    607a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		for(Local_u8Row=KPD_ROW_INT ; Local_u8Row<KPD_ROW_END+1 ; Local_u8Row++)
		{
			DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    607e:	80 e0       	ldi	r24, 0x00	; 0
    6080:	64 e0       	ldi	r22, 0x04	; 4
    6082:	a6 01       	movw	r20, r12
    6084:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
			if(Local_u8GetPressed==0)
    6088:	89 81       	ldd	r24, Y+1	; 0x01
    608a:	88 23       	and	r24, r24
    608c:	11 f4       	brne	.+4      	; 0x6092 <KEYPAD_u8GetPressed+0x50>
    608e:	14 e0       	ldi	r17, 0x04	; 4
    6090:	1d c0       	rjmp	.+58     	; 0x60cc <KEYPAD_u8GetPressed+0x8a>
	for(Local_u8Col=KPD_COL_INT ; Local_u8Col< KPD_COL_END+1 ; Local_u8Col++)
	{
		DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_LOW);
		for(Local_u8Row=KPD_ROW_INT ; Local_u8Row<KPD_ROW_END+1 ; Local_u8Row++)
		{
			DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    6092:	80 e0       	ldi	r24, 0x00	; 0
    6094:	65 e0       	ldi	r22, 0x05	; 5
    6096:	a6 01       	movw	r20, r12
    6098:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
			if(Local_u8GetPressed==0)
    609c:	89 81       	ldd	r24, Y+1	; 0x01
    609e:	88 23       	and	r24, r24
    60a0:	11 f4       	brne	.+4      	; 0x60a6 <KEYPAD_u8GetPressed+0x64>
    60a2:	15 e0       	ldi	r17, 0x05	; 5
    60a4:	13 c0       	rjmp	.+38     	; 0x60cc <KEYPAD_u8GetPressed+0x8a>
	for(Local_u8Col=KPD_COL_INT ; Local_u8Col< KPD_COL_END+1 ; Local_u8Col++)
	{
		DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_LOW);
		for(Local_u8Row=KPD_ROW_INT ; Local_u8Row<KPD_ROW_END+1 ; Local_u8Row++)
		{
			DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    60a6:	80 e0       	ldi	r24, 0x00	; 0
    60a8:	66 e0       	ldi	r22, 0x06	; 6
    60aa:	a6 01       	movw	r20, r12
    60ac:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
			if(Local_u8GetPressed==0)
    60b0:	89 81       	ldd	r24, Y+1	; 0x01
    60b2:	88 23       	and	r24, r24
    60b4:	11 f4       	brne	.+4      	; 0x60ba <KEYPAD_u8GetPressed+0x78>
    60b6:	16 e0       	ldi	r17, 0x06	; 6
    60b8:	09 c0       	rjmp	.+18     	; 0x60cc <KEYPAD_u8GetPressed+0x8a>
	for(Local_u8Col=KPD_COL_INT ; Local_u8Col< KPD_COL_END+1 ; Local_u8Col++)
	{
		DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_LOW);
		for(Local_u8Row=KPD_ROW_INT ; Local_u8Row<KPD_ROW_END+1 ; Local_u8Row++)
		{
			DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    60ba:	80 e0       	ldi	r24, 0x00	; 0
    60bc:	67 e0       	ldi	r22, 0x07	; 7
    60be:	a6 01       	movw	r20, r12
    60c0:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
			if(Local_u8GetPressed==0)
    60c4:	89 81       	ldd	r24, Y+1	; 0x01
    60c6:	88 23       	and	r24, r24
    60c8:	21 f5       	brne	.+72     	; 0x6112 <KEYPAD_u8GetPressed+0xd0>
    60ca:	17 e0       	ldi	r17, 0x07	; 7
    60cc:	84 ef       	ldi	r24, 0xF4	; 244
    60ce:	91 e0       	ldi	r25, 0x01	; 1
    60d0:	f4 01       	movw	r30, r8
    60d2:	31 97       	sbiw	r30, 0x01	; 1
    60d4:	f1 f7       	brne	.-4      	; 0x60d2 <KEYPAD_u8GetPressed+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60d8:	d9 f7       	brne	.-10     	; 0x60d0 <KEYPAD_u8GetPressed+0x8e>
			{
				_delay_ms(50);
				DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	61 2f       	mov	r22, r17
    60de:	a6 01       	movw	r20, r12
    60e0:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
				if(Local_u8GetPressed==0)
    60e4:	89 81       	ldd	r24, Y+1	; 0x01
    60e6:	88 23       	and	r24, r24
    60e8:	61 f4       	brne	.+24     	; 0x6102 <KEYPAD_u8GetPressed+0xc0>
				{
					Local_u8ReturnData= KPD_u8Buttoms[Local_u8Row-KPD_ROW_INT][Local_u8Col-KPD_COL_INT];
    60ea:	e1 2f       	mov	r30, r17
    60ec:	f0 e0       	ldi	r31, 0x00	; 0
    60ee:	34 97       	sbiw	r30, 0x04	; 4
    60f0:	ee 0f       	add	r30, r30
    60f2:	ff 1f       	adc	r31, r31
    60f4:	ee 0f       	add	r30, r30
    60f6:	ff 1f       	adc	r31, r31
    60f8:	ee 0d       	add	r30, r14
    60fa:	ff 1d       	adc	r31, r15
    60fc:	e3 59       	subi	r30, 0x93	; 147
    60fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6100:	00 81       	ld	r16, Z
				}
				DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
				while(DIO_PIN_LOW == Local_u8GetPressed)
				{
					DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
    6102:	80 e0       	ldi	r24, 0x00	; 0
    6104:	61 2f       	mov	r22, r17
    6106:	a6 01       	movw	r20, r12
    6108:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
				if(Local_u8GetPressed==0)
				{
					Local_u8ReturnData= KPD_u8Buttoms[Local_u8Row-KPD_ROW_INT][Local_u8Col-KPD_COL_INT];
				}
				DIO_u8GetPinValue(KPD_PORT, Local_u8Row,&Local_u8GetPressed);
				while(DIO_PIN_LOW == Local_u8GetPressed)
    610c:	89 81       	ldd	r24, Y+1	; 0x01
    610e:	88 23       	and	r24, r24
    6110:	c1 f3       	breq	.-16     	; 0x6102 <KEYPAD_u8GetPressed+0xc0>
				break;
			}


	}
	DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_HIGH);
    6112:	80 e0       	ldi	r24, 0x00	; 0
    6114:	6b 2d       	mov	r22, r11
    6116:	41 e0       	ldi	r20, 0x01	; 1
    6118:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
    611c:	08 94       	sec
    611e:	e1 1c       	adc	r14, r1
    6120:	f1 1c       	adc	r15, r1
{
	u8 Local_u8ReturnData=NOTPRESSED;
	u8 Local_u8GetPressed;
	u8 Local_u8Col;
	u8 Local_u8Row;
	for(Local_u8Col=KPD_COL_INT ; Local_u8Col< KPD_COL_END+1 ; Local_u8Col++)
    6122:	84 e0       	ldi	r24, 0x04	; 4
    6124:	e8 16       	cp	r14, r24
    6126:	f1 04       	cpc	r15, r1
    6128:	09 f0       	breq	.+2      	; 0x612c <KEYPAD_u8GetPressed+0xea>
    612a:	a3 cf       	rjmp	.-186    	; 0x6072 <KEYPAD_u8GetPressed+0x30>
	}
	DIO_u8SetPinValue(KPD_PORT, Local_u8Col,DIO_PIN_HIGH);

}
return Local_u8ReturnData;
}
    612c:	80 2f       	mov	r24, r16
    612e:	0f 90       	pop	r0
    6130:	cf 91       	pop	r28
    6132:	df 91       	pop	r29
    6134:	1f 91       	pop	r17
    6136:	0f 91       	pop	r16
    6138:	ff 90       	pop	r15
    613a:	ef 90       	pop	r14
    613c:	df 90       	pop	r13
    613e:	cf 90       	pop	r12
    6140:	bf 90       	pop	r11
    6142:	9f 90       	pop	r9
    6144:	8f 90       	pop	r8
    6146:	08 95       	ret

00006148 <KEYPAD_Init>:


void KEYPAD_Init(void)
{
	/***Connect PUll Up For Rowws Pins*/
	DIO_u8GetConnectPullUp(KPD_PORT,KPD_R0,DIO_PIN_HIGH);
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	64 e0       	ldi	r22, 0x04	; 4
    614c:	41 e0       	ldi	r20, 0x01	; 1
    614e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <DIO_u8GetConnectPullUp>
	DIO_u8GetConnectPullUp(KPD_PORT,KPD_R1,DIO_PIN_HIGH);
    6152:	80 e0       	ldi	r24, 0x00	; 0
    6154:	65 e0       	ldi	r22, 0x05	; 5
    6156:	41 e0       	ldi	r20, 0x01	; 1
    6158:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <DIO_u8GetConnectPullUp>
	DIO_u8GetConnectPullUp(KPD_PORT,KPD_R2,DIO_PIN_HIGH);
    615c:	80 e0       	ldi	r24, 0x00	; 0
    615e:	66 e0       	ldi	r22, 0x06	; 6
    6160:	41 e0       	ldi	r20, 0x01	; 1
    6162:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <DIO_u8GetConnectPullUp>
	DIO_u8GetConnectPullUp(KPD_PORT,KPD_R3,DIO_PIN_HIGH);
    6166:	80 e0       	ldi	r24, 0x00	; 0
    6168:	67 e0       	ldi	r22, 0x07	; 7
    616a:	41 e0       	ldi	r20, 0x01	; 1
    616c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <DIO_u8GetConnectPullUp>

	/*Connect the colums pins as output high*/
	DIO_u8SetPinDirection(KPD_PORT,KPD_C0,DIO_PIN_OUTPUT);
    6170:	80 e0       	ldi	r24, 0x00	; 0
    6172:	60 e0       	ldi	r22, 0x00	; 0
    6174:	41 e0       	ldi	r20, 0x01	; 1
    6176:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C1,DIO_PIN_OUTPUT);
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	61 e0       	ldi	r22, 0x01	; 1
    617e:	41 e0       	ldi	r20, 0x01	; 1
    6180:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C2,DIO_PIN_OUTPUT);
    6184:	80 e0       	ldi	r24, 0x00	; 0
    6186:	62 e0       	ldi	r22, 0x02	; 2
    6188:	41 e0       	ldi	r20, 0x01	; 1
    618a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C3,DIO_PIN_OUTPUT);
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	63 e0       	ldi	r22, 0x03	; 3
    6192:	41 e0       	ldi	r20, 0x01	; 1
    6194:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>


	DIO_u8SetPinValue(KPD_PORT,KPD_C0,DIO_PIN_HIGH);
    6198:	80 e0       	ldi	r24, 0x00	; 0
    619a:	60 e0       	ldi	r22, 0x00	; 0
    619c:	41 e0       	ldi	r20, 0x01	; 1
    619e:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C1,DIO_PIN_HIGH);
    61a2:	80 e0       	ldi	r24, 0x00	; 0
    61a4:	61 e0       	ldi	r22, 0x01	; 1
    61a6:	41 e0       	ldi	r20, 0x01	; 1
    61a8:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C2,DIO_PIN_HIGH);
    61ac:	80 e0       	ldi	r24, 0x00	; 0
    61ae:	62 e0       	ldi	r22, 0x02	; 2
    61b0:	41 e0       	ldi	r20, 0x01	; 1
    61b2:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C3,DIO_PIN_HIGH);
    61b6:	80 e0       	ldi	r24, 0x00	; 0
    61b8:	63 e0       	ldi	r22, 0x03	; 3
    61ba:	41 e0       	ldi	r20, 0x01	; 1
    61bc:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>



}
    61c0:	08 95       	ret

000061c2 <MOTOR_voidStop>:
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_LOW);

}
void MOTOR_voidStop(void)
{
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_LOW);
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	67 e0       	ldi	r22, 0x07	; 7
    61c6:	40 e0       	ldi	r20, 0x00	; 0
    61c8:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_LOW);
    61cc:	81 e0       	ldi	r24, 0x01	; 1
    61ce:	66 e0       	ldi	r22, 0x06	; 6
    61d0:	40 e0       	ldi	r20, 0x00	; 0
    61d2:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

}
    61d6:	08 95       	ret

000061d8 <MOTOR_voidClockwise>:
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_HIGH);

}
void MOTOR_voidClockwise(void)
{
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_HIGH);
    61d8:	81 e0       	ldi	r24, 0x01	; 1
    61da:	67 e0       	ldi	r22, 0x07	; 7
    61dc:	41 e0       	ldi	r20, 0x01	; 1
    61de:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_LOW);
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	66 e0       	ldi	r22, 0x06	; 6
    61e6:	40 e0       	ldi	r20, 0x00	; 0
    61e8:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

}
    61ec:	08 95       	ret

000061ee <MOTOR_voidCounterClockwise>:
	DIO_u8SetPinDirection(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_OUTPUT);

}
void MOTOR_voidCounterClockwise(void)
{
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_LOW);
    61ee:	81 e0       	ldi	r24, 0x01	; 1
    61f0:	67 e0       	ldi	r22, 0x07	; 7
    61f2:	40 e0       	ldi	r20, 0x00	; 0
    61f4:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_HIGH);
    61f8:	81 e0       	ldi	r24, 0x01	; 1
    61fa:	66 e0       	ldi	r22, 0x06	; 6
    61fc:	41 e0       	ldi	r20, 0x01	; 1
    61fe:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>

}
    6202:	08 95       	ret

00006204 <MOTOR_voidINIT>:


/********************Functions Defintions****************/
void MOTOR_voidINIT(void)
{
	DIO_u8SetPinDirection(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_OUTPUT);
    6204:	81 e0       	ldi	r24, 0x01	; 1
    6206:	67 e0       	ldi	r22, 0x07	; 7
    6208:	41 e0       	ldi	r20, 0x01	; 1
    620a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_OUTPUT);
    620e:	81 e0       	ldi	r24, 0x01	; 1
    6210:	66 e0       	ldi	r22, 0x06	; 6
    6212:	41 e0       	ldi	r20, 0x01	; 1
    6214:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8SetPinDirection>

}
    6218:	08 95       	ret

0000621a <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    621a:	ef 92       	push	r14
    621c:	ff 92       	push	r15
    621e:	0f 93       	push	r16
    6220:	1f 93       	push	r17
    6222:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    6224:	05 80       	ldd	r0, Z+5	; 0x05
    6226:	f6 81       	ldd	r31, Z+6	; 0x06
    6228:	e0 2d       	mov	r30, r0
    622a:	e6 80       	ldd	r14, Z+6	; 0x06
    622c:	f7 80       	ldd	r15, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    622e:	87 01       	movw	r16, r14
    6230:	04 5f       	subi	r16, 0xF4	; 244
    6232:	1f 4f       	sbci	r17, 0xFF	; 255
    6234:	c8 01       	movw	r24, r16
    6236:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    623a:	89 ee       	ldi	r24, 0xE9	; 233
    623c:	91 e0       	ldi	r25, 0x01	; 1
    623e:	b8 01       	movw	r22, r16
    6240:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
    6244:	20 e0       	ldi	r18, 0x00	; 0
    6246:	e0 91 b8 01 	lds	r30, 0x01B8
    624a:	f0 91 b9 01 	lds	r31, 0x01B9
    624e:	d7 01       	movw	r26, r14
    6250:	56 96       	adiw	r26, 0x16	; 22
    6252:	9c 91       	ld	r25, X
    6254:	86 89       	ldd	r24, Z+22	; 0x16
    6256:	98 17       	cp	r25, r24
    6258:	08 f0       	brcs	.+2      	; 0x625c <xCoRoutineRemoveFromEventList+0x42>
    625a:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    625c:	82 2f       	mov	r24, r18
    625e:	1f 91       	pop	r17
    6260:	0f 91       	pop	r16
    6262:	ff 90       	pop	r15
    6264:	ef 90       	pop	r14
    6266:	08 95       	ret

00006268 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    6268:	ff 92       	push	r15
    626a:	0f 93       	push	r16
    626c:	1f 93       	push	r17
    626e:	cf 93       	push	r28
    6270:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    6272:	99 e0       	ldi	r25, 0x09	; 9
    6274:	f9 2e       	mov	r15, r25
    6276:	21 c0       	rjmp	.+66     	; 0x62ba <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    6278:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    627a:	e0 91 ee 01 	lds	r30, 0x01EE
    627e:	f0 91 ef 01 	lds	r31, 0x01EF
    6282:	06 81       	ldd	r16, Z+6	; 0x06
    6284:	17 81       	ldd	r17, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    6286:	c8 01       	movw	r24, r16
    6288:	0c 96       	adiw	r24, 0x0c	; 12
    628a:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    628e:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    6290:	e8 01       	movw	r28, r16
    6292:	22 96       	adiw	r28, 0x02	; 2
    6294:	ce 01       	movw	r24, r28
    6296:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    629a:	f8 01       	movw	r30, r16
    629c:	96 89       	ldd	r25, Z+22	; 0x16
    629e:	80 91 ba 01 	lds	r24, 0x01BA
    62a2:	89 17       	cp	r24, r25
    62a4:	10 f4       	brcc	.+4      	; 0x62aa <vCoRoutineSchedule+0x42>
    62a6:	90 93 ba 01 	sts	0x01BA, r25
    62aa:	9f 9d       	mul	r25, r15
    62ac:	c0 01       	movw	r24, r0
    62ae:	11 24       	eor	r1, r1
    62b0:	8f 53       	subi	r24, 0x3F	; 63
    62b2:	9e 4f       	sbci	r25, 0xFE	; 254
    62b4:	be 01       	movw	r22, r28
    62b6:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    62ba:	80 91 e9 01 	lds	r24, 0x01E9
    62be:	88 23       	and	r24, r24
    62c0:	d9 f6       	brne	.-74     	; 0x6278 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    62c2:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <xTaskGetTickCount>
    62c6:	20 91 bb 01 	lds	r18, 0x01BB
    62ca:	30 91 bc 01 	lds	r19, 0x01BC
    62ce:	82 1b       	sub	r24, r18
    62d0:	93 0b       	sbc	r25, r19
    62d2:	90 93 be 01 	sts	0x01BE, r25
    62d6:	80 93 bd 01 	sts	0x01BD, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    62da:	89 e0       	ldi	r24, 0x09	; 9
    62dc:	f8 2e       	mov	r15, r24
    62de:	53 c0       	rjmp	.+166    	; 0x6386 <vCoRoutineSchedule+0x11e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    62e0:	01 96       	adiw	r24, 0x01	; 1
    62e2:	90 93 c0 01 	sts	0x01C0, r25
    62e6:	80 93 bf 01 	sts	0x01BF, r24
		xPassedTicks--;
    62ea:	21 50       	subi	r18, 0x01	; 1
    62ec:	30 40       	sbci	r19, 0x00	; 0
    62ee:	30 93 be 01 	sts	0x01BE, r19
    62f2:	20 93 bd 01 	sts	0x01BD, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    62f6:	89 2b       	or	r24, r25
    62f8:	09 f0       	breq	.+2      	; 0x62fc <vCoRoutineSchedule+0x94>
    62fa:	3e c0       	rjmp	.+124    	; 0x6378 <vCoRoutineSchedule+0x110>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    62fc:	20 91 e5 01 	lds	r18, 0x01E5
    6300:	30 91 e6 01 	lds	r19, 0x01E6
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    6304:	80 91 e7 01 	lds	r24, 0x01E7
    6308:	90 91 e8 01 	lds	r25, 0x01E8
    630c:	90 93 e6 01 	sts	0x01E6, r25
    6310:	80 93 e5 01 	sts	0x01E5, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    6314:	30 93 e8 01 	sts	0x01E8, r19
    6318:	20 93 e7 01 	sts	0x01E7, r18
    631c:	2d c0       	rjmp	.+90     	; 0x6378 <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    631e:	05 80       	ldd	r0, Z+5	; 0x05
    6320:	f6 81       	ldd	r31, Z+6	; 0x06
    6322:	e0 2d       	mov	r30, r0
    6324:	c6 81       	ldd	r28, Z+6	; 0x06
    6326:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    6328:	20 91 bf 01 	lds	r18, 0x01BF
    632c:	30 91 c0 01 	lds	r19, 0x01C0
    6330:	8a 81       	ldd	r24, Y+2	; 0x02
    6332:	9b 81       	ldd	r25, Y+3	; 0x03
    6334:	28 17       	cp	r18, r24
    6336:	39 07       	cpc	r19, r25
    6338:	30 f1       	brcs	.+76     	; 0x6386 <vCoRoutineSchedule+0x11e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    633a:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    633c:	8e 01       	movw	r16, r28
    633e:	0e 5f       	subi	r16, 0xFE	; 254
    6340:	1f 4f       	sbci	r17, 0xFF	; 255
    6342:	c8 01       	movw	r24, r16
    6344:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    6348:	8c 89       	ldd	r24, Y+20	; 0x14
    634a:	9d 89       	ldd	r25, Y+21	; 0x15
    634c:	89 2b       	or	r24, r25
    634e:	21 f0       	breq	.+8      	; 0x6358 <vCoRoutineSchedule+0xf0>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    6350:	ce 01       	movw	r24, r28
    6352:	0c 96       	adiw	r24, 0x0c	; 12
    6354:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    6358:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    635a:	9e 89       	ldd	r25, Y+22	; 0x16
    635c:	80 91 ba 01 	lds	r24, 0x01BA
    6360:	89 17       	cp	r24, r25
    6362:	10 f4       	brcc	.+4      	; 0x6368 <vCoRoutineSchedule+0x100>
    6364:	90 93 ba 01 	sts	0x01BA, r25
    6368:	9f 9d       	mul	r25, r15
    636a:	c0 01       	movw	r24, r0
    636c:	11 24       	eor	r1, r1
    636e:	8f 53       	subi	r24, 0x3F	; 63
    6370:	9e 4f       	sbci	r25, 0xFE	; 254
    6372:	b8 01       	movw	r22, r16
    6374:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    6378:	e0 91 e5 01 	lds	r30, 0x01E5
    637c:	f0 91 e6 01 	lds	r31, 0x01E6
    6380:	80 81       	ld	r24, Z
    6382:	88 23       	and	r24, r24
    6384:	61 f6       	brne	.-104    	; 0x631e <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    6386:	20 91 bd 01 	lds	r18, 0x01BD
    638a:	30 91 be 01 	lds	r19, 0x01BE
    638e:	80 91 bf 01 	lds	r24, 0x01BF
    6392:	90 91 c0 01 	lds	r25, 0x01C0
    6396:	21 15       	cp	r18, r1
    6398:	31 05       	cpc	r19, r1
    639a:	09 f0       	breq	.+2      	; 0x639e <vCoRoutineSchedule+0x136>
    639c:	a1 cf       	rjmp	.-190    	; 0x62e0 <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    639e:	90 93 bc 01 	sts	0x01BC, r25
    63a2:	80 93 bb 01 	sts	0x01BB, r24
    63a6:	90 91 ba 01 	lds	r25, 0x01BA

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    63aa:	29 e0       	ldi	r18, 0x09	; 9
    63ac:	06 c0       	rjmp	.+12     	; 0x63ba <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    63ae:	99 23       	and	r25, r25
    63b0:	19 f4       	brne	.+6      	; 0x63b8 <vCoRoutineSchedule+0x150>
    63b2:	10 92 ba 01 	sts	0x01BA, r1
    63b6:	32 c0       	rjmp	.+100    	; 0x641c <vCoRoutineSchedule+0x1b4>
    63b8:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    63ba:	92 9f       	mul	r25, r18
    63bc:	d0 01       	movw	r26, r0
    63be:	11 24       	eor	r1, r1
    63c0:	af 53       	subi	r26, 0x3F	; 63
    63c2:	be 4f       	sbci	r27, 0xFE	; 254
    63c4:	8c 91       	ld	r24, X
    63c6:	88 23       	and	r24, r24
    63c8:	91 f3       	breq	.-28     	; 0x63ae <vCoRoutineSchedule+0x146>
    63ca:	90 93 ba 01 	sts	0x01BA, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    63ce:	11 96       	adiw	r26, 0x01	; 1
    63d0:	ed 91       	ld	r30, X+
    63d2:	fc 91       	ld	r31, X
    63d4:	12 97       	sbiw	r26, 0x02	; 2
    63d6:	02 80       	ldd	r0, Z+2	; 0x02
    63d8:	f3 81       	ldd	r31, Z+3	; 0x03
    63da:	e0 2d       	mov	r30, r0
    63dc:	12 96       	adiw	r26, 0x02	; 2
    63de:	fc 93       	st	X, r31
    63e0:	ee 93       	st	-X, r30
    63e2:	11 97       	sbiw	r26, 0x01	; 1
    63e4:	cd 01       	movw	r24, r26
    63e6:	03 96       	adiw	r24, 0x03	; 3
    63e8:	e8 17       	cp	r30, r24
    63ea:	f9 07       	cpc	r31, r25
    63ec:	31 f4       	brne	.+12     	; 0x63fa <vCoRoutineSchedule+0x192>
    63ee:	82 81       	ldd	r24, Z+2	; 0x02
    63f0:	93 81       	ldd	r25, Z+3	; 0x03
    63f2:	12 96       	adiw	r26, 0x02	; 2
    63f4:	9c 93       	st	X, r25
    63f6:	8e 93       	st	-X, r24
    63f8:	11 97       	sbiw	r26, 0x01	; 1
    63fa:	11 96       	adiw	r26, 0x01	; 1
    63fc:	ed 91       	ld	r30, X+
    63fe:	fc 91       	ld	r31, X
    6400:	12 97       	sbiw	r26, 0x02	; 2
    6402:	06 80       	ldd	r0, Z+6	; 0x06
    6404:	f7 81       	ldd	r31, Z+7	; 0x07
    6406:	e0 2d       	mov	r30, r0
    6408:	f0 93 b9 01 	sts	0x01B9, r31
    640c:	e0 93 b8 01 	sts	0x01B8, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    6410:	20 81       	ld	r18, Z
    6412:	31 81       	ldd	r19, Z+1	; 0x01
    6414:	cf 01       	movw	r24, r30
    6416:	67 89       	ldd	r22, Z+23	; 0x17
    6418:	f9 01       	movw	r30, r18
    641a:	09 95       	icall

	return;
}
    641c:	df 91       	pop	r29
    641e:	cf 91       	pop	r28
    6420:	1f 91       	pop	r17
    6422:	0f 91       	pop	r16
    6424:	ff 90       	pop	r15
    6426:	08 95       	ret

00006428 <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    6428:	0f 93       	push	r16
    642a:	1f 93       	push	r17
    642c:	cf 93       	push	r28
    642e:	df 93       	push	r29
    6430:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    6432:	00 91 bf 01 	lds	r16, 0x01BF
    6436:	10 91 c0 01 	lds	r17, 0x01C0
    643a:	08 0f       	add	r16, r24
    643c:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    643e:	80 91 b8 01 	lds	r24, 0x01B8
    6442:	90 91 b9 01 	lds	r25, 0x01B9
    6446:	02 96       	adiw	r24, 0x02	; 2
    6448:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    644c:	e0 91 b8 01 	lds	r30, 0x01B8
    6450:	f0 91 b9 01 	lds	r31, 0x01B9
    6454:	13 83       	std	Z+3, r17	; 0x03
    6456:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    6458:	80 91 bf 01 	lds	r24, 0x01BF
    645c:	90 91 c0 01 	lds	r25, 0x01C0
    6460:	bf 01       	movw	r22, r30
    6462:	6e 5f       	subi	r22, 0xFE	; 254
    6464:	7f 4f       	sbci	r23, 0xFF	; 255
    6466:	08 17       	cp	r16, r24
    6468:	19 07       	cpc	r17, r25
    646a:	28 f4       	brcc	.+10     	; 0x6476 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    646c:	80 91 e7 01 	lds	r24, 0x01E7
    6470:	90 91 e8 01 	lds	r25, 0x01E8
    6474:	04 c0       	rjmp	.+8      	; 0x647e <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    6476:	80 91 e5 01 	lds	r24, 0x01E5
    647a:	90 91 e6 01 	lds	r25, 0x01E6
    647e:	0e 94 3f 33 	call	0x667e	; 0x667e <vListInsert>
	}

	if( pxEventList )
    6482:	20 97       	sbiw	r28, 0x00	; 0
    6484:	49 f0       	breq	.+18     	; 0x6498 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    6486:	60 91 b8 01 	lds	r22, 0x01B8
    648a:	70 91 b9 01 	lds	r23, 0x01B9
    648e:	64 5f       	subi	r22, 0xF4	; 244
    6490:	7f 4f       	sbci	r23, 0xFF	; 255
    6492:	ce 01       	movw	r24, r28
    6494:	0e 94 3f 33 	call	0x667e	; 0x667e <vListInsert>
	}
}
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	08 95       	ret

000064a2 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    64a2:	af 92       	push	r10
    64a4:	bf 92       	push	r11
    64a6:	cf 92       	push	r12
    64a8:	df 92       	push	r13
    64aa:	ef 92       	push	r14
    64ac:	ff 92       	push	r15
    64ae:	0f 93       	push	r16
    64b0:	1f 93       	push	r17
    64b2:	cf 93       	push	r28
    64b4:	df 93       	push	r29
    64b6:	6c 01       	movw	r12, r24
    64b8:	b6 2e       	mov	r11, r22
    64ba:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    64bc:	8a e1       	ldi	r24, 0x1A	; 26
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	0e 94 db 32 	call	0x65b6	; 0x65b6 <pvPortMalloc>
    64c4:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    64c6:	00 97       	sbiw	r24, 0x00	; 0
    64c8:	11 f4       	brne	.+4      	; 0x64ce <xCoRoutineCreate+0x2c>
    64ca:	8f ef       	ldi	r24, 0xFF	; 255
    64cc:	59 c0       	rjmp	.+178    	; 0x6580 <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    64ce:	80 91 b8 01 	lds	r24, 0x01B8
    64d2:	90 91 b9 01 	lds	r25, 0x01B9
    64d6:	89 2b       	or	r24, r25
    64d8:	21 f5       	brne	.+72     	; 0x6522 <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    64da:	d0 93 b9 01 	sts	0x01B9, r29
    64de:	c0 93 b8 01 	sts	0x01B8, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    64e2:	81 ec       	ldi	r24, 0xC1	; 193
    64e4:	91 e0       	ldi	r25, 0x01	; 1
    64e6:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
    64ea:	8a ec       	ldi	r24, 0xCA	; 202
    64ec:	91 e0       	ldi	r25, 0x01	; 1
    64ee:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    64f2:	23 ed       	ldi	r18, 0xD3	; 211
    64f4:	e2 2e       	mov	r14, r18
    64f6:	21 e0       	ldi	r18, 0x01	; 1
    64f8:	f2 2e       	mov	r15, r18
    64fa:	c7 01       	movw	r24, r14
    64fc:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    6500:	0c ed       	ldi	r16, 0xDC	; 220
    6502:	11 e0       	ldi	r17, 0x01	; 1
    6504:	c8 01       	movw	r24, r16
    6506:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    650a:	89 ee       	ldi	r24, 0xE9	; 233
    650c:	91 e0       	ldi	r25, 0x01	; 1
    650e:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    6512:	f0 92 e6 01 	sts	0x01E6, r15
    6516:	e0 92 e5 01 	sts	0x01E5, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    651a:	10 93 e8 01 	sts	0x01E8, r17
    651e:	00 93 e7 01 	sts	0x01E7, r16
    6522:	eb 2c       	mov	r14, r11
    6524:	bb 20       	and	r11, r11
    6526:	11 f0       	breq	.+4      	; 0x652c <xCoRoutineCreate+0x8a>
    6528:	ee 24       	eor	r14, r14
    652a:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    652c:	19 8e       	std	Y+25, r1	; 0x19
    652e:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    6530:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    6532:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    6534:	fe 01       	movw	r30, r28
    6536:	c1 92       	st	Z+, r12
    6538:	d1 92       	st	Z+, r13
    653a:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    653c:	cf 01       	movw	r24, r30
    653e:	0e 94 12 33 	call	0x6624	; 0x6624 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    6542:	ce 01       	movw	r24, r28
    6544:	0c 96       	adiw	r24, 0x0c	; 12
    6546:	0e 94 12 33 	call	0x6624	; 0x6624 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    654a:	d9 87       	std	Y+9, r29	; 0x09
    654c:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    654e:	db 8b       	std	Y+19, r29	; 0x13
    6550:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    6552:	84 e0       	ldi	r24, 0x04	; 4
    6554:	90 e0       	ldi	r25, 0x00	; 0
    6556:	8e 19       	sub	r24, r14
    6558:	91 09       	sbc	r25, r1
    655a:	9d 87       	std	Y+13, r25	; 0x0d
    655c:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    655e:	9e 89       	ldd	r25, Y+22	; 0x16
    6560:	80 91 ba 01 	lds	r24, 0x01BA
    6564:	89 17       	cp	r24, r25
    6566:	10 f4       	brcc	.+4      	; 0x656c <xCoRoutineCreate+0xca>
    6568:	90 93 ba 01 	sts	0x01BA, r25
    656c:	89 e0       	ldi	r24, 0x09	; 9
    656e:	98 9f       	mul	r25, r24
    6570:	c0 01       	movw	r24, r0
    6572:	11 24       	eor	r1, r1
    6574:	8f 53       	subi	r24, 0x3F	; 63
    6576:	9e 4f       	sbci	r25, 0xFE	; 254
    6578:	b8 01       	movw	r22, r16
    657a:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
    657e:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    6580:	df 91       	pop	r29
    6582:	cf 91       	pop	r28
    6584:	1f 91       	pop	r17
    6586:	0f 91       	pop	r16
    6588:	ff 90       	pop	r15
    658a:	ef 90       	pop	r14
    658c:	df 90       	pop	r13
    658e:	cf 90       	pop	r12
    6590:	bf 90       	pop	r11
    6592:	af 90       	pop	r10
    6594:	08 95       	ret

00006596 <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    6596:	08 95       	ret

00006598 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    6598:	10 92 f3 01 	sts	0x01F3, r1
    659c:	10 92 f2 01 	sts	0x01F2, r1
}
    65a0:	08 95       	ret

000065a2 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    65a2:	28 ee       	ldi	r18, 0xE8	; 232
    65a4:	33 e0       	ldi	r19, 0x03	; 3
    65a6:	80 91 f2 01 	lds	r24, 0x01F2
    65aa:	90 91 f3 01 	lds	r25, 0x01F3
    65ae:	28 1b       	sub	r18, r24
    65b0:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    65b2:	c9 01       	movw	r24, r18
    65b4:	08 95       	ret

000065b6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    65b6:	0f 93       	push	r16
    65b8:	1f 93       	push	r17
    65ba:	cf 93       	push	r28
    65bc:	df 93       	push	r29
    65be:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    65c0:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    65c4:	80 91 f2 01 	lds	r24, 0x01F2
    65c8:	90 91 f3 01 	lds	r25, 0x01F3
    65cc:	98 01       	movw	r18, r16
    65ce:	28 0f       	add	r18, r24
    65d0:	39 1f       	adc	r19, r25
    65d2:	43 e0       	ldi	r20, 0x03	; 3
    65d4:	28 3e       	cpi	r18, 0xE8	; 232
    65d6:	34 07       	cpc	r19, r20
    65d8:	58 f4       	brcc	.+22     	; 0x65f0 <pvPortMalloc+0x3a>
    65da:	82 17       	cp	r24, r18
    65dc:	93 07       	cpc	r25, r19
    65de:	40 f4       	brcc	.+16     	; 0x65f0 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    65e0:	ec 01       	movw	r28, r24
    65e2:	cc 50       	subi	r28, 0x0C	; 12
    65e4:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
    65e6:	30 93 f3 01 	sts	0x01F3, r19
    65ea:	20 93 f2 01 	sts	0x01F2, r18
    65ee:	02 c0       	rjmp	.+4      	; 0x65f4 <pvPortMalloc+0x3e>
    65f0:	c0 e0       	ldi	r28, 0x00	; 0
    65f2:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    65f4:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    65f8:	ce 01       	movw	r24, r28
    65fa:	df 91       	pop	r29
    65fc:	cf 91       	pop	r28
    65fe:	1f 91       	pop	r17
    6600:	0f 91       	pop	r16
    6602:	08 95       	ret

00006604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    6604:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    6606:	9c 01       	movw	r18, r24
    6608:	2d 5f       	subi	r18, 0xFD	; 253
    660a:	3f 4f       	sbci	r19, 0xFF	; 255
    660c:	32 83       	std	Z+2, r19	; 0x02
    660e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    6610:	8f ef       	ldi	r24, 0xFF	; 255
    6612:	9f ef       	ldi	r25, 0xFF	; 255
    6614:	94 83       	std	Z+4, r25	; 0x04
    6616:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    6618:	36 83       	std	Z+6, r19	; 0x06
    661a:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    661c:	30 87       	std	Z+8, r19	; 0x08
    661e:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    6620:	10 82       	st	Z, r1
}
    6622:	08 95       	ret

00006624 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    6624:	fc 01       	movw	r30, r24
    6626:	11 86       	std	Z+9, r1	; 0x09
    6628:	10 86       	std	Z+8, r1	; 0x08
}
    662a:	08 95       	ret

0000662c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    662c:	cf 93       	push	r28
    662e:	df 93       	push	r29
    6630:	ac 01       	movw	r20, r24
    6632:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    6634:	ec 01       	movw	r28, r24
    6636:	29 81       	ldd	r18, Y+1	; 0x01
    6638:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    663a:	f9 01       	movw	r30, r18
    663c:	82 81       	ldd	r24, Z+2	; 0x02
    663e:	93 81       	ldd	r25, Z+3	; 0x03
    6640:	13 96       	adiw	r26, 0x03	; 3
    6642:	9c 93       	st	X, r25
    6644:	8e 93       	st	-X, r24
    6646:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    6648:	89 81       	ldd	r24, Y+1	; 0x01
    664a:	9a 81       	ldd	r25, Y+2	; 0x02
    664c:	15 96       	adiw	r26, 0x05	; 5
    664e:	9c 93       	st	X, r25
    6650:	8e 93       	st	-X, r24
    6652:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    6654:	02 80       	ldd	r0, Z+2	; 0x02
    6656:	f3 81       	ldd	r31, Z+3	; 0x03
    6658:	e0 2d       	mov	r30, r0
    665a:	75 83       	std	Z+5, r23	; 0x05
    665c:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    665e:	e9 01       	movw	r28, r18
    6660:	7b 83       	std	Y+3, r23	; 0x03
    6662:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    6664:	fa 01       	movw	r30, r20
    6666:	72 83       	std	Z+2, r23	; 0x02
    6668:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    666a:	19 96       	adiw	r26, 0x09	; 9
    666c:	5c 93       	st	X, r21
    666e:	4e 93       	st	-X, r20
    6670:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    6672:	80 81       	ld	r24, Z
    6674:	8f 5f       	subi	r24, 0xFF	; 255
    6676:	80 83       	st	Z, r24
}
    6678:	df 91       	pop	r29
    667a:	cf 91       	pop	r28
    667c:	08 95       	ret

0000667e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    667e:	cf 93       	push	r28
    6680:	df 93       	push	r29
    6682:	9c 01       	movw	r18, r24
    6684:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    6686:	48 81       	ld	r20, Y
    6688:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    668a:	8f ef       	ldi	r24, 0xFF	; 255
    668c:	4f 3f       	cpi	r20, 0xFF	; 255
    668e:	58 07       	cpc	r21, r24
    6690:	21 f4       	brne	.+8      	; 0x669a <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    6692:	f9 01       	movw	r30, r18
    6694:	a7 81       	ldd	r26, Z+7	; 0x07
    6696:	b0 85       	ldd	r27, Z+8	; 0x08
    6698:	10 c0       	rjmp	.+32     	; 0x66ba <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    669a:	d9 01       	movw	r26, r18
    669c:	13 96       	adiw	r26, 0x03	; 3
    669e:	04 c0       	rjmp	.+8      	; 0x66a8 <vListInsert+0x2a>
    66a0:	12 96       	adiw	r26, 0x02	; 2
    66a2:	0d 90       	ld	r0, X+
    66a4:	bc 91       	ld	r27, X
    66a6:	a0 2d       	mov	r26, r0
    66a8:	12 96       	adiw	r26, 0x02	; 2
    66aa:	ed 91       	ld	r30, X+
    66ac:	fc 91       	ld	r31, X
    66ae:	13 97       	sbiw	r26, 0x03	; 3
    66b0:	80 81       	ld	r24, Z
    66b2:	91 81       	ldd	r25, Z+1	; 0x01
    66b4:	48 17       	cp	r20, r24
    66b6:	59 07       	cpc	r21, r25
    66b8:	98 f7       	brcc	.-26     	; 0x66a0 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    66ba:	12 96       	adiw	r26, 0x02	; 2
    66bc:	ed 91       	ld	r30, X+
    66be:	fc 91       	ld	r31, X
    66c0:	13 97       	sbiw	r26, 0x03	; 3
    66c2:	fb 83       	std	Y+3, r31	; 0x03
    66c4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    66c6:	d5 83       	std	Z+5, r29	; 0x05
    66c8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    66ca:	bd 83       	std	Y+5, r27	; 0x05
    66cc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    66ce:	13 96       	adiw	r26, 0x03	; 3
    66d0:	dc 93       	st	X, r29
    66d2:	ce 93       	st	-X, r28
    66d4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    66d6:	39 87       	std	Y+9, r19	; 0x09
    66d8:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    66da:	f9 01       	movw	r30, r18
    66dc:	80 81       	ld	r24, Z
    66de:	8f 5f       	subi	r24, 0xFF	; 255
    66e0:	80 83       	st	Z, r24
}
    66e2:	df 91       	pop	r29
    66e4:	cf 91       	pop	r28
    66e6:	08 95       	ret

000066e8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    66e8:	cf 93       	push	r28
    66ea:	df 93       	push	r29
    66ec:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    66ee:	12 96       	adiw	r26, 0x02	; 2
    66f0:	ed 91       	ld	r30, X+
    66f2:	fc 91       	ld	r31, X
    66f4:	13 97       	sbiw	r26, 0x03	; 3
    66f6:	14 96       	adiw	r26, 0x04	; 4
    66f8:	8d 91       	ld	r24, X+
    66fa:	9c 91       	ld	r25, X
    66fc:	15 97       	sbiw	r26, 0x05	; 5
    66fe:	95 83       	std	Z+5, r25	; 0x05
    6700:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    6702:	14 96       	adiw	r26, 0x04	; 4
    6704:	cd 91       	ld	r28, X+
    6706:	dc 91       	ld	r29, X
    6708:	15 97       	sbiw	r26, 0x05	; 5
    670a:	fb 83       	std	Y+3, r31	; 0x03
    670c:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    670e:	18 96       	adiw	r26, 0x08	; 8
    6710:	ed 91       	ld	r30, X+
    6712:	fc 91       	ld	r31, X
    6714:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    6716:	81 81       	ldd	r24, Z+1	; 0x01
    6718:	92 81       	ldd	r25, Z+2	; 0x02
    671a:	8a 17       	cp	r24, r26
    671c:	9b 07       	cpc	r25, r27
    671e:	11 f4       	brne	.+4      	; 0x6724 <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    6720:	d2 83       	std	Z+2, r29	; 0x02
    6722:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    6724:	19 96       	adiw	r26, 0x09	; 9
    6726:	1c 92       	st	X, r1
    6728:	1e 92       	st	-X, r1
    672a:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    672c:	80 81       	ld	r24, Z
    672e:	81 50       	subi	r24, 0x01	; 1
    6730:	80 83       	st	Z, r24
}
    6732:	df 91       	pop	r29
    6734:	cf 91       	pop	r28
    6736:	08 95       	ret

00006738 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    6738:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    673a:	91 e1       	ldi	r25, 0x11	; 17
    673c:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    673e:	22 e2       	ldi	r18, 0x22	; 34
    6740:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    6742:	83 e3       	ldi	r24, 0x33	; 51
    6744:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    6746:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    6748:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    674a:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    674c:	80 e8       	ldi	r24, 0x80	; 128
    674e:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    6750:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    6752:	82 e0       	ldi	r24, 0x02	; 2
    6754:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    6756:	83 e0       	ldi	r24, 0x03	; 3
    6758:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    675a:	84 e0       	ldi	r24, 0x04	; 4
    675c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    675e:	85 e0       	ldi	r24, 0x05	; 5
    6760:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    6762:	86 e0       	ldi	r24, 0x06	; 6
    6764:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    6766:	87 e0       	ldi	r24, 0x07	; 7
    6768:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    676a:	88 e0       	ldi	r24, 0x08	; 8
    676c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    676e:	89 e0       	ldi	r24, 0x09	; 9
    6770:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    6772:	80 e1       	ldi	r24, 0x10	; 16
    6774:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    6776:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    6778:	82 e1       	ldi	r24, 0x12	; 18
    677a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    677c:	83 e1       	ldi	r24, 0x13	; 19
    677e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    6780:	84 e1       	ldi	r24, 0x14	; 20
    6782:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    6784:	85 e1       	ldi	r24, 0x15	; 21
    6786:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    6788:	86 e1       	ldi	r24, 0x16	; 22
    678a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    678c:	87 e1       	ldi	r24, 0x17	; 23
    678e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    6790:	88 e1       	ldi	r24, 0x18	; 24
    6792:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    6794:	89 e1       	ldi	r24, 0x19	; 25
    6796:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    6798:	80 e2       	ldi	r24, 0x20	; 32
    679a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    679c:	81 e2       	ldi	r24, 0x21	; 33
    679e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    67a0:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    67a2:	83 e2       	ldi	r24, 0x23	; 35
    67a4:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    67a6:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    67a8:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    67aa:	86 e2       	ldi	r24, 0x26	; 38
    67ac:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    67ae:	87 e2       	ldi	r24, 0x27	; 39
    67b0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    67b2:	88 e2       	ldi	r24, 0x28	; 40
    67b4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    67b6:	89 e2       	ldi	r24, 0x29	; 41
    67b8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    67ba:	80 e3       	ldi	r24, 0x30	; 48
    67bc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    67be:	81 e3       	ldi	r24, 0x31	; 49
    67c0:	82 93       	st	-Z, r24
    67c2:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    67c4:	cf 01       	movw	r24, r30
    67c6:	08 95       	ret

000067c8 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    67c8:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    67ca:	8c e7       	ldi	r24, 0x7C	; 124
    67cc:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    67ce:	8b e0       	ldi	r24, 0x0B	; 11
    67d0:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    67d2:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    67d4:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    67d6:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    67d8:	a0 91 dc 05 	lds	r26, 0x05DC
    67dc:	b0 91 dd 05 	lds	r27, 0x05DD
    67e0:	cd 91       	ld	r28, X+
    67e2:	cd bf       	out	0x3d, r28	; 61
    67e4:	dd 91       	ld	r29, X+
    67e6:	de bf       	out	0x3e, r29	; 62
    67e8:	ff 91       	pop	r31
    67ea:	ef 91       	pop	r30
    67ec:	df 91       	pop	r29
    67ee:	cf 91       	pop	r28
    67f0:	bf 91       	pop	r27
    67f2:	af 91       	pop	r26
    67f4:	9f 91       	pop	r25
    67f6:	8f 91       	pop	r24
    67f8:	7f 91       	pop	r23
    67fa:	6f 91       	pop	r22
    67fc:	5f 91       	pop	r21
    67fe:	4f 91       	pop	r20
    6800:	3f 91       	pop	r19
    6802:	2f 91       	pop	r18
    6804:	1f 91       	pop	r17
    6806:	0f 91       	pop	r16
    6808:	ff 90       	pop	r15
    680a:	ef 90       	pop	r14
    680c:	df 90       	pop	r13
    680e:	cf 90       	pop	r12
    6810:	bf 90       	pop	r11
    6812:	af 90       	pop	r10
    6814:	9f 90       	pop	r9
    6816:	8f 90       	pop	r8
    6818:	7f 90       	pop	r7
    681a:	6f 90       	pop	r6
    681c:	5f 90       	pop	r5
    681e:	4f 90       	pop	r4
    6820:	3f 90       	pop	r3
    6822:	2f 90       	pop	r2
    6824:	1f 90       	pop	r1
    6826:	0f 90       	pop	r0
    6828:	0f be       	out	0x3f, r0	; 63
    682a:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    682c:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    682e:	81 e0       	ldi	r24, 0x01	; 1
    6830:	08 95       	ret

00006832 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    6832:	08 95       	ret

00006834 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    6834:	0f 92       	push	r0
    6836:	0f b6       	in	r0, 0x3f	; 63
    6838:	f8 94       	cli
    683a:	0f 92       	push	r0
    683c:	1f 92       	push	r1
    683e:	11 24       	eor	r1, r1
    6840:	2f 92       	push	r2
    6842:	3f 92       	push	r3
    6844:	4f 92       	push	r4
    6846:	5f 92       	push	r5
    6848:	6f 92       	push	r6
    684a:	7f 92       	push	r7
    684c:	8f 92       	push	r8
    684e:	9f 92       	push	r9
    6850:	af 92       	push	r10
    6852:	bf 92       	push	r11
    6854:	cf 92       	push	r12
    6856:	df 92       	push	r13
    6858:	ef 92       	push	r14
    685a:	ff 92       	push	r15
    685c:	0f 93       	push	r16
    685e:	1f 93       	push	r17
    6860:	2f 93       	push	r18
    6862:	3f 93       	push	r19
    6864:	4f 93       	push	r20
    6866:	5f 93       	push	r21
    6868:	6f 93       	push	r22
    686a:	7f 93       	push	r23
    686c:	8f 93       	push	r24
    686e:	9f 93       	push	r25
    6870:	af 93       	push	r26
    6872:	bf 93       	push	r27
    6874:	cf 93       	push	r28
    6876:	df 93       	push	r29
    6878:	ef 93       	push	r30
    687a:	ff 93       	push	r31
    687c:	a0 91 dc 05 	lds	r26, 0x05DC
    6880:	b0 91 dd 05 	lds	r27, 0x05DD
    6884:	0d b6       	in	r0, 0x3d	; 61
    6886:	0d 92       	st	X+, r0
    6888:	0e b6       	in	r0, 0x3e	; 62
    688a:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    688c:	0e 94 ba 38 	call	0x7174	; 0x7174 <vTaskIncrementTick>
	vTaskSwitchContext();
    6890:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    6894:	a0 91 dc 05 	lds	r26, 0x05DC
    6898:	b0 91 dd 05 	lds	r27, 0x05DD
    689c:	cd 91       	ld	r28, X+
    689e:	cd bf       	out	0x3d, r28	; 61
    68a0:	dd 91       	ld	r29, X+
    68a2:	de bf       	out	0x3e, r29	; 62
    68a4:	ff 91       	pop	r31
    68a6:	ef 91       	pop	r30
    68a8:	df 91       	pop	r29
    68aa:	cf 91       	pop	r28
    68ac:	bf 91       	pop	r27
    68ae:	af 91       	pop	r26
    68b0:	9f 91       	pop	r25
    68b2:	8f 91       	pop	r24
    68b4:	7f 91       	pop	r23
    68b6:	6f 91       	pop	r22
    68b8:	5f 91       	pop	r21
    68ba:	4f 91       	pop	r20
    68bc:	3f 91       	pop	r19
    68be:	2f 91       	pop	r18
    68c0:	1f 91       	pop	r17
    68c2:	0f 91       	pop	r16
    68c4:	ff 90       	pop	r15
    68c6:	ef 90       	pop	r14
    68c8:	df 90       	pop	r13
    68ca:	cf 90       	pop	r12
    68cc:	bf 90       	pop	r11
    68ce:	af 90       	pop	r10
    68d0:	9f 90       	pop	r9
    68d2:	8f 90       	pop	r8
    68d4:	7f 90       	pop	r7
    68d6:	6f 90       	pop	r6
    68d8:	5f 90       	pop	r5
    68da:	4f 90       	pop	r4
    68dc:	3f 90       	pop	r3
    68de:	2f 90       	pop	r2
    68e0:	1f 90       	pop	r1
    68e2:	0f 90       	pop	r0
    68e4:	0f be       	out	0x3f, r0	; 63
    68e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    68e8:	08 95       	ret

000068ea <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    68ea:	0e 94 1a 34 	call	0x6834	; 0x6834 <vPortYieldFromTick>
		asm volatile ( "reti" );
    68ee:	18 95       	reti

000068f0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    68f0:	0f 92       	push	r0
    68f2:	0f b6       	in	r0, 0x3f	; 63
    68f4:	f8 94       	cli
    68f6:	0f 92       	push	r0
    68f8:	1f 92       	push	r1
    68fa:	11 24       	eor	r1, r1
    68fc:	2f 92       	push	r2
    68fe:	3f 92       	push	r3
    6900:	4f 92       	push	r4
    6902:	5f 92       	push	r5
    6904:	6f 92       	push	r6
    6906:	7f 92       	push	r7
    6908:	8f 92       	push	r8
    690a:	9f 92       	push	r9
    690c:	af 92       	push	r10
    690e:	bf 92       	push	r11
    6910:	cf 92       	push	r12
    6912:	df 92       	push	r13
    6914:	ef 92       	push	r14
    6916:	ff 92       	push	r15
    6918:	0f 93       	push	r16
    691a:	1f 93       	push	r17
    691c:	2f 93       	push	r18
    691e:	3f 93       	push	r19
    6920:	4f 93       	push	r20
    6922:	5f 93       	push	r21
    6924:	6f 93       	push	r22
    6926:	7f 93       	push	r23
    6928:	8f 93       	push	r24
    692a:	9f 93       	push	r25
    692c:	af 93       	push	r26
    692e:	bf 93       	push	r27
    6930:	cf 93       	push	r28
    6932:	df 93       	push	r29
    6934:	ef 93       	push	r30
    6936:	ff 93       	push	r31
    6938:	a0 91 dc 05 	lds	r26, 0x05DC
    693c:	b0 91 dd 05 	lds	r27, 0x05DD
    6940:	0d b6       	in	r0, 0x3d	; 61
    6942:	0d 92       	st	X+, r0
    6944:	0e b6       	in	r0, 0x3e	; 62
    6946:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    6948:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    694c:	a0 91 dc 05 	lds	r26, 0x05DC
    6950:	b0 91 dd 05 	lds	r27, 0x05DD
    6954:	cd 91       	ld	r28, X+
    6956:	cd bf       	out	0x3d, r28	; 61
    6958:	dd 91       	ld	r29, X+
    695a:	de bf       	out	0x3e, r29	; 62
    695c:	ff 91       	pop	r31
    695e:	ef 91       	pop	r30
    6960:	df 91       	pop	r29
    6962:	cf 91       	pop	r28
    6964:	bf 91       	pop	r27
    6966:	af 91       	pop	r26
    6968:	9f 91       	pop	r25
    696a:	8f 91       	pop	r24
    696c:	7f 91       	pop	r23
    696e:	6f 91       	pop	r22
    6970:	5f 91       	pop	r21
    6972:	4f 91       	pop	r20
    6974:	3f 91       	pop	r19
    6976:	2f 91       	pop	r18
    6978:	1f 91       	pop	r17
    697a:	0f 91       	pop	r16
    697c:	ff 90       	pop	r15
    697e:	ef 90       	pop	r14
    6980:	df 90       	pop	r13
    6982:	cf 90       	pop	r12
    6984:	bf 90       	pop	r11
    6986:	af 90       	pop	r10
    6988:	9f 90       	pop	r9
    698a:	8f 90       	pop	r8
    698c:	7f 90       	pop	r7
    698e:	6f 90       	pop	r6
    6990:	5f 90       	pop	r5
    6992:	4f 90       	pop	r4
    6994:	3f 90       	pop	r3
    6996:	2f 90       	pop	r2
    6998:	1f 90       	pop	r1
    699a:	0f 90       	pop	r0
    699c:	0f be       	out	0x3f, r0	; 63
    699e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    69a0:	08 95       	ret

000069a2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    69a2:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    69a4:	0f b6       	in	r0, 0x3f	; 63
    69a6:	f8 94       	cli
    69a8:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    69aa:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    69ac:	0f 90       	pop	r0
    69ae:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    69b0:	08 95       	ret

000069b2 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    69b2:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    69b4:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    69b6:	08 95       	ret

000069b8 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    69b8:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    69ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    69bc:	90 e0       	ldi	r25, 0x00	; 0
    69be:	88 23       	and	r24, r24
    69c0:	09 f4       	brne	.+2      	; 0x69c4 <xQueueIsQueueEmptyFromISR+0xc>
    69c2:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    69c4:	89 2f       	mov	r24, r25
    69c6:	08 95       	ret

000069c8 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    69c8:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    69ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    69cc:	20 e0       	ldi	r18, 0x00	; 0
    69ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    69d0:	98 17       	cp	r25, r24
    69d2:	09 f4       	brne	.+2      	; 0x69d6 <xQueueIsQueueFullFromISR+0xe>
    69d4:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    69d6:	82 2f       	mov	r24, r18
    69d8:	08 95       	ret

000069da <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    69da:	0f 93       	push	r16
    69dc:	1f 93       	push	r17
    69de:	8c 01       	movw	r16, r24
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    69e0:	fc 01       	movw	r30, r24
    69e2:	80 81       	ld	r24, Z
    69e4:	91 81       	ldd	r25, Z+1	; 0x01
    69e6:	0e 94 cb 32 	call	0x6596	; 0x6596 <vPortFree>
	vPortFree( pxQueue );
    69ea:	c8 01       	movw	r24, r16
    69ec:	0e 94 cb 32 	call	0x6596	; 0x6596 <vPortFree>
}
    69f0:	1f 91       	pop	r17
    69f2:	0f 91       	pop	r16
    69f4:	08 95       	ret

000069f6 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    69f6:	0f 93       	push	r16
    69f8:	1f 93       	push	r17
    69fa:	cf 93       	push	r28
    69fc:	df 93       	push	r29
    69fe:	ec 01       	movw	r28, r24
    6a00:	fb 01       	movw	r30, r22
    6a02:	8a 01       	movw	r16, r20
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    6a04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6a06:	88 23       	and	r24, r24
    6a08:	81 f1       	breq	.+96     	; 0x6a6a <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    6a0a:	48 81       	ld	r20, Y
    6a0c:	59 81       	ldd	r21, Y+1	; 0x01
    6a0e:	41 15       	cp	r20, r1
    6a10:	51 05       	cpc	r21, r1
    6a12:	a9 f0       	breq	.+42     	; 0x6a3e <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    6a14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a16:	2e 81       	ldd	r18, Y+6	; 0x06
    6a18:	3f 81       	ldd	r19, Y+7	; 0x07
    6a1a:	28 0f       	add	r18, r24
    6a1c:	31 1d       	adc	r19, r1
    6a1e:	3f 83       	std	Y+7, r19	; 0x07
    6a20:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    6a22:	8a 81       	ldd	r24, Y+2	; 0x02
    6a24:	9b 81       	ldd	r25, Y+3	; 0x03
    6a26:	28 17       	cp	r18, r24
    6a28:	39 07       	cpc	r19, r25
    6a2a:	10 f0       	brcs	.+4      	; 0x6a30 <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    6a2c:	5f 83       	std	Y+7, r21	; 0x07
    6a2e:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    6a30:	4c 8d       	ldd	r20, Y+28	; 0x1c
    6a32:	6e 81       	ldd	r22, Y+6	; 0x06
    6a34:	7f 81       	ldd	r23, Y+7	; 0x07
    6a36:	cf 01       	movw	r24, r30
    6a38:	50 e0       	ldi	r21, 0x00	; 0
    6a3a:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    6a3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6a40:	81 50       	subi	r24, 0x01	; 1
    6a42:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    6a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6a46:	8f 3f       	cpi	r24, 0xFF	; 255
    6a48:	69 f4       	brne	.+26     	; 0x6a64 <xQueueReceiveFromISR+0x6e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6a4a:	88 85       	ldd	r24, Y+8	; 0x08
    6a4c:	88 23       	and	r24, r24
    6a4e:	61 f0       	breq	.+24     	; 0x6a68 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6a50:	ce 01       	movw	r24, r28
    6a52:	08 96       	adiw	r24, 0x08	; 8
    6a54:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6a58:	88 23       	and	r24, r24
    6a5a:	31 f0       	breq	.+12     	; 0x6a68 <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    6a5c:	81 e0       	ldi	r24, 0x01	; 1
    6a5e:	f8 01       	movw	r30, r16
    6a60:	80 83       	st	Z, r24
    6a62:	03 c0       	rjmp	.+6      	; 0x6a6a <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    6a64:	8f 5f       	subi	r24, 0xFF	; 255
    6a66:	8d 8f       	std	Y+29, r24	; 0x1d
    6a68:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    6a6a:	df 91       	pop	r29
    6a6c:	cf 91       	pop	r28
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	08 95       	ret

00006a74 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    6a74:	cf 93       	push	r28
    6a76:	df 93       	push	r29
    6a78:	ec 01       	movw	r28, r24
    6a7a:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    6a7c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    6a7e:	44 23       	and	r20, r20
    6a80:	a1 f1       	breq	.+104    	; 0x6aea <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    6a82:	88 23       	and	r24, r24
    6a84:	b1 f4       	brne	.+44     	; 0x6ab2 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    6a86:	8c 81       	ldd	r24, Y+4	; 0x04
    6a88:	9d 81       	ldd	r25, Y+5	; 0x05
    6a8a:	50 e0       	ldi	r21, 0x00	; 0
    6a8c:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    6a90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a92:	2c 81       	ldd	r18, Y+4	; 0x04
    6a94:	3d 81       	ldd	r19, Y+5	; 0x05
    6a96:	28 0f       	add	r18, r24
    6a98:	31 1d       	adc	r19, r1
    6a9a:	3d 83       	std	Y+5, r19	; 0x05
    6a9c:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    6a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    6aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    6aa2:	28 17       	cp	r18, r24
    6aa4:	39 07       	cpc	r19, r25
    6aa6:	08 f1       	brcs	.+66     	; 0x6aea <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    6aa8:	88 81       	ld	r24, Y
    6aaa:	99 81       	ldd	r25, Y+1	; 0x01
    6aac:	9d 83       	std	Y+5, r25	; 0x05
    6aae:	8c 83       	std	Y+4, r24	; 0x04
    6ab0:	1c c0       	rjmp	.+56     	; 0x6aea <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    6ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    6ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    6ab6:	50 e0       	ldi	r21, 0x00	; 0
    6ab8:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    6abc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	44 27       	eor	r20, r20
    6ac2:	55 27       	eor	r21, r21
    6ac4:	48 1b       	sub	r20, r24
    6ac6:	59 0b       	sbc	r21, r25
    6ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    6aca:	9f 81       	ldd	r25, Y+7	; 0x07
    6acc:	84 0f       	add	r24, r20
    6ace:	95 1f       	adc	r25, r21
    6ad0:	9f 83       	std	Y+7, r25	; 0x07
    6ad2:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    6ad4:	28 81       	ld	r18, Y
    6ad6:	39 81       	ldd	r19, Y+1	; 0x01
    6ad8:	82 17       	cp	r24, r18
    6ada:	93 07       	cpc	r25, r19
    6adc:	30 f4       	brcc	.+12     	; 0x6aea <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    6ade:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae2:	84 0f       	add	r24, r20
    6ae4:	95 1f       	adc	r25, r21
    6ae6:	9f 83       	std	Y+7, r25	; 0x07
    6ae8:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    6aea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6aec:	8f 5f       	subi	r24, 0xFF	; 255
    6aee:	8a 8f       	std	Y+26, r24	; 0x1a
}
    6af0:	df 91       	pop	r29
    6af2:	cf 91       	pop	r28
    6af4:	08 95       	ret

00006af6 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    6af6:	0f 93       	push	r16
    6af8:	1f 93       	push	r17
    6afa:	cf 93       	push	r28
    6afc:	df 93       	push	r29
    6afe:	ec 01       	movw	r28, r24
    6b00:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    6b02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b06:	98 17       	cp	r25, r24
    6b08:	10 f0       	brcs	.+4      	; 0x6b0e <xQueueGenericSendFromISR+0x18>
    6b0a:	80 e0       	ldi	r24, 0x00	; 0
    6b0c:	17 c0       	rjmp	.+46     	; 0x6b3c <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6b0e:	ce 01       	movw	r24, r28
    6b10:	42 2f       	mov	r20, r18
    6b12:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    6b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6b18:	8f 3f       	cpi	r24, 0xFF	; 255
    6b1a:	69 f4       	brne	.+26     	; 0x6b36 <xQueueGenericSendFromISR+0x40>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6b1c:	89 89       	ldd	r24, Y+17	; 0x11
    6b1e:	88 23       	and	r24, r24
    6b20:	61 f0       	breq	.+24     	; 0x6b3a <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6b22:	ce 01       	movw	r24, r28
    6b24:	41 96       	adiw	r24, 0x11	; 17
    6b26:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6b2a:	88 23       	and	r24, r24
    6b2c:	31 f0       	breq	.+12     	; 0x6b3a <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
    6b30:	f8 01       	movw	r30, r16
    6b32:	80 83       	st	Z, r24
    6b34:	03 c0       	rjmp	.+6      	; 0x6b3c <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    6b36:	8f 5f       	subi	r24, 0xFF	; 255
    6b38:	8e 8f       	std	Y+30, r24	; 0x1e
    6b3a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    6b3c:	df 91       	pop	r29
    6b3e:	cf 91       	pop	r28
    6b40:	1f 91       	pop	r17
    6b42:	0f 91       	pop	r16
    6b44:	08 95       	ret

00006b46 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    6b46:	0f 93       	push	r16
    6b48:	1f 93       	push	r17
    6b4a:	cf 93       	push	r28
    6b4c:	df 93       	push	r29
    6b4e:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    6b50:	0f b6       	in	r0, 0x3f	; 63
    6b52:	f8 94       	cli
    6b54:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6b56:	8c 01       	movw	r16, r24
    6b58:	0f 5e       	subi	r16, 0xEF	; 239
    6b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b5c:	0d c0       	rjmp	.+26     	; 0x6b78 <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6b5e:	89 89       	ldd	r24, Y+17	; 0x11
    6b60:	88 23       	and	r24, r24
    6b62:	69 f0       	breq	.+26     	; 0x6b7e <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6b64:	c8 01       	movw	r24, r16
    6b66:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6b6a:	88 23       	and	r24, r24
    6b6c:	11 f0       	breq	.+4      	; 0x6b72 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    6b6e:	0e 94 77 38 	call	0x70ee	; 0x70ee <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    6b72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6b74:	81 50       	subi	r24, 0x01	; 1
    6b76:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    6b78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6b7a:	18 16       	cp	r1, r24
    6b7c:	84 f3       	brlt	.-32     	; 0x6b5e <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    6b7e:	8f ef       	ldi	r24, 0xFF	; 255
    6b80:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    6b82:	0f 90       	pop	r0
    6b84:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    6b86:	0f b6       	in	r0, 0x3f	; 63
    6b88:	f8 94       	cli
    6b8a:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6b8c:	8e 01       	movw	r16, r28
    6b8e:	08 5f       	subi	r16, 0xF8	; 248
    6b90:	1f 4f       	sbci	r17, 0xFF	; 255
    6b92:	0d c0       	rjmp	.+26     	; 0x6bae <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6b94:	88 85       	ldd	r24, Y+8	; 0x08
    6b96:	88 23       	and	r24, r24
    6b98:	69 f0       	breq	.+26     	; 0x6bb4 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6b9a:	c8 01       	movw	r24, r16
    6b9c:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6ba0:	88 23       	and	r24, r24
    6ba2:	11 f0       	breq	.+4      	; 0x6ba8 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    6ba4:	0e 94 77 38 	call	0x70ee	; 0x70ee <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    6ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6baa:	81 50       	subi	r24, 0x01	; 1
    6bac:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    6bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bb0:	18 16       	cp	r1, r24
    6bb2:	84 f3       	brlt	.-32     	; 0x6b94 <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    6bb4:	8f ef       	ldi	r24, 0xFF	; 255
    6bb6:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    6bb8:	0f 90       	pop	r0
    6bba:	0f be       	out	0x3f, r0	; 63
}
    6bbc:	df 91       	pop	r29
    6bbe:	cf 91       	pop	r28
    6bc0:	1f 91       	pop	r17
    6bc2:	0f 91       	pop	r16
    6bc4:	08 95       	ret

00006bc6 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    6bc6:	7f 92       	push	r7
    6bc8:	8f 92       	push	r8
    6bca:	9f 92       	push	r9
    6bcc:	af 92       	push	r10
    6bce:	bf 92       	push	r11
    6bd0:	cf 92       	push	r12
    6bd2:	df 92       	push	r13
    6bd4:	ef 92       	push	r14
    6bd6:	ff 92       	push	r15
    6bd8:	0f 93       	push	r16
    6bda:	1f 93       	push	r17
    6bdc:	df 93       	push	r29
    6bde:	cf 93       	push	r28
    6be0:	00 d0       	rcall	.+0      	; 0x6be2 <xQueueGenericReceive+0x1c>
    6be2:	00 d0       	rcall	.+0      	; 0x6be4 <xQueueGenericReceive+0x1e>
    6be4:	0f 92       	push	r0
    6be6:	cd b7       	in	r28, 0x3d	; 61
    6be8:	de b7       	in	r29, 0x3e	; 62
    6bea:	8c 01       	movw	r16, r24
    6bec:	96 2e       	mov	r9, r22
    6bee:	87 2e       	mov	r8, r23
    6bf0:	5d 83       	std	Y+5, r21	; 0x05
    6bf2:	4c 83       	std	Y+4, r20	; 0x04
    6bf4:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6bf6:	91 e1       	ldi	r25, 0x11	; 17
    6bf8:	c9 2e       	mov	r12, r25
    6bfa:	d1 2c       	mov	r13, r1
    6bfc:	c0 0e       	add	r12, r16
    6bfe:	d1 1e       	adc	r13, r17
    6c00:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6c02:	7e 01       	movw	r14, r28
    6c04:	08 94       	sec
    6c06:	e1 1c       	adc	r14, r1
    6c08:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6c0a:	84 e0       	ldi	r24, 0x04	; 4
    6c0c:	a8 2e       	mov	r10, r24
    6c0e:	b1 2c       	mov	r11, r1
    6c10:	ac 0e       	add	r10, r28
    6c12:	bd 1e       	adc	r11, r29
    6c14:	01 c0       	rjmp	.+2      	; 0x6c18 <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6c16:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6c18:	0f b6       	in	r0, 0x3f	; 63
    6c1a:	f8 94       	cli
    6c1c:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    6c1e:	f8 01       	movw	r30, r16
    6c20:	82 8d       	ldd	r24, Z+26	; 0x1a
    6c22:	88 23       	and	r24, r24
    6c24:	09 f4       	brne	.+2      	; 0x6c28 <xQueueGenericReceive+0x62>
    6c26:	3e c0       	rjmp	.+124    	; 0x6ca4 <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    6c28:	e6 80       	ldd	r14, Z+6	; 0x06
    6c2a:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    6c2c:	40 81       	ld	r20, Z
    6c2e:	51 81       	ldd	r21, Z+1	; 0x01
    6c30:	41 15       	cp	r20, r1
    6c32:	51 05       	cpc	r21, r1
    6c34:	b1 f0       	breq	.+44     	; 0x6c62 <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    6c36:	84 8d       	ldd	r24, Z+28	; 0x1c
    6c38:	97 01       	movw	r18, r14
    6c3a:	28 0f       	add	r18, r24
    6c3c:	31 1d       	adc	r19, r1
    6c3e:	37 83       	std	Z+7, r19	; 0x07
    6c40:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    6c42:	82 81       	ldd	r24, Z+2	; 0x02
    6c44:	93 81       	ldd	r25, Z+3	; 0x03
    6c46:	28 17       	cp	r18, r24
    6c48:	39 07       	cpc	r19, r25
    6c4a:	10 f0       	brcs	.+4      	; 0x6c50 <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    6c4c:	57 83       	std	Z+7, r21	; 0x07
    6c4e:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    6c50:	f8 01       	movw	r30, r16
    6c52:	44 8d       	ldd	r20, Z+28	; 0x1c
    6c54:	66 81       	ldd	r22, Z+6	; 0x06
    6c56:	77 81       	ldd	r23, Z+7	; 0x07
    6c58:	89 2d       	mov	r24, r9
    6c5a:	98 2d       	mov	r25, r8
    6c5c:	50 e0       	ldi	r21, 0x00	; 0
    6c5e:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    6c62:	77 20       	and	r7, r7
    6c64:	71 f4       	brne	.+28     	; 0x6c82 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    6c66:	f8 01       	movw	r30, r16
    6c68:	82 8d       	ldd	r24, Z+26	; 0x1a
    6c6a:	81 50       	subi	r24, 0x01	; 1
    6c6c:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6c6e:	80 85       	ldd	r24, Z+8	; 0x08
    6c70:	88 23       	and	r24, r24
    6c72:	a1 f0       	breq	.+40     	; 0x6c9c <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    6c74:	c8 01       	movw	r24, r16
    6c76:	08 96       	adiw	r24, 0x08	; 8
    6c78:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6c7c:	81 30       	cpi	r24, 0x01	; 1
    6c7e:	71 f4       	brne	.+28     	; 0x6c9c <xQueueGenericReceive+0xd6>
    6c80:	0b c0       	rjmp	.+22     	; 0x6c98 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    6c82:	f8 01       	movw	r30, r16
    6c84:	f7 82       	std	Z+7, r15	; 0x07
    6c86:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6c88:	81 89       	ldd	r24, Z+17	; 0x11
    6c8a:	88 23       	and	r24, r24
    6c8c:	39 f0       	breq	.+14     	; 0x6c9c <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6c8e:	c6 01       	movw	r24, r12
    6c90:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6c94:	88 23       	and	r24, r24
    6c96:	11 f0       	breq	.+4      	; 0x6c9c <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    6c98:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    6c9c:	0f 90       	pop	r0
    6c9e:	0f be       	out	0x3f, r0	; 63
    6ca0:	81 e0       	ldi	r24, 0x01	; 1
    6ca2:	4a c0       	rjmp	.+148    	; 0x6d38 <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    6ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ca8:	89 2b       	or	r24, r25
    6caa:	19 f4       	brne	.+6      	; 0x6cb2 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6cac:	0f 90       	pop	r0
    6cae:	0f be       	out	0x3f, r0	; 63
    6cb0:	42 c0       	rjmp	.+132    	; 0x6d36 <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    6cb2:	22 23       	and	r18, r18
    6cb4:	19 f4       	brne	.+6      	; 0x6cbc <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6cb6:	c7 01       	movw	r24, r14
    6cb8:	0e 94 2e 38 	call	0x705c	; 0x705c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    6cbc:	0f 90       	pop	r0
    6cbe:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6cc0:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6cc4:	0f b6       	in	r0, 0x3f	; 63
    6cc6:	f8 94       	cli
    6cc8:	0f 92       	push	r0
    6cca:	f8 01       	movw	r30, r16
    6ccc:	85 8d       	ldd	r24, Z+29	; 0x1d
    6cce:	8f 3f       	cpi	r24, 0xFF	; 255
    6cd0:	09 f4       	brne	.+2      	; 0x6cd4 <xQueueGenericReceive+0x10e>
    6cd2:	15 8e       	std	Z+29, r1	; 0x1d
    6cd4:	f8 01       	movw	r30, r16
    6cd6:	86 8d       	ldd	r24, Z+30	; 0x1e
    6cd8:	8f 3f       	cpi	r24, 0xFF	; 255
    6cda:	09 f4       	brne	.+2      	; 0x6cde <xQueueGenericReceive+0x118>
    6cdc:	16 8e       	std	Z+30, r1	; 0x1e
    6cde:	0f 90       	pop	r0
    6ce0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6ce2:	c7 01       	movw	r24, r14
    6ce4:	b5 01       	movw	r22, r10
    6ce6:	0e 94 39 38 	call	0x7072	; 0x7072 <xTaskCheckForTimeOut>
    6cea:	88 23       	and	r24, r24
    6cec:	f9 f4       	brne	.+62     	; 0x6d2c <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    6cee:	0f b6       	in	r0, 0x3f	; 63
    6cf0:	f8 94       	cli
    6cf2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    6cf4:	f8 01       	movw	r30, r16
    6cf6:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    6cf8:	0f 90       	pop	r0
    6cfa:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6cfc:	88 23       	and	r24, r24
    6cfe:	81 f4       	brne	.+32     	; 0x6d20 <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6d00:	6c 81       	ldd	r22, Y+4	; 0x04
    6d02:	7d 81       	ldd	r23, Y+5	; 0x05
    6d04:	c6 01       	movw	r24, r12
    6d06:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    6d0a:	c8 01       	movw	r24, r16
    6d0c:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    6d10:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
    6d14:	88 23       	and	r24, r24
    6d16:	09 f0       	breq	.+2      	; 0x6d1a <xQueueGenericReceive+0x154>
    6d18:	7e cf       	rjmp	.-260    	; 0x6c16 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    6d1a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
    6d1e:	7b cf       	rjmp	.-266    	; 0x6c16 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6d20:	c8 01       	movw	r24, r16
    6d22:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6d26:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
    6d2a:	75 cf       	rjmp	.-278    	; 0x6c16 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    6d2c:	c8 01       	movw	r24, r16
    6d2e:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6d32:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
    6d36:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    6d38:	0f 90       	pop	r0
    6d3a:	0f 90       	pop	r0
    6d3c:	0f 90       	pop	r0
    6d3e:	0f 90       	pop	r0
    6d40:	0f 90       	pop	r0
    6d42:	cf 91       	pop	r28
    6d44:	df 91       	pop	r29
    6d46:	1f 91       	pop	r17
    6d48:	0f 91       	pop	r16
    6d4a:	ff 90       	pop	r15
    6d4c:	ef 90       	pop	r14
    6d4e:	df 90       	pop	r13
    6d50:	cf 90       	pop	r12
    6d52:	bf 90       	pop	r11
    6d54:	af 90       	pop	r10
    6d56:	9f 90       	pop	r9
    6d58:	8f 90       	pop	r8
    6d5a:	7f 90       	pop	r7
    6d5c:	08 95       	ret

00006d5e <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    6d5e:	7f 92       	push	r7
    6d60:	8f 92       	push	r8
    6d62:	9f 92       	push	r9
    6d64:	af 92       	push	r10
    6d66:	bf 92       	push	r11
    6d68:	cf 92       	push	r12
    6d6a:	df 92       	push	r13
    6d6c:	ef 92       	push	r14
    6d6e:	ff 92       	push	r15
    6d70:	0f 93       	push	r16
    6d72:	1f 93       	push	r17
    6d74:	df 93       	push	r29
    6d76:	cf 93       	push	r28
    6d78:	00 d0       	rcall	.+0      	; 0x6d7a <xQueueGenericSend+0x1c>
    6d7a:	00 d0       	rcall	.+0      	; 0x6d7c <xQueueGenericSend+0x1e>
    6d7c:	0f 92       	push	r0
    6d7e:	cd b7       	in	r28, 0x3d	; 61
    6d80:	de b7       	in	r29, 0x3e	; 62
    6d82:	8c 01       	movw	r16, r24
    6d84:	6b 01       	movw	r12, r22
    6d86:	5d 83       	std	Y+5, r21	; 0x05
    6d88:	4c 83       	std	Y+4, r20	; 0x04
    6d8a:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6d8c:	48 e0       	ldi	r20, 0x08	; 8
    6d8e:	e4 2e       	mov	r14, r20
    6d90:	f1 2c       	mov	r15, r1
    6d92:	e8 0e       	add	r14, r24
    6d94:	f9 1e       	adc	r15, r25
    6d96:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6d98:	5e 01       	movw	r10, r28
    6d9a:	08 94       	sec
    6d9c:	a1 1c       	adc	r10, r1
    6d9e:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6da0:	34 e0       	ldi	r19, 0x04	; 4
    6da2:	83 2e       	mov	r8, r19
    6da4:	91 2c       	mov	r9, r1
    6da6:	8c 0e       	add	r8, r28
    6da8:	9d 1e       	adc	r9, r29
    6daa:	01 c0       	rjmp	.+2      	; 0x6dae <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6dac:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6dae:	0f b6       	in	r0, 0x3f	; 63
    6db0:	f8 94       	cli
    6db2:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    6db4:	f8 01       	movw	r30, r16
    6db6:	92 8d       	ldd	r25, Z+26	; 0x1a
    6db8:	83 8d       	ldd	r24, Z+27	; 0x1b
    6dba:	98 17       	cp	r25, r24
    6dbc:	a8 f4       	brcc	.+42     	; 0x6de8 <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6dbe:	c8 01       	movw	r24, r16
    6dc0:	b6 01       	movw	r22, r12
    6dc2:	47 2d       	mov	r20, r7
    6dc4:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6dc8:	f8 01       	movw	r30, r16
    6dca:	81 89       	ldd	r24, Z+17	; 0x11
    6dcc:	88 23       	and	r24, r24
    6dce:	41 f0       	breq	.+16     	; 0x6de0 <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    6dd0:	c8 01       	movw	r24, r16
    6dd2:	41 96       	adiw	r24, 0x11	; 17
    6dd4:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <xTaskRemoveFromEventList>
    6dd8:	81 30       	cpi	r24, 0x01	; 1
    6dda:	11 f4       	brne	.+4      	; 0x6de0 <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    6ddc:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    6de0:	0f 90       	pop	r0
    6de2:	0f be       	out	0x3f, r0	; 63
    6de4:	81 e0       	ldi	r24, 0x01	; 1
    6de6:	4c c0       	rjmp	.+152    	; 0x6e80 <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    6de8:	8c 81       	ldd	r24, Y+4	; 0x04
    6dea:	9d 81       	ldd	r25, Y+5	; 0x05
    6dec:	89 2b       	or	r24, r25
    6dee:	19 f4       	brne	.+6      	; 0x6df6 <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6df0:	0f 90       	pop	r0
    6df2:	0f be       	out	0x3f, r0	; 63
    6df4:	44 c0       	rjmp	.+136    	; 0x6e7e <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    6df6:	22 23       	and	r18, r18
    6df8:	19 f4       	brne	.+6      	; 0x6e00 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6dfa:	c5 01       	movw	r24, r10
    6dfc:	0e 94 2e 38 	call	0x705c	; 0x705c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    6e00:	0f 90       	pop	r0
    6e02:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6e04:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6e08:	0f b6       	in	r0, 0x3f	; 63
    6e0a:	f8 94       	cli
    6e0c:	0f 92       	push	r0
    6e0e:	f8 01       	movw	r30, r16
    6e10:	85 8d       	ldd	r24, Z+29	; 0x1d
    6e12:	8f 3f       	cpi	r24, 0xFF	; 255
    6e14:	09 f4       	brne	.+2      	; 0x6e18 <xQueueGenericSend+0xba>
    6e16:	15 8e       	std	Z+29, r1	; 0x1d
    6e18:	f8 01       	movw	r30, r16
    6e1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    6e1c:	8f 3f       	cpi	r24, 0xFF	; 255
    6e1e:	09 f4       	brne	.+2      	; 0x6e22 <xQueueGenericSend+0xc4>
    6e20:	16 8e       	std	Z+30, r1	; 0x1e
    6e22:	0f 90       	pop	r0
    6e24:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6e26:	c5 01       	movw	r24, r10
    6e28:	b4 01       	movw	r22, r8
    6e2a:	0e 94 39 38 	call	0x7072	; 0x7072 <xTaskCheckForTimeOut>
    6e2e:	88 23       	and	r24, r24
    6e30:	09 f5       	brne	.+66     	; 0x6e74 <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    6e32:	0f b6       	in	r0, 0x3f	; 63
    6e34:	f8 94       	cli
    6e36:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    6e38:	f8 01       	movw	r30, r16
    6e3a:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    6e3c:	0f 90       	pop	r0
    6e3e:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6e40:	f8 01       	movw	r30, r16
    6e42:	83 8d       	ldd	r24, Z+27	; 0x1b
    6e44:	98 17       	cp	r25, r24
    6e46:	81 f4       	brne	.+32     	; 0x6e68 <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6e48:	6c 81       	ldd	r22, Y+4	; 0x04
    6e4a:	7d 81       	ldd	r23, Y+5	; 0x05
    6e4c:	c7 01       	movw	r24, r14
    6e4e:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    6e52:	c8 01       	movw	r24, r16
    6e54:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    6e58:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
    6e5c:	88 23       	and	r24, r24
    6e5e:	09 f0       	breq	.+2      	; 0x6e62 <xQueueGenericSend+0x104>
    6e60:	a5 cf       	rjmp	.-182    	; 0x6dac <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    6e62:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
    6e66:	a2 cf       	rjmp	.-188    	; 0x6dac <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6e68:	c8 01       	movw	r24, r16
    6e6a:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6e6e:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
    6e72:	9c cf       	rjmp	.-200    	; 0x6dac <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6e74:	c8 01       	movw	r24, r16
    6e76:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6e7a:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
    6e7e:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    6e80:	0f 90       	pop	r0
    6e82:	0f 90       	pop	r0
    6e84:	0f 90       	pop	r0
    6e86:	0f 90       	pop	r0
    6e88:	0f 90       	pop	r0
    6e8a:	cf 91       	pop	r28
    6e8c:	df 91       	pop	r29
    6e8e:	1f 91       	pop	r17
    6e90:	0f 91       	pop	r16
    6e92:	ff 90       	pop	r15
    6e94:	ef 90       	pop	r14
    6e96:	df 90       	pop	r13
    6e98:	cf 90       	pop	r12
    6e9a:	bf 90       	pop	r11
    6e9c:	af 90       	pop	r10
    6e9e:	9f 90       	pop	r9
    6ea0:	8f 90       	pop	r8
    6ea2:	7f 90       	pop	r7
    6ea4:	08 95       	ret

00006ea6 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    6ea6:	af 92       	push	r10
    6ea8:	bf 92       	push	r11
    6eaa:	cf 92       	push	r12
    6eac:	df 92       	push	r13
    6eae:	ef 92       	push	r14
    6eb0:	ff 92       	push	r15
    6eb2:	0f 93       	push	r16
    6eb4:	1f 93       	push	r17
    6eb6:	cf 93       	push	r28
    6eb8:	df 93       	push	r29
    6eba:	b8 2e       	mov	r11, r24
    6ebc:	a6 2e       	mov	r10, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    6ebe:	88 23       	and	r24, r24
    6ec0:	09 f4       	brne	.+2      	; 0x6ec4 <xQueueCreate+0x1e>
    6ec2:	42 c0       	rjmp	.+132    	; 0x6f48 <xQueueCreate+0xa2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    6ec4:	8f e1       	ldi	r24, 0x1F	; 31
    6ec6:	90 e0       	ldi	r25, 0x00	; 0
    6ec8:	0e 94 db 32 	call	0x65b6	; 0x65b6 <pvPortMalloc>
    6ecc:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    6ece:	00 97       	sbiw	r24, 0x00	; 0
    6ed0:	d9 f1       	breq	.+118    	; 0x6f48 <xQueueCreate+0xa2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    6ed2:	eb 2c       	mov	r14, r11
    6ed4:	ff 24       	eor	r15, r15
    6ed6:	ca 2c       	mov	r12, r10
    6ed8:	dd 24       	eor	r13, r13
    6eda:	ce 9c       	mul	r12, r14
    6edc:	80 01       	movw	r16, r0
    6ede:	cf 9c       	mul	r12, r15
    6ee0:	10 0d       	add	r17, r0
    6ee2:	de 9c       	mul	r13, r14
    6ee4:	10 0d       	add	r17, r0
    6ee6:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    6ee8:	c8 01       	movw	r24, r16
    6eea:	01 96       	adiw	r24, 0x01	; 1
    6eec:	0e 94 db 32 	call	0x65b6	; 0x65b6 <pvPortMalloc>
    6ef0:	9c 01       	movw	r18, r24
    6ef2:	99 83       	std	Y+1, r25	; 0x01
    6ef4:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    6ef6:	00 97       	sbiw	r24, 0x00	; 0
    6ef8:	21 f1       	breq	.+72     	; 0x6f42 <xQueueCreate+0x9c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    6efa:	08 0f       	add	r16, r24
    6efc:	19 1f       	adc	r17, r25
    6efe:	1b 83       	std	Y+3, r17	; 0x03
    6f00:	0a 83       	std	Y+2, r16	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    6f02:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    6f04:	9d 83       	std	Y+5, r25	; 0x05
    6f06:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    6f08:	08 94       	sec
    6f0a:	e1 08       	sbc	r14, r1
    6f0c:	f1 08       	sbc	r15, r1
    6f0e:	ec 9c       	mul	r14, r12
    6f10:	c0 01       	movw	r24, r0
    6f12:	ed 9c       	mul	r14, r13
    6f14:	90 0d       	add	r25, r0
    6f16:	fc 9c       	mul	r15, r12
    6f18:	90 0d       	add	r25, r0
    6f1a:	11 24       	eor	r1, r1
    6f1c:	28 0f       	add	r18, r24
    6f1e:	39 1f       	adc	r19, r25
    6f20:	3f 83       	std	Y+7, r19	; 0x07
    6f22:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    6f24:	bb 8e       	std	Y+27, r11	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    6f26:	ac 8e       	std	Y+28, r10	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    6f28:	8f ef       	ldi	r24, 0xFF	; 255
    6f2a:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    6f2c:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    6f2e:	ce 01       	movw	r24, r28
    6f30:	08 96       	adiw	r24, 0x08	; 8
    6f32:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    6f36:	ce 01       	movw	r24, r28
    6f38:	41 96       	adiw	r24, 0x11	; 17
    6f3a:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
    6f3e:	9e 01       	movw	r18, r28
    6f40:	05 c0       	rjmp	.+10     	; 0x6f4c <xQueueCreate+0xa6>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    6f42:	ce 01       	movw	r24, r28
    6f44:	0e 94 cb 32 	call	0x6596	; 0x6596 <vPortFree>
    6f48:	20 e0       	ldi	r18, 0x00	; 0
    6f4a:	30 e0       	ldi	r19, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    6f4c:	c9 01       	movw	r24, r18
    6f4e:	df 91       	pop	r29
    6f50:	cf 91       	pop	r28
    6f52:	1f 91       	pop	r17
    6f54:	0f 91       	pop	r16
    6f56:	ff 90       	pop	r15
    6f58:	ef 90       	pop	r14
    6f5a:	df 90       	pop	r13
    6f5c:	cf 90       	pop	r12
    6f5e:	bf 90       	pop	r11
    6f60:	af 90       	pop	r10
    6f62:	08 95       	ret

00006f64 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    6f64:	1f 93       	push	r17
    6f66:	16 2f       	mov	r17, r22
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    6f68:	60 e0       	ldi	r22, 0x00	; 0
    6f6a:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <xQueueCreate>
    6f6e:	fc 01       	movw	r30, r24

		if( pxHandle != NULL )
    6f70:	00 97       	sbiw	r24, 0x00	; 0
    6f72:	09 f0       	breq	.+2      	; 0x6f76 <xQueueCreateCountingSemaphore+0x12>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    6f74:	12 8f       	std	Z+26, r17	; 0x1a
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
	}
    6f76:	cf 01       	movw	r24, r30
    6f78:	1f 91       	pop	r17
    6f7a:	08 95       	ret

00006f7c <xTaskIsTaskSuspended>:
#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    6f7c:	fc 01       	movw	r30, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    6f7e:	82 85       	ldd	r24, Z+10	; 0x0a
    6f80:	93 85       	ldd	r25, Z+11	; 0x0b
    6f82:	86 53       	subi	r24, 0x36	; 54
    6f84:	96 40       	sbci	r25, 0x06	; 6
    6f86:	59 f4       	brne	.+22     	; 0x6f9e <xTaskIsTaskSuspended+0x22>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    6f88:	84 89       	ldd	r24, Z+20	; 0x14
    6f8a:	95 89       	ldd	r25, Z+21	; 0x15
    6f8c:	26 e0       	ldi	r18, 0x06	; 6
    6f8e:	84 32       	cpi	r24, 0x24	; 36
    6f90:	92 07       	cpc	r25, r18
    6f92:	29 f0       	breq	.+10     	; 0x6f9e <xTaskIsTaskSuspended+0x22>
    6f94:	20 e0       	ldi	r18, 0x00	; 0
    6f96:	89 2b       	or	r24, r25
    6f98:	19 f4       	brne	.+6      	; 0x6fa0 <xTaskIsTaskSuspended+0x24>
    6f9a:	21 e0       	ldi	r18, 0x01	; 1
    6f9c:	01 c0       	rjmp	.+2      	; 0x6fa0 <xTaskIsTaskSuspended+0x24>
    6f9e:	20 e0       	ldi	r18, 0x00	; 0
				}
			}
		}

		return xReturn;
	}
    6fa0:	82 2f       	mov	r24, r18
    6fa2:	08 95       	ret

00006fa4 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    6fa4:	80 91 e2 05 	lds	r24, 0x05E2
    6fa8:	8f 5f       	subi	r24, 0xFF	; 255
    6faa:	80 93 e2 05 	sts	0x05E2, r24
}
    6fae:	08 95       	ret

00006fb0 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    6fb0:	0f b6       	in	r0, 0x3f	; 63
    6fb2:	f8 94       	cli
    6fb4:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    6fb6:	20 91 e0 05 	lds	r18, 0x05E0
    6fba:	30 91 e1 05 	lds	r19, 0x05E1
	}
	taskEXIT_CRITICAL();
    6fbe:	0f 90       	pop	r0
    6fc0:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    6fc2:	c9 01       	movw	r24, r18
    6fc4:	08 95       	ret

00006fc6 <xTaskGetTickCountFromISR>:
{
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	xReturn = xTickCount;
    6fc6:	20 91 e0 05 	lds	r18, 0x05E0
    6fca:	30 91 e1 05 	lds	r19, 0x05E1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    6fce:	c9 01       	movw	r24, r18
    6fd0:	08 95       	ret

00006fd2 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    6fd2:	80 91 e5 05 	lds	r24, 0x05E5
}
    6fd6:	08 95       	ret

00006fd8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    6fd8:	80 91 e2 05 	lds	r24, 0x05E2
    6fdc:	88 23       	and	r24, r24
    6fde:	51 f0       	breq	.+20     	; 0x6ff4 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    6fe0:	81 e0       	ldi	r24, 0x01	; 1
    6fe2:	80 93 de 05 	sts	0x05DE, r24
    6fe6:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    6fe8:	80 91 e3 05 	lds	r24, 0x05E3
    6fec:	81 50       	subi	r24, 0x01	; 1
    6fee:	80 93 e3 05 	sts	0x05E3, r24
    6ff2:	01 c0       	rjmp	.+2      	; 0x6ff6 <vTaskSwitchContext+0x1e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    6ff4:	99 e0       	ldi	r25, 0x09	; 9
    6ff6:	e0 91 e3 05 	lds	r30, 0x05E3
    6ffa:	e9 9f       	mul	r30, r25
    6ffc:	f0 01       	movw	r30, r0
    6ffe:	11 24       	eor	r1, r1
    7000:	e6 51       	subi	r30, 0x16	; 22
    7002:	fa 4f       	sbci	r31, 0xFA	; 250
    7004:	80 81       	ld	r24, Z
    7006:	88 23       	and	r24, r24
    7008:	79 f3       	breq	.-34     	; 0x6fe8 <vTaskSwitchContext+0x10>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    700a:	90 91 e3 05 	lds	r25, 0x05E3
    700e:	89 e0       	ldi	r24, 0x09	; 9
    7010:	98 9f       	mul	r25, r24
    7012:	d0 01       	movw	r26, r0
    7014:	11 24       	eor	r1, r1
    7016:	a6 51       	subi	r26, 0x16	; 22
    7018:	ba 4f       	sbci	r27, 0xFA	; 250
    701a:	11 96       	adiw	r26, 0x01	; 1
    701c:	ed 91       	ld	r30, X+
    701e:	fc 91       	ld	r31, X
    7020:	12 97       	sbiw	r26, 0x02	; 2
    7022:	02 80       	ldd	r0, Z+2	; 0x02
    7024:	f3 81       	ldd	r31, Z+3	; 0x03
    7026:	e0 2d       	mov	r30, r0
    7028:	12 96       	adiw	r26, 0x02	; 2
    702a:	fc 93       	st	X, r31
    702c:	ee 93       	st	-X, r30
    702e:	11 97       	sbiw	r26, 0x01	; 1
    7030:	cd 01       	movw	r24, r26
    7032:	03 96       	adiw	r24, 0x03	; 3
    7034:	e8 17       	cp	r30, r24
    7036:	f9 07       	cpc	r31, r25
    7038:	31 f4       	brne	.+12     	; 0x7046 <vTaskSwitchContext+0x6e>
    703a:	82 81       	ldd	r24, Z+2	; 0x02
    703c:	93 81       	ldd	r25, Z+3	; 0x03
    703e:	12 96       	adiw	r26, 0x02	; 2
    7040:	9c 93       	st	X, r25
    7042:	8e 93       	st	-X, r24
    7044:	11 97       	sbiw	r26, 0x01	; 1
    7046:	11 96       	adiw	r26, 0x01	; 1
    7048:	ed 91       	ld	r30, X+
    704a:	fc 91       	ld	r31, X
    704c:	12 97       	sbiw	r26, 0x02	; 2
    704e:	86 81       	ldd	r24, Z+6	; 0x06
    7050:	97 81       	ldd	r25, Z+7	; 0x07
    7052:	90 93 dd 05 	sts	0x05DD, r25
    7056:	80 93 dc 05 	sts	0x05DC, r24
    705a:	08 95       	ret

0000705c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    705c:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    705e:	80 91 df 05 	lds	r24, 0x05DF
    7062:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    7064:	80 91 e0 05 	lds	r24, 0x05E0
    7068:	90 91 e1 05 	lds	r25, 0x05E1
    706c:	92 83       	std	Z+2, r25	; 0x02
    706e:	81 83       	std	Z+1, r24	; 0x01
}
    7070:	08 95       	ret

00007072 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    7072:	fc 01       	movw	r30, r24
    7074:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    7076:	0f b6       	in	r0, 0x3f	; 63
    7078:	f8 94       	cli
    707a:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    707c:	4d 91       	ld	r20, X+
    707e:	5c 91       	ld	r21, X
    7080:	11 97       	sbiw	r26, 0x01	; 1
    7082:	8f ef       	ldi	r24, 0xFF	; 255
    7084:	4f 3f       	cpi	r20, 0xFF	; 255
    7086:	58 07       	cpc	r21, r24
    7088:	61 f1       	breq	.+88     	; 0x70e2 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    708a:	90 91 df 05 	lds	r25, 0x05DF
    708e:	80 81       	ld	r24, Z
    7090:	98 17       	cp	r25, r24
    7092:	49 f0       	breq	.+18     	; 0x70a6 <xTaskCheckForTimeOut+0x34>
    7094:	20 91 e0 05 	lds	r18, 0x05E0
    7098:	30 91 e1 05 	lds	r19, 0x05E1
    709c:	81 81       	ldd	r24, Z+1	; 0x01
    709e:	92 81       	ldd	r25, Z+2	; 0x02
    70a0:	28 17       	cp	r18, r24
    70a2:	39 07       	cpc	r19, r25
    70a4:	00 f5       	brcc	.+64     	; 0x70e6 <xTaskCheckForTimeOut+0x74>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    70a6:	80 91 e0 05 	lds	r24, 0x05E0
    70aa:	90 91 e1 05 	lds	r25, 0x05E1
    70ae:	21 81       	ldd	r18, Z+1	; 0x01
    70b0:	32 81       	ldd	r19, Z+2	; 0x02
    70b2:	82 1b       	sub	r24, r18
    70b4:	93 0b       	sbc	r25, r19
    70b6:	84 17       	cp	r24, r20
    70b8:	95 07       	cpc	r25, r21
    70ba:	a8 f4       	brcc	.+42     	; 0x70e6 <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    70bc:	80 91 e0 05 	lds	r24, 0x05E0
    70c0:	90 91 e1 05 	lds	r25, 0x05E1
    70c4:	28 1b       	sub	r18, r24
    70c6:	39 0b       	sbc	r19, r25
    70c8:	24 0f       	add	r18, r20
    70ca:	35 1f       	adc	r19, r21
    70cc:	2d 93       	st	X+, r18
    70ce:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    70d0:	80 91 df 05 	lds	r24, 0x05DF
    70d4:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    70d6:	80 91 e0 05 	lds	r24, 0x05E0
    70da:	90 91 e1 05 	lds	r25, 0x05E1
    70de:	92 83       	std	Z+2, r25	; 0x02
    70e0:	81 83       	std	Z+1, r24	; 0x01
    70e2:	80 e0       	ldi	r24, 0x00	; 0
    70e4:	01 c0       	rjmp	.+2      	; 0x70e8 <xTaskCheckForTimeOut+0x76>
    70e6:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    70e8:	0f 90       	pop	r0
    70ea:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    70ec:	08 95       	ret

000070ee <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    70ee:	81 e0       	ldi	r24, 0x01	; 1
    70f0:	80 93 de 05 	sts	0x05DE, r24
}
    70f4:	08 95       	ret

000070f6 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    70f6:	0f 93       	push	r16
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	fc 01       	movw	r30, r24
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    7100:	05 80       	ldd	r0, Z+5	; 0x05
    7102:	f6 81       	ldd	r31, Z+6	; 0x06
    7104:	e0 2d       	mov	r30, r0
    7106:	06 81       	ldd	r16, Z+6	; 0x06
    7108:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    710a:	e8 01       	movw	r28, r16
    710c:	2c 96       	adiw	r28, 0x0c	; 12
    710e:	ce 01       	movw	r24, r28
    7110:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7114:	80 91 e2 05 	lds	r24, 0x05E2
    7118:	88 23       	and	r24, r24
    711a:	a9 f4       	brne	.+42     	; 0x7146 <xTaskRemoveFromEventList+0x50>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    711c:	e8 01       	movw	r28, r16
    711e:	22 96       	adiw	r28, 0x02	; 2
    7120:	ce 01       	movw	r24, r28
    7122:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    7126:	d8 01       	movw	r26, r16
    7128:	56 96       	adiw	r26, 0x16	; 22
    712a:	9c 91       	ld	r25, X
    712c:	80 91 e3 05 	lds	r24, 0x05E3
    7130:	89 17       	cp	r24, r25
    7132:	10 f4       	brcc	.+4      	; 0x7138 <xTaskRemoveFromEventList+0x42>
    7134:	90 93 e3 05 	sts	0x05E3, r25
    7138:	89 e0       	ldi	r24, 0x09	; 9
    713a:	98 9f       	mul	r25, r24
    713c:	c0 01       	movw	r24, r0
    713e:	11 24       	eor	r1, r1
    7140:	86 51       	subi	r24, 0x16	; 22
    7142:	9a 4f       	sbci	r25, 0xFA	; 250
    7144:	02 c0       	rjmp	.+4      	; 0x714a <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    7146:	84 e2       	ldi	r24, 0x24	; 36
    7148:	96 e0       	ldi	r25, 0x06	; 6
    714a:	be 01       	movw	r22, r28
    714c:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7150:	e0 91 dc 05 	lds	r30, 0x05DC
    7154:	f0 91 dd 05 	lds	r31, 0x05DD
    7158:	20 e0       	ldi	r18, 0x00	; 0
    715a:	d8 01       	movw	r26, r16
    715c:	56 96       	adiw	r26, 0x16	; 22
    715e:	9c 91       	ld	r25, X
    7160:	86 89       	ldd	r24, Z+22	; 0x16
    7162:	98 17       	cp	r25, r24
    7164:	08 f0       	brcs	.+2      	; 0x7168 <xTaskRemoveFromEventList+0x72>
    7166:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    7168:	82 2f       	mov	r24, r18
    716a:	df 91       	pop	r29
    716c:	cf 91       	pop	r28
    716e:	1f 91       	pop	r17
    7170:	0f 91       	pop	r16
    7172:	08 95       	ret

00007174 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    7174:	ff 92       	push	r15
    7176:	0f 93       	push	r16
    7178:	1f 93       	push	r17
    717a:	cf 93       	push	r28
    717c:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    717e:	80 91 e2 05 	lds	r24, 0x05E2
    7182:	88 23       	and	r24, r24
    7184:	09 f0       	breq	.+2      	; 0x7188 <vTaskIncrementTick+0x14>
    7186:	8f c0       	rjmp	.+286    	; 0x72a6 <vTaskIncrementTick+0x132>
	{
		++xTickCount;
    7188:	80 91 e0 05 	lds	r24, 0x05E0
    718c:	90 91 e1 05 	lds	r25, 0x05E1
    7190:	01 96       	adiw	r24, 0x01	; 1
    7192:	90 93 e1 05 	sts	0x05E1, r25
    7196:	80 93 e0 05 	sts	0x05E0, r24
		if( xTickCount == ( portTickType ) 0U )
    719a:	80 91 e0 05 	lds	r24, 0x05E0
    719e:	90 91 e1 05 	lds	r25, 0x05E1
    71a2:	89 2b       	or	r24, r25
    71a4:	79 f5       	brne	.+94     	; 0x7204 <vTaskIncrementTick+0x90>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    71a6:	20 91 20 06 	lds	r18, 0x0620
    71aa:	30 91 21 06 	lds	r19, 0x0621
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    71ae:	80 91 22 06 	lds	r24, 0x0622
    71b2:	90 91 23 06 	lds	r25, 0x0623
    71b6:	90 93 21 06 	sts	0x0621, r25
    71ba:	80 93 20 06 	sts	0x0620, r24
			pxOverflowDelayedTaskList = pxTemp;
    71be:	30 93 23 06 	sts	0x0623, r19
    71c2:	20 93 22 06 	sts	0x0622, r18
			xNumOfOverflows++;
    71c6:	80 91 df 05 	lds	r24, 0x05DF
    71ca:	8f 5f       	subi	r24, 0xFF	; 255
    71cc:	80 93 df 05 	sts	0x05DF, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    71d0:	e0 91 20 06 	lds	r30, 0x0620
    71d4:	f0 91 21 06 	lds	r31, 0x0621
    71d8:	80 81       	ld	r24, Z
    71da:	88 23       	and	r24, r24
    71dc:	19 f4       	brne	.+6      	; 0x71e4 <vTaskIncrementTick+0x70>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    71de:	8f ef       	ldi	r24, 0xFF	; 255
    71e0:	9f ef       	ldi	r25, 0xFF	; 255
    71e2:	0c c0       	rjmp	.+24     	; 0x71fc <vTaskIncrementTick+0x88>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    71e4:	e0 91 20 06 	lds	r30, 0x0620
    71e8:	f0 91 21 06 	lds	r31, 0x0621
    71ec:	05 80       	ldd	r0, Z+5	; 0x05
    71ee:	f6 81       	ldd	r31, Z+6	; 0x06
    71f0:	e0 2d       	mov	r30, r0
    71f2:	06 80       	ldd	r0, Z+6	; 0x06
    71f4:	f7 81       	ldd	r31, Z+7	; 0x07
    71f6:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    71f8:	82 81       	ldd	r24, Z+2	; 0x02
    71fa:	93 81       	ldd	r25, Z+3	; 0x03
    71fc:	90 93 7e 01 	sts	0x017E, r25
    7200:	80 93 7d 01 	sts	0x017D, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    7204:	20 91 e0 05 	lds	r18, 0x05E0
    7208:	30 91 e1 05 	lds	r19, 0x05E1
    720c:	80 91 7d 01 	lds	r24, 0x017D
    7210:	90 91 7e 01 	lds	r25, 0x017E
    7214:	28 17       	cp	r18, r24
    7216:	39 07       	cpc	r19, r25
    7218:	08 f4       	brcc	.+2      	; 0x721c <vTaskIncrementTick+0xa8>
    721a:	4a c0       	rjmp	.+148    	; 0x72b0 <vTaskIncrementTick+0x13c>
    721c:	89 e0       	ldi	r24, 0x09	; 9
    721e:	f8 2e       	mov	r15, r24
    7220:	e0 91 20 06 	lds	r30, 0x0620
    7224:	f0 91 21 06 	lds	r31, 0x0621
    7228:	80 81       	ld	r24, Z
    722a:	88 23       	and	r24, r24
    722c:	39 f4       	brne	.+14     	; 0x723c <vTaskIncrementTick+0xc8>
    722e:	8f ef       	ldi	r24, 0xFF	; 255
    7230:	9f ef       	ldi	r25, 0xFF	; 255
    7232:	90 93 7e 01 	sts	0x017E, r25
    7236:	80 93 7d 01 	sts	0x017D, r24
    723a:	3a c0       	rjmp	.+116    	; 0x72b0 <vTaskIncrementTick+0x13c>
    723c:	e0 91 20 06 	lds	r30, 0x0620
    7240:	f0 91 21 06 	lds	r31, 0x0621
    7244:	05 80       	ldd	r0, Z+5	; 0x05
    7246:	f6 81       	ldd	r31, Z+6	; 0x06
    7248:	e0 2d       	mov	r30, r0
    724a:	c6 81       	ldd	r28, Z+6	; 0x06
    724c:	d7 81       	ldd	r29, Z+7	; 0x07
    724e:	2a 81       	ldd	r18, Y+2	; 0x02
    7250:	3b 81       	ldd	r19, Y+3	; 0x03
    7252:	80 91 e0 05 	lds	r24, 0x05E0
    7256:	90 91 e1 05 	lds	r25, 0x05E1
    725a:	82 17       	cp	r24, r18
    725c:	93 07       	cpc	r25, r19
    725e:	28 f4       	brcc	.+10     	; 0x726a <vTaskIncrementTick+0xf6>
    7260:	30 93 7e 01 	sts	0x017E, r19
    7264:	20 93 7d 01 	sts	0x017D, r18
    7268:	23 c0       	rjmp	.+70     	; 0x72b0 <vTaskIncrementTick+0x13c>
    726a:	8e 01       	movw	r16, r28
    726c:	0e 5f       	subi	r16, 0xFE	; 254
    726e:	1f 4f       	sbci	r17, 0xFF	; 255
    7270:	c8 01       	movw	r24, r16
    7272:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
    7276:	8c 89       	ldd	r24, Y+20	; 0x14
    7278:	9d 89       	ldd	r25, Y+21	; 0x15
    727a:	89 2b       	or	r24, r25
    727c:	21 f0       	breq	.+8      	; 0x7286 <vTaskIncrementTick+0x112>
    727e:	ce 01       	movw	r24, r28
    7280:	0c 96       	adiw	r24, 0x0c	; 12
    7282:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
    7286:	9e 89       	ldd	r25, Y+22	; 0x16
    7288:	80 91 e3 05 	lds	r24, 0x05E3
    728c:	89 17       	cp	r24, r25
    728e:	10 f4       	brcc	.+4      	; 0x7294 <vTaskIncrementTick+0x120>
    7290:	90 93 e3 05 	sts	0x05E3, r25
    7294:	9f 9d       	mul	r25, r15
    7296:	c0 01       	movw	r24, r0
    7298:	11 24       	eor	r1, r1
    729a:	86 51       	subi	r24, 0x16	; 22
    729c:	9a 4f       	sbci	r25, 0xFA	; 250
    729e:	b8 01       	movw	r22, r16
    72a0:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
    72a4:	bd cf       	rjmp	.-134    	; 0x7220 <vTaskIncrementTick+0xac>
	}
	else
	{
		++uxMissedTicks;
    72a6:	80 91 e4 05 	lds	r24, 0x05E4
    72aa:	8f 5f       	subi	r24, 0xFF	; 255
    72ac:	80 93 e4 05 	sts	0x05E4, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    72b0:	df 91       	pop	r29
    72b2:	cf 91       	pop	r28
    72b4:	1f 91       	pop	r17
    72b6:	0f 91       	pop	r16
    72b8:	ff 90       	pop	r15
    72ba:	08 95       	ret

000072bc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    72bc:	df 92       	push	r13
    72be:	ef 92       	push	r14
    72c0:	ff 92       	push	r15
    72c2:	0f 93       	push	r16
    72c4:	1f 93       	push	r17
    72c6:	cf 93       	push	r28
    72c8:	df 93       	push	r29
	portBASE_TYPE xYieldRequired = pdFALSE;
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    72ca:	ec 01       	movw	r28, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    72cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    72ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    72d0:	86 53       	subi	r24, 0x36	; 54
    72d2:	96 40       	sbci	r25, 0x06	; 6
    72d4:	91 f5       	brne	.+100    	; 0x733a <xTaskResumeFromISR+0x7e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    72d6:	8c 89       	ldd	r24, Y+20	; 0x14
    72d8:	9d 89       	ldd	r25, Y+21	; 0x15
    72da:	26 e0       	ldi	r18, 0x06	; 6
    72dc:	84 32       	cpi	r24, 0x24	; 36
    72de:	92 07       	cpc	r25, r18
    72e0:	61 f1       	breq	.+88     	; 0x733a <xTaskResumeFromISR+0x7e>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    72e2:	89 2b       	or	r24, r25
    72e4:	51 f5       	brne	.+84     	; 0x733a <xTaskResumeFromISR+0x7e>
    72e6:	33 c0       	rjmp	.+102    	; 0x734e <xTaskResumeFromISR+0x92>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    72e8:	de 88       	ldd	r13, Y+22	; 0x16
    72ea:	e0 91 dc 05 	lds	r30, 0x05DC
    72ee:	f0 91 dd 05 	lds	r31, 0x05DD
    72f2:	06 89       	ldd	r16, Z+22	; 0x16
				vListRemove(  &( pxTCB->xGenericListItem ) );
    72f4:	92 e0       	ldi	r25, 0x02	; 2
    72f6:	e9 2e       	mov	r14, r25
    72f8:	f1 2c       	mov	r15, r1
    72fa:	ec 0e       	add	r14, r28
    72fc:	fd 1e       	adc	r15, r29
    72fe:	c7 01       	movw	r24, r14
    7300:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    7304:	6e 89       	ldd	r22, Y+22	; 0x16
    7306:	80 91 e3 05 	lds	r24, 0x05E3
    730a:	86 17       	cp	r24, r22
    730c:	10 f4       	brcc	.+4      	; 0x7312 <xTaskResumeFromISR+0x56>
    730e:	60 93 e3 05 	sts	0x05E3, r22
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    7312:	10 e0       	ldi	r17, 0x00	; 0
    7314:	d0 16       	cp	r13, r16
    7316:	08 f0       	brcs	.+2      	; 0x731a <xTaskResumeFromISR+0x5e>
    7318:	11 e0       	ldi	r17, 0x01	; 1
				vListRemove(  &( pxTCB->xGenericListItem ) );
				prvAddTaskToReadyQueue( pxTCB );
    731a:	89 e0       	ldi	r24, 0x09	; 9
    731c:	68 9f       	mul	r22, r24
    731e:	c0 01       	movw	r24, r0
    7320:	11 24       	eor	r1, r1
    7322:	86 51       	subi	r24, 0x16	; 22
    7324:	9a 4f       	sbci	r25, 0xFA	; 250
    7326:	b7 01       	movw	r22, r14
    7328:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
    732c:	07 c0       	rjmp	.+14     	; 0x733c <xTaskResumeFromISR+0x80>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    732e:	2c 96       	adiw	r28, 0x0c	; 12
    7330:	84 e2       	ldi	r24, 0x24	; 36
    7332:	96 e0       	ldi	r25, 0x06	; 6
    7334:	be 01       	movw	r22, r28
    7336:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
    733a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		return xYieldRequired;
	}
    733c:	81 2f       	mov	r24, r17
    733e:	df 91       	pop	r29
    7340:	cf 91       	pop	r28
    7342:	1f 91       	pop	r17
    7344:	0f 91       	pop	r16
    7346:	ff 90       	pop	r15
    7348:	ef 90       	pop	r14
    734a:	df 90       	pop	r13
    734c:	08 95       	ret

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    734e:	80 91 e2 05 	lds	r24, 0x05E2
    7352:	88 23       	and	r24, r24
    7354:	49 f2       	breq	.-110    	; 0x72e8 <xTaskResumeFromISR+0x2c>
    7356:	eb cf       	rjmp	.-42     	; 0x732e <xTaskResumeFromISR+0x72>

00007358 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    7358:	cf 93       	push	r28
    735a:	df 93       	push	r29
    735c:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    735e:	e0 91 dc 05 	lds	r30, 0x05DC
    7362:	f0 91 dd 05 	lds	r31, 0x05DD
    7366:	93 83       	std	Z+3, r25	; 0x03
    7368:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    736a:	80 91 e0 05 	lds	r24, 0x05E0
    736e:	90 91 e1 05 	lds	r25, 0x05E1
    7372:	c8 17       	cp	r28, r24
    7374:	d9 07       	cpc	r29, r25
    7376:	68 f4       	brcc	.+26     	; 0x7392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7378:	80 91 22 06 	lds	r24, 0x0622
    737c:	90 91 23 06 	lds	r25, 0x0623
    7380:	60 91 dc 05 	lds	r22, 0x05DC
    7384:	70 91 dd 05 	lds	r23, 0x05DD
    7388:	6e 5f       	subi	r22, 0xFE	; 254
    738a:	7f 4f       	sbci	r23, 0xFF	; 255
    738c:	0e 94 3f 33 	call	0x667e	; 0x667e <vListInsert>
    7390:	17 c0       	rjmp	.+46     	; 0x73c0 <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7392:	80 91 20 06 	lds	r24, 0x0620
    7396:	90 91 21 06 	lds	r25, 0x0621
    739a:	60 91 dc 05 	lds	r22, 0x05DC
    739e:	70 91 dd 05 	lds	r23, 0x05DD
    73a2:	6e 5f       	subi	r22, 0xFE	; 254
    73a4:	7f 4f       	sbci	r23, 0xFF	; 255
    73a6:	0e 94 3f 33 	call	0x667e	; 0x667e <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    73aa:	80 91 7d 01 	lds	r24, 0x017D
    73ae:	90 91 7e 01 	lds	r25, 0x017E
    73b2:	c8 17       	cp	r28, r24
    73b4:	d9 07       	cpc	r29, r25
    73b6:	20 f4       	brcc	.+8      	; 0x73c0 <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    73b8:	d0 93 7e 01 	sts	0x017E, r29
    73bc:	c0 93 7d 01 	sts	0x017D, r28
		}
	}
}
    73c0:	df 91       	pop	r29
    73c2:	cf 91       	pop	r28
    73c4:	08 95       	ret

000073c6 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    73c6:	cf 93       	push	r28
    73c8:	df 93       	push	r29
    73ca:	eb 01       	movw	r28, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    73cc:	60 91 dc 05 	lds	r22, 0x05DC
    73d0:	70 91 dd 05 	lds	r23, 0x05DD
    73d4:	64 5f       	subi	r22, 0xF4	; 244
    73d6:	7f 4f       	sbci	r23, 0xFF	; 255
    73d8:	0e 94 3f 33 	call	0x667e	; 0x667e <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    73dc:	80 91 dc 05 	lds	r24, 0x05DC
    73e0:	90 91 dd 05 	lds	r25, 0x05DD
    73e4:	02 96       	adiw	r24, 0x02	; 2
    73e6:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    73ea:	8f ef       	ldi	r24, 0xFF	; 255
    73ec:	cf 3f       	cpi	r28, 0xFF	; 255
    73ee:	d8 07       	cpc	r29, r24
    73f0:	59 f4       	brne	.+22     	; 0x7408 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    73f2:	60 91 dc 05 	lds	r22, 0x05DC
    73f6:	70 91 dd 05 	lds	r23, 0x05DD
    73fa:	6e 5f       	subi	r22, 0xFE	; 254
    73fc:	7f 4f       	sbci	r23, 0xFF	; 255
    73fe:	86 e3       	ldi	r24, 0x36	; 54
    7400:	96 e0       	ldi	r25, 0x06	; 6
    7402:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
    7406:	08 c0       	rjmp	.+16     	; 0x7418 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    7408:	80 91 e0 05 	lds	r24, 0x05E0
    740c:	90 91 e1 05 	lds	r25, 0x05E1
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    7410:	8c 0f       	add	r24, r28
    7412:	9d 1f       	adc	r25, r29
    7414:	0e 94 ac 39 	call	0x7358	; 0x7358 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    7418:	df 91       	pop	r29
    741a:	cf 91       	pop	r28
    741c:	08 95       	ret

0000741e <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    741e:	cf 92       	push	r12
    7420:	df 92       	push	r13
    7422:	ff 92       	push	r15
    7424:	0f 93       	push	r16
    7426:	1f 93       	push	r17
    7428:	df 93       	push	r29
    742a:	cf 93       	push	r28
    742c:	0f 92       	push	r0
    742e:	cd b7       	in	r28, 0x3d	; 61
    7430:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    7432:	0f b6       	in	r0, 0x3f	; 63
    7434:	f8 94       	cli
    7436:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    7438:	80 91 e2 05 	lds	r24, 0x05E2
    743c:	81 50       	subi	r24, 0x01	; 1
    743e:	80 93 e2 05 	sts	0x05E2, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7442:	80 91 e2 05 	lds	r24, 0x05E2
    7446:	88 23       	and	r24, r24
    7448:	09 f0       	breq	.+2      	; 0x744c <xTaskResumeAll+0x2e>
    744a:	58 c0       	rjmp	.+176    	; 0x74fc <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    744c:	80 91 e5 05 	lds	r24, 0x05E5
    7450:	88 23       	and	r24, r24
    7452:	09 f4       	brne	.+2      	; 0x7456 <xTaskResumeAll+0x38>
    7454:	53 c0       	rjmp	.+166    	; 0x74fc <xTaskResumeAll+0xde>
    7456:	19 82       	std	Y+1, r1	; 0x01
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    7458:	29 e0       	ldi	r18, 0x09	; 9
    745a:	f2 2e       	mov	r15, r18
    745c:	2d c0       	rjmp	.+90     	; 0x74b8 <xTaskResumeAll+0x9a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    745e:	e0 91 29 06 	lds	r30, 0x0629
    7462:	f0 91 2a 06 	lds	r31, 0x062A
    7466:	c6 80       	ldd	r12, Z+6	; 0x06
    7468:	d7 80       	ldd	r13, Z+7	; 0x07
					vListRemove( &( pxTCB->xEventListItem ) );
    746a:	c6 01       	movw	r24, r12
    746c:	0c 96       	adiw	r24, 0x0c	; 12
    746e:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    7472:	86 01       	movw	r16, r12
    7474:	0e 5f       	subi	r16, 0xFE	; 254
    7476:	1f 4f       	sbci	r17, 0xFF	; 255
    7478:	c8 01       	movw	r24, r16
    747a:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    747e:	d6 01       	movw	r26, r12
    7480:	56 96       	adiw	r26, 0x16	; 22
    7482:	9c 91       	ld	r25, X
    7484:	80 91 e3 05 	lds	r24, 0x05E3
    7488:	89 17       	cp	r24, r25
    748a:	10 f4       	brcc	.+4      	; 0x7490 <xTaskResumeAll+0x72>
    748c:	90 93 e3 05 	sts	0x05E3, r25
    7490:	9f 9d       	mul	r25, r15
    7492:	c0 01       	movw	r24, r0
    7494:	11 24       	eor	r1, r1
    7496:	86 51       	subi	r24, 0x16	; 22
    7498:	9a 4f       	sbci	r25, 0xFA	; 250
    749a:	b8 01       	movw	r22, r16
    749c:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    74a0:	e0 91 dc 05 	lds	r30, 0x05DC
    74a4:	f0 91 dd 05 	lds	r31, 0x05DD
    74a8:	d6 01       	movw	r26, r12
    74aa:	56 96       	adiw	r26, 0x16	; 22
    74ac:	9c 91       	ld	r25, X
    74ae:	86 89       	ldd	r24, Z+22	; 0x16
    74b0:	98 17       	cp	r25, r24
    74b2:	10 f0       	brcs	.+4      	; 0x74b8 <xTaskResumeAll+0x9a>
    74b4:	b1 e0       	ldi	r27, 0x01	; 1
    74b6:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    74b8:	80 91 24 06 	lds	r24, 0x0624
    74bc:	88 23       	and	r24, r24
    74be:	79 f6       	brne	.-98     	; 0x745e <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    74c0:	80 91 e4 05 	lds	r24, 0x05E4
    74c4:	88 23       	and	r24, r24
    74c6:	41 f4       	brne	.+16     	; 0x74d8 <xTaskResumeAll+0xba>
    74c8:	0c c0       	rjmp	.+24     	; 0x74e2 <xTaskResumeAll+0xc4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    74ca:	0e 94 ba 38 	call	0x7174	; 0x7174 <vTaskIncrementTick>
						--uxMissedTicks;
    74ce:	80 91 e4 05 	lds	r24, 0x05E4
    74d2:	81 50       	subi	r24, 0x01	; 1
    74d4:	80 93 e4 05 	sts	0x05E4, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    74d8:	80 91 e4 05 	lds	r24, 0x05E4
    74dc:	88 23       	and	r24, r24
    74de:	a9 f7       	brne	.-22     	; 0x74ca <xTaskResumeAll+0xac>
    74e0:	07 c0       	rjmp	.+14     	; 0x74f0 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    74e2:	e9 81       	ldd	r30, Y+1	; 0x01
    74e4:	e1 30       	cpi	r30, 0x01	; 1
    74e6:	21 f0       	breq	.+8      	; 0x74f0 <xTaskResumeAll+0xd2>
    74e8:	80 91 de 05 	lds	r24, 0x05DE
    74ec:	81 30       	cpi	r24, 0x01	; 1
    74ee:	31 f4       	brne	.+12     	; 0x74fc <xTaskResumeAll+0xde>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    74f0:	10 92 de 05 	sts	0x05DE, r1
					portYIELD_WITHIN_API();
    74f4:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
    74f8:	81 e0       	ldi	r24, 0x01	; 1
    74fa:	01 c0       	rjmp	.+2      	; 0x74fe <xTaskResumeAll+0xe0>
    74fc:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    74fe:	0f 90       	pop	r0
    7500:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    7502:	0f 90       	pop	r0
    7504:	cf 91       	pop	r28
    7506:	df 91       	pop	r29
    7508:	1f 91       	pop	r17
    750a:	0f 91       	pop	r16
    750c:	ff 90       	pop	r15
    750e:	df 90       	pop	r13
    7510:	cf 90       	pop	r12
    7512:	08 95       	ret

00007514 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    7514:	0f 93       	push	r16
    7516:	1f 93       	push	r17
    7518:	cf 93       	push	r28
    751a:	df 93       	push	r29
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    751c:	ec 01       	movw	r28, r24

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    751e:	00 97       	sbiw	r24, 0x00	; 0
    7520:	09 f4       	brne	.+2      	; 0x7524 <vTaskResume+0x10>
    7522:	3c c0       	rjmp	.+120    	; 0x759c <vTaskResume+0x88>
    7524:	80 91 dc 05 	lds	r24, 0x05DC
    7528:	90 91 dd 05 	lds	r25, 0x05DD
    752c:	c8 17       	cp	r28, r24
    752e:	d9 07       	cpc	r29, r25
    7530:	a9 f1       	breq	.+106    	; 0x759c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
    7532:	0f b6       	in	r0, 0x3f	; 63
    7534:	f8 94       	cli
    7536:	0f 92       	push	r0
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    7538:	8a 85       	ldd	r24, Y+10	; 0x0a
    753a:	9b 85       	ldd	r25, Y+11	; 0x0b
    753c:	86 53       	subi	r24, 0x36	; 54
    753e:	96 40       	sbci	r25, 0x06	; 6
    7540:	f1 f4       	brne	.+60     	; 0x757e <vTaskResume+0x6a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    7542:	8c 89       	ldd	r24, Y+20	; 0x14
    7544:	9d 89       	ldd	r25, Y+21	; 0x15
    7546:	26 e0       	ldi	r18, 0x06	; 6
    7548:	84 32       	cpi	r24, 0x24	; 36
    754a:	92 07       	cpc	r25, r18
    754c:	c1 f0       	breq	.+48     	; 0x757e <vTaskResume+0x6a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    754e:	89 2b       	or	r24, r25
    7550:	b1 f4       	brne	.+44     	; 0x757e <vTaskResume+0x6a>
    7552:	18 c0       	rjmp	.+48     	; 0x7584 <vTaskResume+0x70>
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    7554:	90 93 e3 05 	sts	0x05E3, r25
    7558:	89 e0       	ldi	r24, 0x09	; 9
    755a:	98 9f       	mul	r25, r24
    755c:	c0 01       	movw	r24, r0
    755e:	11 24       	eor	r1, r1
    7560:	86 51       	subi	r24, 0x16	; 22
    7562:	9a 4f       	sbci	r25, 0xFA	; 250
    7564:	b8 01       	movw	r22, r16
    7566:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    756a:	e0 91 dc 05 	lds	r30, 0x05DC
    756e:	f0 91 dd 05 	lds	r31, 0x05DD
    7572:	9e 89       	ldd	r25, Y+22	; 0x16
    7574:	86 89       	ldd	r24, Z+22	; 0x16
    7576:	98 17       	cp	r25, r24
    7578:	10 f0       	brcs	.+4      	; 0x757e <vTaskResume+0x6a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    757a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    757e:	0f 90       	pop	r0
    7580:	0f be       	out	0x3f, r0	; 63
    7582:	0c c0       	rjmp	.+24     	; 0x759c <vTaskResume+0x88>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    7584:	8e 01       	movw	r16, r28
    7586:	0e 5f       	subi	r16, 0xFE	; 254
    7588:	1f 4f       	sbci	r17, 0xFF	; 255
    758a:	c8 01       	movw	r24, r16
    758c:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7590:	9e 89       	ldd	r25, Y+22	; 0x16
    7592:	80 91 e3 05 	lds	r24, 0x05E3
    7596:	89 17       	cp	r24, r25
    7598:	e8 f2       	brcs	.-70     	; 0x7554 <vTaskResume+0x40>
    759a:	de cf       	rjmp	.-68     	; 0x7558 <vTaskResume+0x44>
					}
				}
			}
			taskEXIT_CRITICAL();
		}
	}
    759c:	df 91       	pop	r29
    759e:	cf 91       	pop	r28
    75a0:	1f 91       	pop	r17
    75a2:	0f 91       	pop	r16
    75a4:	08 95       	ret

000075a6 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    75a6:	ef 92       	push	r14
    75a8:	ff 92       	push	r15
    75aa:	0f 93       	push	r16
    75ac:	1f 93       	push	r17
    75ae:	cf 93       	push	r28
    75b0:	df 93       	push	r29
    75b2:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    75b4:	0f b6       	in	r0, 0x3f	; 63
    75b6:	f8 94       	cli
    75b8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    75ba:	80 91 dc 05 	lds	r24, 0x05DC
    75be:	90 91 dd 05 	lds	r25, 0x05DD
    75c2:	08 17       	cp	r16, r24
    75c4:	19 07       	cpc	r17, r25
    75c6:	19 f4       	brne	.+6      	; 0x75ce <vTaskSuspend+0x28>
    75c8:	00 e0       	ldi	r16, 0x00	; 0
    75ca:	10 e0       	ldi	r17, 0x00	; 0
    75cc:	03 c0       	rjmp	.+6      	; 0x75d4 <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    75ce:	01 15       	cp	r16, r1
    75d0:	11 05       	cpc	r17, r1
    75d2:	29 f4       	brne	.+10     	; 0x75de <vTaskSuspend+0x38>
    75d4:	c0 91 dc 05 	lds	r28, 0x05DC
    75d8:	d0 91 dd 05 	lds	r29, 0x05DD
    75dc:	01 c0       	rjmp	.+2      	; 0x75e0 <vTaskSuspend+0x3a>
    75de:	e8 01       	movw	r28, r16

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    75e0:	32 e0       	ldi	r19, 0x02	; 2
    75e2:	e3 2e       	mov	r14, r19
    75e4:	f1 2c       	mov	r15, r1
    75e6:	ec 0e       	add	r14, r28
    75e8:	fd 1e       	adc	r15, r29
    75ea:	c7 01       	movw	r24, r14
    75ec:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    75f0:	8c 89       	ldd	r24, Y+20	; 0x14
    75f2:	9d 89       	ldd	r25, Y+21	; 0x15
    75f4:	89 2b       	or	r24, r25
    75f6:	21 f0       	breq	.+8      	; 0x7600 <vTaskSuspend+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    75f8:	ce 01       	movw	r24, r28
    75fa:	0c 96       	adiw	r24, 0x0c	; 12
    75fc:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    7600:	86 e3       	ldi	r24, 0x36	; 54
    7602:	96 e0       	ldi	r25, 0x06	; 6
    7604:	b7 01       	movw	r22, r14
    7606:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    760a:	0f 90       	pop	r0
    760c:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    760e:	01 2b       	or	r16, r17
    7610:	a1 f4       	brne	.+40     	; 0x763a <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    7612:	80 91 e6 05 	lds	r24, 0x05E6
    7616:	88 23       	and	r24, r24
    7618:	19 f0       	breq	.+6      	; 0x7620 <vTaskSuspend+0x7a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    761a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
    761e:	0d c0       	rjmp	.+26     	; 0x763a <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    7620:	90 91 36 06 	lds	r25, 0x0636
    7624:	80 91 e5 05 	lds	r24, 0x05E5
    7628:	98 17       	cp	r25, r24
    762a:	29 f4       	brne	.+10     	; 0x7636 <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    762c:	10 92 dd 05 	sts	0x05DD, r1
    7630:	10 92 dc 05 	sts	0x05DC, r1
    7634:	02 c0       	rjmp	.+4      	; 0x763a <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    7636:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <vTaskSwitchContext>
				}
			}
		}
	}
    763a:	df 91       	pop	r29
    763c:	cf 91       	pop	r28
    763e:	1f 91       	pop	r17
    7640:	0f 91       	pop	r16
    7642:	ff 90       	pop	r15
    7644:	ef 90       	pop	r14
    7646:	08 95       	ret

00007648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    7648:	0f 93       	push	r16
    764a:	1f 93       	push	r17
    764c:	cf 93       	push	r28
    764e:	df 93       	push	r29
    7650:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    7652:	00 97       	sbiw	r24, 0x00	; 0
    7654:	c9 f0       	breq	.+50     	; 0x7688 <vTaskDelay+0x40>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    7656:	80 91 e2 05 	lds	r24, 0x05E2
    765a:	8f 5f       	subi	r24, 0xFF	; 255
    765c:	80 93 e2 05 	sts	0x05E2, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    7660:	00 91 e0 05 	lds	r16, 0x05E0
    7664:	10 91 e1 05 	lds	r17, 0x05E1

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7668:	80 91 dc 05 	lds	r24, 0x05DC
    766c:	90 91 dd 05 	lds	r25, 0x05DD
    7670:	02 96       	adiw	r24, 0x02	; 2
    7672:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    7676:	ce 01       	movw	r24, r28
    7678:	80 0f       	add	r24, r16
    767a:	91 1f       	adc	r25, r17
    767c:	0e 94 ac 39 	call	0x7358	; 0x7358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    7680:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    7684:	88 23       	and	r24, r24
    7686:	11 f4       	brne	.+4      	; 0x768c <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
    7688:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
		}
	}
    768c:	df 91       	pop	r29
    768e:	cf 91       	pop	r28
    7690:	1f 91       	pop	r17
    7692:	0f 91       	pop	r16
    7694:	08 95       	ret

00007696 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    7696:	cf 93       	push	r28
    7698:	df 93       	push	r29
    769a:	fc 01       	movw	r30, r24
    769c:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    769e:	80 91 e2 05 	lds	r24, 0x05E2
    76a2:	8f 5f       	subi	r24, 0xFF	; 255
    76a4:	80 93 e2 05 	sts	0x05E2, r24
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    76a8:	20 81       	ld	r18, Z
    76aa:	31 81       	ldd	r19, Z+1	; 0x01
    76ac:	c2 0f       	add	r28, r18
    76ae:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    76b0:	80 91 e0 05 	lds	r24, 0x05E0
    76b4:	90 91 e1 05 	lds	r25, 0x05E1
    76b8:	82 17       	cp	r24, r18
    76ba:	93 07       	cpc	r25, r19
    76bc:	28 f4       	brcc	.+10     	; 0x76c8 <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    76be:	c2 17       	cp	r28, r18
    76c0:	d3 07       	cpc	r29, r19
    76c2:	28 f0       	brcs	.+10     	; 0x76ce <vTaskDelayUntil+0x38>
    76c4:	20 e0       	ldi	r18, 0x00	; 0
    76c6:	0c c0       	rjmp	.+24     	; 0x76e0 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    76c8:	c2 17       	cp	r28, r18
    76ca:	d3 07       	cpc	r29, r19
    76cc:	40 f0       	brcs	.+16     	; 0x76de <vTaskDelayUntil+0x48>
    76ce:	80 91 e0 05 	lds	r24, 0x05E0
    76d2:	90 91 e1 05 	lds	r25, 0x05E1
    76d6:	20 e0       	ldi	r18, 0x00	; 0
    76d8:	8c 17       	cp	r24, r28
    76da:	9d 07       	cpc	r25, r29
    76dc:	08 f4       	brcc	.+2      	; 0x76e0 <vTaskDelayUntil+0x4a>
    76de:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    76e0:	d1 83       	std	Z+1, r29	; 0x01
    76e2:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    76e4:	22 23       	and	r18, r18
    76e6:	51 f0       	breq	.+20     	; 0x76fc <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    76e8:	80 91 dc 05 	lds	r24, 0x05DC
    76ec:	90 91 dd 05 	lds	r25, 0x05DD
    76f0:	02 96       	adiw	r24, 0x02	; 2
    76f2:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    76f6:	ce 01       	movw	r24, r28
    76f8:	0e 94 ac 39 	call	0x7358	; 0x7358 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    76fc:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    7700:	88 23       	and	r24, r24
    7702:	11 f4       	brne	.+4      	; 0x7708 <vTaskDelayUntil+0x72>
		{
			portYIELD_WITHIN_API();
    7704:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
		}
	}
    7708:	df 91       	pop	r29
    770a:	cf 91       	pop	r28
    770c:	08 95       	ret

0000770e <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    770e:	ef 92       	push	r14
    7710:	ff 92       	push	r15
    7712:	0f 93       	push	r16
    7714:	1f 93       	push	r17
    7716:	cf 93       	push	r28
    7718:	df 93       	push	r29
    771a:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    771c:	0f b6       	in	r0, 0x3f	; 63
    771e:	f8 94       	cli
    7720:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    7722:	80 91 dc 05 	lds	r24, 0x05DC
    7726:	90 91 dd 05 	lds	r25, 0x05DD
    772a:	08 17       	cp	r16, r24
    772c:	19 07       	cpc	r17, r25
    772e:	19 f4       	brne	.+6      	; 0x7736 <vTaskDelete+0x28>
    7730:	00 e0       	ldi	r16, 0x00	; 0
    7732:	10 e0       	ldi	r17, 0x00	; 0
    7734:	03 c0       	rjmp	.+6      	; 0x773c <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    7736:	01 15       	cp	r16, r1
    7738:	11 05       	cpc	r17, r1
    773a:	29 f4       	brne	.+10     	; 0x7746 <vTaskDelete+0x38>
    773c:	c0 91 dc 05 	lds	r28, 0x05DC
    7740:	d0 91 dd 05 	lds	r29, 0x05DD
    7744:	01 c0       	rjmp	.+2      	; 0x7748 <vTaskDelete+0x3a>
    7746:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    7748:	42 e0       	ldi	r20, 0x02	; 2
    774a:	e4 2e       	mov	r14, r20
    774c:	f1 2c       	mov	r15, r1
    774e:	ec 0e       	add	r14, r28
    7750:	fd 1e       	adc	r15, r29
    7752:	c7 01       	movw	r24, r14
    7754:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    7758:	8c 89       	ldd	r24, Y+20	; 0x14
    775a:	9d 89       	ldd	r25, Y+21	; 0x15
    775c:	89 2b       	or	r24, r25
    775e:	21 f0       	breq	.+8      	; 0x7768 <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    7760:	ce 01       	movw	r24, r28
    7762:	0c 96       	adiw	r24, 0x0c	; 12
    7764:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    7768:	8d e2       	ldi	r24, 0x2D	; 45
    776a:	96 e0       	ldi	r25, 0x06	; 6
    776c:	b7 01       	movw	r22, r14
    776e:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    7772:	80 91 e7 05 	lds	r24, 0x05E7
    7776:	8f 5f       	subi	r24, 0xFF	; 255
    7778:	80 93 e7 05 	sts	0x05E7, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    777c:	80 91 e8 05 	lds	r24, 0x05E8
    7780:	8f 5f       	subi	r24, 0xFF	; 255
    7782:	80 93 e8 05 	sts	0x05E8, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    7786:	0f 90       	pop	r0
    7788:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    778a:	80 91 e6 05 	lds	r24, 0x05E6
    778e:	88 23       	and	r24, r24
    7790:	21 f0       	breq	.+8      	; 0x779a <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    7792:	01 2b       	or	r16, r17
    7794:	11 f4       	brne	.+4      	; 0x779a <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    7796:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
			}
		}
	}
    779a:	df 91       	pop	r29
    779c:	cf 91       	pop	r28
    779e:	1f 91       	pop	r17
    77a0:	0f 91       	pop	r16
    77a2:	ff 90       	pop	r15
    77a4:	ef 90       	pop	r14
    77a6:	08 95       	ret

000077a8 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    77a8:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    77aa:	10 92 e6 05 	sts	0x05E6, r1
	vPortEndScheduler();
    77ae:	0e 94 19 34 	call	0x6832	; 0x6832 <vPortEndScheduler>
}
    77b2:	08 95       	ret

000077b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    77b4:	0f 93       	push	r16
    77b6:	1f 93       	push	r17
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    77b8:	80 91 e7 05 	lds	r24, 0x05E7
    77bc:	88 23       	and	r24, r24
    77be:	e1 f3       	breq	.-8      	; 0x77b8 <prvIdleTask+0x4>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    77c0:	80 91 e2 05 	lds	r24, 0x05E2
    77c4:	8f 5f       	subi	r24, 0xFF	; 255
    77c6:	80 93 e2 05 	sts	0x05E2, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    77ca:	10 91 2d 06 	lds	r17, 0x062D
			xTaskResumeAll();
    77ce:	0e 94 0f 3a 	call	0x741e	; 0x741e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    77d2:	11 23       	and	r17, r17
    77d4:	89 f3       	breq	.-30     	; 0x77b8 <prvIdleTask+0x4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    77d6:	0f b6       	in	r0, 0x3f	; 63
    77d8:	f8 94       	cli
    77da:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    77dc:	e0 91 32 06 	lds	r30, 0x0632
    77e0:	f0 91 33 06 	lds	r31, 0x0633
    77e4:	06 81       	ldd	r16, Z+6	; 0x06
    77e6:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    77e8:	c8 01       	movw	r24, r16
    77ea:	02 96       	adiw	r24, 0x02	; 2
    77ec:	0e 94 74 33 	call	0x66e8	; 0x66e8 <vListRemove>
					--uxCurrentNumberOfTasks;
    77f0:	80 91 e5 05 	lds	r24, 0x05E5
    77f4:	81 50       	subi	r24, 0x01	; 1
    77f6:	80 93 e5 05 	sts	0x05E5, r24
					--uxTasksDeleted;
    77fa:	80 91 e7 05 	lds	r24, 0x05E7
    77fe:	81 50       	subi	r24, 0x01	; 1
    7800:	80 93 e7 05 	sts	0x05E7, r24
				}
				taskEXIT_CRITICAL();
    7804:	0f 90       	pop	r0
    7806:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    7808:	f8 01       	movw	r30, r16
    780a:	87 89       	ldd	r24, Z+23	; 0x17
    780c:	90 8d       	ldd	r25, Z+24	; 0x18
    780e:	0e 94 cb 32 	call	0x6596	; 0x6596 <vPortFree>
		vPortFree( pxTCB );
    7812:	c8 01       	movw	r24, r16
    7814:	0e 94 cb 32 	call	0x6596	; 0x6596 <vPortFree>
    7818:	cf cf       	rjmp	.-98     	; 0x77b8 <prvIdleTask+0x4>

0000781a <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    781a:	2f 92       	push	r2
    781c:	3f 92       	push	r3
    781e:	5f 92       	push	r5
    7820:	6f 92       	push	r6
    7822:	7f 92       	push	r7
    7824:	8f 92       	push	r8
    7826:	9f 92       	push	r9
    7828:	af 92       	push	r10
    782a:	bf 92       	push	r11
    782c:	cf 92       	push	r12
    782e:	df 92       	push	r13
    7830:	ef 92       	push	r14
    7832:	ff 92       	push	r15
    7834:	0f 93       	push	r16
    7836:	1f 93       	push	r17
    7838:	df 93       	push	r29
    783a:	cf 93       	push	r28
    783c:	00 d0       	rcall	.+0      	; 0x783e <xTaskGenericCreate+0x24>
    783e:	00 d0       	rcall	.+0      	; 0x7840 <xTaskGenericCreate+0x26>
    7840:	cd b7       	in	r28, 0x3d	; 61
    7842:	de b7       	in	r29, 0x3e	; 62
    7844:	9a 83       	std	Y+2, r25	; 0x02
    7846:	89 83       	std	Y+1, r24	; 0x01
    7848:	4b 01       	movw	r8, r22
    784a:	5a 01       	movw	r10, r20
    784c:	19 01       	movw	r2, r18
    784e:	50 2e       	mov	r5, r16
    7850:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    7852:	81 e2       	ldi	r24, 0x21	; 33
    7854:	90 e0       	ldi	r25, 0x00	; 0
    7856:	0e 94 db 32 	call	0x65b6	; 0x65b6 <pvPortMalloc>
    785a:	8b 83       	std	Y+3, r24	; 0x03
    785c:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    785e:	8b 81       	ldd	r24, Y+3	; 0x03
    7860:	9c 81       	ldd	r25, Y+4	; 0x04
    7862:	89 2b       	or	r24, r25
    7864:	89 f0       	breq	.+34     	; 0x7888 <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    7866:	c1 14       	cp	r12, r1
    7868:	d1 04       	cpc	r13, r1
    786a:	21 f4       	brne	.+8      	; 0x7874 <xTaskGenericCreate+0x5a>
    786c:	c5 01       	movw	r24, r10
    786e:	0e 94 db 32 	call	0x65b6	; 0x65b6 <pvPortMalloc>
    7872:	6c 01       	movw	r12, r24
    7874:	eb 81       	ldd	r30, Y+3	; 0x03
    7876:	fc 81       	ldd	r31, Y+4	; 0x04
    7878:	d0 8e       	std	Z+24, r13	; 0x18
    787a:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    787c:	c1 14       	cp	r12, r1
    787e:	d1 04       	cpc	r13, r1
    7880:	29 f4       	brne	.+10     	; 0x788c <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    7882:	cf 01       	movw	r24, r30
    7884:	0e 94 cb 32 	call	0x6596	; 0x6596 <vPortFree>
    7888:	8f ef       	ldi	r24, 0xFF	; 255
    788a:	da c0       	rjmp	.+436    	; 0x7a40 <xTaskGenericCreate+0x226>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    788c:	c6 01       	movw	r24, r12
    788e:	65 ea       	ldi	r22, 0xA5	; 165
    7890:	70 e0       	ldi	r23, 0x00	; 0
    7892:	a5 01       	movw	r20, r10
    7894:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    7898:	08 94       	sec
    789a:	a1 08       	sbc	r10, r1
    789c:	b1 08       	sbc	r11, r1
    789e:	eb 81       	ldd	r30, Y+3	; 0x03
    78a0:	fc 81       	ldd	r31, Y+4	; 0x04
    78a2:	e7 88       	ldd	r14, Z+23	; 0x17
    78a4:	f0 8c       	ldd	r15, Z+24	; 0x18
    78a6:	ea 0c       	add	r14, r10
    78a8:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    78aa:	cf 01       	movw	r24, r30
    78ac:	49 96       	adiw	r24, 0x19	; 25
    78ae:	b4 01       	movw	r22, r8
    78b0:	48 e0       	ldi	r20, 0x08	; 8
    78b2:	50 e0       	ldi	r21, 0x00	; 0
    78b4:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    78b8:	eb 81       	ldd	r30, Y+3	; 0x03
    78ba:	fc 81       	ldd	r31, Y+4	; 0x04
    78bc:	10 a2       	std	Z+32, r1	; 0x20
    78be:	05 2d       	mov	r16, r5
    78c0:	f3 e0       	ldi	r31, 0x03	; 3
    78c2:	f5 15       	cp	r31, r5
    78c4:	08 f4       	brcc	.+2      	; 0x78c8 <xTaskGenericCreate+0xae>
    78c6:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    78c8:	eb 81       	ldd	r30, Y+3	; 0x03
    78ca:	fc 81       	ldd	r31, Y+4	; 0x04
    78cc:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    78ce:	62 e0       	ldi	r22, 0x02	; 2
    78d0:	c6 2e       	mov	r12, r22
    78d2:	d1 2c       	mov	r13, r1
    78d4:	ce 0e       	add	r12, r30
    78d6:	df 1e       	adc	r13, r31
    78d8:	c6 01       	movw	r24, r12
    78da:	0e 94 12 33 	call	0x6624	; 0x6624 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    78de:	8b 81       	ldd	r24, Y+3	; 0x03
    78e0:	9c 81       	ldd	r25, Y+4	; 0x04
    78e2:	0c 96       	adiw	r24, 0x0c	; 12
    78e4:	0e 94 12 33 	call	0x6624	; 0x6624 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    78e8:	8b 81       	ldd	r24, Y+3	; 0x03
    78ea:	9c 81       	ldd	r25, Y+4	; 0x04
    78ec:	fc 01       	movw	r30, r24
    78ee:	91 87       	std	Z+9, r25	; 0x09
    78f0:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    78f2:	84 e0       	ldi	r24, 0x04	; 4
    78f4:	90 e0       	ldi	r25, 0x00	; 0
    78f6:	80 1b       	sub	r24, r16
    78f8:	91 09       	sbc	r25, r1
    78fa:	95 87       	std	Z+13, r25	; 0x0d
    78fc:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    78fe:	f3 8b       	std	Z+19, r31	; 0x13
    7900:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7902:	c7 01       	movw	r24, r14
    7904:	69 81       	ldd	r22, Y+1	; 0x01
    7906:	7a 81       	ldd	r23, Y+2	; 0x02
    7908:	a1 01       	movw	r20, r2
    790a:	0e 94 9c 33 	call	0x6738	; 0x6738 <pxPortInitialiseStack>
    790e:	eb 81       	ldd	r30, Y+3	; 0x03
    7910:	fc 81       	ldd	r31, Y+4	; 0x04
    7912:	91 83       	std	Z+1, r25	; 0x01
    7914:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    7916:	61 14       	cp	r6, r1
    7918:	71 04       	cpc	r7, r1
    791a:	21 f0       	breq	.+8      	; 0x7924 <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    791c:	cf 01       	movw	r24, r30
    791e:	f3 01       	movw	r30, r6
    7920:	91 83       	std	Z+1, r25	; 0x01
    7922:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    7924:	0f b6       	in	r0, 0x3f	; 63
    7926:	f8 94       	cli
    7928:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    792a:	80 91 e5 05 	lds	r24, 0x05E5
    792e:	8f 5f       	subi	r24, 0xFF	; 255
    7930:	80 93 e5 05 	sts	0x05E5, r24
			if( pxCurrentTCB == NULL )
    7934:	80 91 dc 05 	lds	r24, 0x05DC
    7938:	90 91 dd 05 	lds	r25, 0x05DD
    793c:	89 2b       	or	r24, r25
    793e:	e1 f5       	brne	.+120    	; 0x79b8 <xTaskGenericCreate+0x19e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    7940:	eb 81       	ldd	r30, Y+3	; 0x03
    7942:	fc 81       	ldd	r31, Y+4	; 0x04
    7944:	f0 93 dd 05 	sts	0x05DD, r31
    7948:	e0 93 dc 05 	sts	0x05DC, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    794c:	80 91 e5 05 	lds	r24, 0x05E5
    7950:	81 30       	cpi	r24, 0x01	; 1
    7952:	09 f0       	breq	.+2      	; 0x7956 <xTaskGenericCreate+0x13c>
    7954:	42 c0       	rjmp	.+132    	; 0x79da <xTaskGenericCreate+0x1c0>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    7956:	8a ee       	ldi	r24, 0xEA	; 234
    7958:	95 e0       	ldi	r25, 0x05	; 5
    795a:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
    795e:	83 ef       	ldi	r24, 0xF3	; 243
    7960:	95 e0       	ldi	r25, 0x05	; 5
    7962:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
    7966:	8c ef       	ldi	r24, 0xFC	; 252
    7968:	95 e0       	ldi	r25, 0x05	; 5
    796a:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
    796e:	85 e0       	ldi	r24, 0x05	; 5
    7970:	96 e0       	ldi	r25, 0x06	; 6
    7972:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    7976:	5e e0       	ldi	r21, 0x0E	; 14
    7978:	e5 2e       	mov	r14, r21
    797a:	56 e0       	ldi	r21, 0x06	; 6
    797c:	f5 2e       	mov	r15, r21
    797e:	c7 01       	movw	r24, r14
    7980:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    7984:	07 e1       	ldi	r16, 0x17	; 23
    7986:	16 e0       	ldi	r17, 0x06	; 6
    7988:	c8 01       	movw	r24, r16
    798a:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    798e:	84 e2       	ldi	r24, 0x24	; 36
    7990:	96 e0       	ldi	r25, 0x06	; 6
    7992:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    7996:	8d e2       	ldi	r24, 0x2D	; 45
    7998:	96 e0       	ldi	r25, 0x06	; 6
    799a:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    799e:	86 e3       	ldi	r24, 0x36	; 54
    79a0:	96 e0       	ldi	r25, 0x06	; 6
    79a2:	0e 94 02 33 	call	0x6604	; 0x6604 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    79a6:	f0 92 21 06 	sts	0x0621, r15
    79aa:	e0 92 20 06 	sts	0x0620, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    79ae:	10 93 23 06 	sts	0x0623, r17
    79b2:	00 93 22 06 	sts	0x0622, r16
    79b6:	11 c0       	rjmp	.+34     	; 0x79da <xTaskGenericCreate+0x1c0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    79b8:	80 91 e6 05 	lds	r24, 0x05E6
    79bc:	88 23       	and	r24, r24
    79be:	69 f4       	brne	.+26     	; 0x79da <xTaskGenericCreate+0x1c0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    79c0:	e0 91 dc 05 	lds	r30, 0x05DC
    79c4:	f0 91 dd 05 	lds	r31, 0x05DD
    79c8:	86 89       	ldd	r24, Z+22	; 0x16
    79ca:	58 16       	cp	r5, r24
    79cc:	30 f0       	brcs	.+12     	; 0x79da <xTaskGenericCreate+0x1c0>
					{
						pxCurrentTCB = pxNewTCB;
    79ce:	8b 81       	ldd	r24, Y+3	; 0x03
    79d0:	9c 81       	ldd	r25, Y+4	; 0x04
    79d2:	90 93 dd 05 	sts	0x05DD, r25
    79d6:	80 93 dc 05 	sts	0x05DC, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    79da:	eb 81       	ldd	r30, Y+3	; 0x03
    79dc:	fc 81       	ldd	r31, Y+4	; 0x04
    79de:	96 89       	ldd	r25, Z+22	; 0x16
    79e0:	80 91 e9 05 	lds	r24, 0x05E9
    79e4:	89 17       	cp	r24, r25
    79e6:	10 f4       	brcc	.+4      	; 0x79ec <xTaskGenericCreate+0x1d2>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    79e8:	90 93 e9 05 	sts	0x05E9, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    79ec:	80 91 e8 05 	lds	r24, 0x05E8
    79f0:	8f 5f       	subi	r24, 0xFF	; 255
    79f2:	80 93 e8 05 	sts	0x05E8, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    79f6:	eb 81       	ldd	r30, Y+3	; 0x03
    79f8:	fc 81       	ldd	r31, Y+4	; 0x04
    79fa:	96 89       	ldd	r25, Z+22	; 0x16
    79fc:	80 91 e3 05 	lds	r24, 0x05E3
    7a00:	89 17       	cp	r24, r25
    7a02:	10 f4       	brcc	.+4      	; 0x7a08 <xTaskGenericCreate+0x1ee>
    7a04:	90 93 e3 05 	sts	0x05E3, r25
    7a08:	eb 81       	ldd	r30, Y+3	; 0x03
    7a0a:	fc 81       	ldd	r31, Y+4	; 0x04
    7a0c:	86 89       	ldd	r24, Z+22	; 0x16
    7a0e:	29 e0       	ldi	r18, 0x09	; 9
    7a10:	82 9f       	mul	r24, r18
    7a12:	c0 01       	movw	r24, r0
    7a14:	11 24       	eor	r1, r1
    7a16:	86 51       	subi	r24, 0x16	; 22
    7a18:	9a 4f       	sbci	r25, 0xFA	; 250
    7a1a:	b6 01       	movw	r22, r12
    7a1c:	0e 94 16 33 	call	0x662c	; 0x662c <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    7a20:	0f 90       	pop	r0
    7a22:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    7a24:	80 91 e6 05 	lds	r24, 0x05E6
    7a28:	88 23       	and	r24, r24
    7a2a:	49 f0       	breq	.+18     	; 0x7a3e <xTaskGenericCreate+0x224>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    7a2c:	e0 91 dc 05 	lds	r30, 0x05DC
    7a30:	f0 91 dd 05 	lds	r31, 0x05DD
    7a34:	86 89       	ldd	r24, Z+22	; 0x16
    7a36:	85 15       	cp	r24, r5
    7a38:	10 f4       	brcc	.+4      	; 0x7a3e <xTaskGenericCreate+0x224>
			{
				portYIELD_WITHIN_API();
    7a3a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <vPortYield>
    7a3e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    7a40:	0f 90       	pop	r0
    7a42:	0f 90       	pop	r0
    7a44:	0f 90       	pop	r0
    7a46:	0f 90       	pop	r0
    7a48:	cf 91       	pop	r28
    7a4a:	df 91       	pop	r29
    7a4c:	1f 91       	pop	r17
    7a4e:	0f 91       	pop	r16
    7a50:	ff 90       	pop	r15
    7a52:	ef 90       	pop	r14
    7a54:	df 90       	pop	r13
    7a56:	cf 90       	pop	r12
    7a58:	bf 90       	pop	r11
    7a5a:	af 90       	pop	r10
    7a5c:	9f 90       	pop	r9
    7a5e:	8f 90       	pop	r8
    7a60:	7f 90       	pop	r7
    7a62:	6f 90       	pop	r6
    7a64:	5f 90       	pop	r5
    7a66:	3f 90       	pop	r3
    7a68:	2f 90       	pop	r2
    7a6a:	08 95       	ret

00007a6c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    7a6c:	af 92       	push	r10
    7a6e:	bf 92       	push	r11
    7a70:	cf 92       	push	r12
    7a72:	df 92       	push	r13
    7a74:	ef 92       	push	r14
    7a76:	ff 92       	push	r15
    7a78:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    7a7a:	8a ed       	ldi	r24, 0xDA	; 218
    7a7c:	9b e3       	ldi	r25, 0x3B	; 59
    7a7e:	60 e6       	ldi	r22, 0x60	; 96
    7a80:	70 e0       	ldi	r23, 0x00	; 0
    7a82:	44 ef       	ldi	r20, 0xF4	; 244
    7a84:	51 e0       	ldi	r21, 0x01	; 1
    7a86:	20 e0       	ldi	r18, 0x00	; 0
    7a88:	30 e0       	ldi	r19, 0x00	; 0
    7a8a:	00 e0       	ldi	r16, 0x00	; 0
    7a8c:	ee 24       	eor	r14, r14
    7a8e:	ff 24       	eor	r15, r15
    7a90:	cc 24       	eor	r12, r12
    7a92:	dd 24       	eor	r13, r13
    7a94:	aa 24       	eor	r10, r10
    7a96:	bb 24       	eor	r11, r11
    7a98:	0e 94 0d 3c 	call	0x781a	; 0x781a <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    7a9c:	81 30       	cpi	r24, 0x01	; 1
    7a9e:	49 f4       	brne	.+18     	; 0x7ab2 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    7aa0:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    7aa2:	80 93 e6 05 	sts	0x05E6, r24
		xTickCount = ( portTickType ) 0U;
    7aa6:	10 92 e1 05 	sts	0x05E1, r1
    7aaa:	10 92 e0 05 	sts	0x05E0, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7aae:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    7ab2:	0f 91       	pop	r16
    7ab4:	ff 90       	pop	r15
    7ab6:	ef 90       	pop	r14
    7ab8:	df 90       	pop	r13
    7aba:	cf 90       	pop	r12
    7abc:	bf 90       	pop	r11
    7abe:	af 90       	pop	r10
    7ac0:	08 95       	ret

00007ac2 <BUTTON>:
void BUTTON(void *pv)
{

	while(1)
	{
		DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1,&Global_u8Flag);
    7ac2:	80 e0       	ldi	r24, 0x00	; 0
    7ac4:	61 e0       	ldi	r22, 0x01	; 1
    7ac6:	40 e4       	ldi	r20, 0x40	; 64
    7ac8:	56 e0       	ldi	r21, 0x06	; 6
    7aca:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <DIO_u8GetPinValue>
		if(Global_u8Flag == DIO_PIN_HIGH)
    7ace:	80 91 40 06 	lds	r24, 0x0640
    7ad2:	81 30       	cpi	r24, 0x01	; 1
    7ad4:	19 f4       	brne	.+6      	; 0x7adc <BUTTON+0x1a>
		{
			Global_u8BtnState = 1;
    7ad6:	80 93 3f 06 	sts	0x063F, r24
    7ada:	02 c0       	rjmp	.+4      	; 0x7ae0 <BUTTON+0x1e>
		}
		else
		{
			Global_u8BtnState = 0;
    7adc:	10 92 3f 06 	sts	0x063F, r1
		}
		vTaskDelay(1);
    7ae0:	81 e0       	ldi	r24, 0x01	; 1
    7ae2:	90 e0       	ldi	r25, 0x00	; 0
    7ae4:	0e 94 24 3b 	call	0x7648	; 0x7648 <vTaskDelay>
    7ae8:	ec cf       	rjmp	.-40     	; 0x7ac2 <BUTTON>

00007aea <LED>:
/*TASKS DEFINITIONS*/
void LED(void *pv)
{
	while(1)
	{
		if(Global_u8BtnState == 0)
    7aea:	80 91 3f 06 	lds	r24, 0x063F
    7aee:	88 23       	and	r24, r24
    7af0:	19 f4       	brne	.+6      	; 0x7af8 <LED+0xe>
		{
			DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_LOW);
    7af2:	60 e0       	ldi	r22, 0x00	; 0
    7af4:	40 e0       	ldi	r20, 0x00	; 0
    7af6:	03 c0       	rjmp	.+6      	; 0x7afe <LED+0x14>
		}
		else
		{
			DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_HIGH);
    7af8:	80 e0       	ldi	r24, 0x00	; 0
    7afa:	60 e0       	ldi	r22, 0x00	; 0
    7afc:	41 e0       	ldi	r20, 0x01	; 1
    7afe:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <DIO_u8SetPinValue>
		}
		vTaskDelay(1);
    7b02:	81 e0       	ldi	r24, 0x01	; 1
    7b04:	90 e0       	ldi	r25, 0x00	; 0
    7b06:	0e 94 24 3b 	call	0x7648	; 0x7648 <vTaskDelay>
    7b0a:	ef cf       	rjmp	.-34     	; 0x7aea <LED>

00007b0c <main>:
void BUTTON(void *pv);

/****************************************************************************/
/*ENTRY POINT <main>*/
int main(void)
{
    7b0c:	af 92       	push	r10
    7b0e:	bf 92       	push	r11
    7b10:	cf 92       	push	r12
    7b12:	df 92       	push	r13
    7b14:	ef 92       	push	r14
    7b16:	ff 92       	push	r15
    7b18:	0f 93       	push	r16
	/*MODULES INITIALIZATIONS*/
	PORT_voidInit();
    7b1a:	0e 94 f6 28 	call	0x51ec	; 0x51ec <PORT_voidInit>
	/*TASKS CREATION*/
	xTaskCreate(&LED,NULL,200,NULL,1,NULL);
    7b1e:	85 e7       	ldi	r24, 0x75	; 117
    7b20:	9d e3       	ldi	r25, 0x3D	; 61
    7b22:	60 e0       	ldi	r22, 0x00	; 0
    7b24:	70 e0       	ldi	r23, 0x00	; 0
    7b26:	48 ec       	ldi	r20, 0xC8	; 200
    7b28:	50 e0       	ldi	r21, 0x00	; 0
    7b2a:	20 e0       	ldi	r18, 0x00	; 0
    7b2c:	30 e0       	ldi	r19, 0x00	; 0
    7b2e:	01 e0       	ldi	r16, 0x01	; 1
    7b30:	ee 24       	eor	r14, r14
    7b32:	ff 24       	eor	r15, r15
    7b34:	cc 24       	eor	r12, r12
    7b36:	dd 24       	eor	r13, r13
    7b38:	aa 24       	eor	r10, r10
    7b3a:	bb 24       	eor	r11, r11
    7b3c:	0e 94 0d 3c 	call	0x781a	; 0x781a <xTaskGenericCreate>
	xTaskCreate(&BUTTON,NULL,200,NULL,0,NULL);
    7b40:	81 e6       	ldi	r24, 0x61	; 97
    7b42:	9d e3       	ldi	r25, 0x3D	; 61
    7b44:	60 e0       	ldi	r22, 0x00	; 0
    7b46:	70 e0       	ldi	r23, 0x00	; 0
    7b48:	48 ec       	ldi	r20, 0xC8	; 200
    7b4a:	50 e0       	ldi	r21, 0x00	; 0
    7b4c:	20 e0       	ldi	r18, 0x00	; 0
    7b4e:	30 e0       	ldi	r19, 0x00	; 0
    7b50:	00 e0       	ldi	r16, 0x00	; 0
    7b52:	0e 94 0d 3c 	call	0x781a	; 0x781a <xTaskGenericCreate>

	/*START SCHEDULING*/
	vTaskStartScheduler();
    7b56:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <vTaskStartScheduler>
    7b5a:	ff cf       	rjmp	.-2      	; 0x7b5a <main+0x4e>

00007b5c <__mulsi3>:
    7b5c:	62 9f       	mul	r22, r18
    7b5e:	d0 01       	movw	r26, r0
    7b60:	73 9f       	mul	r23, r19
    7b62:	f0 01       	movw	r30, r0
    7b64:	82 9f       	mul	r24, r18
    7b66:	e0 0d       	add	r30, r0
    7b68:	f1 1d       	adc	r31, r1
    7b6a:	64 9f       	mul	r22, r20
    7b6c:	e0 0d       	add	r30, r0
    7b6e:	f1 1d       	adc	r31, r1
    7b70:	92 9f       	mul	r25, r18
    7b72:	f0 0d       	add	r31, r0
    7b74:	83 9f       	mul	r24, r19
    7b76:	f0 0d       	add	r31, r0
    7b78:	74 9f       	mul	r23, r20
    7b7a:	f0 0d       	add	r31, r0
    7b7c:	65 9f       	mul	r22, r21
    7b7e:	f0 0d       	add	r31, r0
    7b80:	99 27       	eor	r25, r25
    7b82:	72 9f       	mul	r23, r18
    7b84:	b0 0d       	add	r27, r0
    7b86:	e1 1d       	adc	r30, r1
    7b88:	f9 1f       	adc	r31, r25
    7b8a:	63 9f       	mul	r22, r19
    7b8c:	b0 0d       	add	r27, r0
    7b8e:	e1 1d       	adc	r30, r1
    7b90:	f9 1f       	adc	r31, r25
    7b92:	bd 01       	movw	r22, r26
    7b94:	cf 01       	movw	r24, r30
    7b96:	11 24       	eor	r1, r1
    7b98:	08 95       	ret

00007b9a <__udivmodsi4>:
    7b9a:	a1 e2       	ldi	r26, 0x21	; 33
    7b9c:	1a 2e       	mov	r1, r26
    7b9e:	aa 1b       	sub	r26, r26
    7ba0:	bb 1b       	sub	r27, r27
    7ba2:	fd 01       	movw	r30, r26
    7ba4:	0d c0       	rjmp	.+26     	; 0x7bc0 <__udivmodsi4_ep>

00007ba6 <__udivmodsi4_loop>:
    7ba6:	aa 1f       	adc	r26, r26
    7ba8:	bb 1f       	adc	r27, r27
    7baa:	ee 1f       	adc	r30, r30
    7bac:	ff 1f       	adc	r31, r31
    7bae:	a2 17       	cp	r26, r18
    7bb0:	b3 07       	cpc	r27, r19
    7bb2:	e4 07       	cpc	r30, r20
    7bb4:	f5 07       	cpc	r31, r21
    7bb6:	20 f0       	brcs	.+8      	; 0x7bc0 <__udivmodsi4_ep>
    7bb8:	a2 1b       	sub	r26, r18
    7bba:	b3 0b       	sbc	r27, r19
    7bbc:	e4 0b       	sbc	r30, r20
    7bbe:	f5 0b       	sbc	r31, r21

00007bc0 <__udivmodsi4_ep>:
    7bc0:	66 1f       	adc	r22, r22
    7bc2:	77 1f       	adc	r23, r23
    7bc4:	88 1f       	adc	r24, r24
    7bc6:	99 1f       	adc	r25, r25
    7bc8:	1a 94       	dec	r1
    7bca:	69 f7       	brne	.-38     	; 0x7ba6 <__udivmodsi4_loop>
    7bcc:	60 95       	com	r22
    7bce:	70 95       	com	r23
    7bd0:	80 95       	com	r24
    7bd2:	90 95       	com	r25
    7bd4:	9b 01       	movw	r18, r22
    7bd6:	ac 01       	movw	r20, r24
    7bd8:	bd 01       	movw	r22, r26
    7bda:	cf 01       	movw	r24, r30
    7bdc:	08 95       	ret

00007bde <__prologue_saves__>:
    7bde:	2f 92       	push	r2
    7be0:	3f 92       	push	r3
    7be2:	4f 92       	push	r4
    7be4:	5f 92       	push	r5
    7be6:	6f 92       	push	r6
    7be8:	7f 92       	push	r7
    7bea:	8f 92       	push	r8
    7bec:	9f 92       	push	r9
    7bee:	af 92       	push	r10
    7bf0:	bf 92       	push	r11
    7bf2:	cf 92       	push	r12
    7bf4:	df 92       	push	r13
    7bf6:	ef 92       	push	r14
    7bf8:	ff 92       	push	r15
    7bfa:	0f 93       	push	r16
    7bfc:	1f 93       	push	r17
    7bfe:	cf 93       	push	r28
    7c00:	df 93       	push	r29
    7c02:	cd b7       	in	r28, 0x3d	; 61
    7c04:	de b7       	in	r29, 0x3e	; 62
    7c06:	ca 1b       	sub	r28, r26
    7c08:	db 0b       	sbc	r29, r27
    7c0a:	0f b6       	in	r0, 0x3f	; 63
    7c0c:	f8 94       	cli
    7c0e:	de bf       	out	0x3e, r29	; 62
    7c10:	0f be       	out	0x3f, r0	; 63
    7c12:	cd bf       	out	0x3d, r28	; 61
    7c14:	09 94       	ijmp

00007c16 <__epilogue_restores__>:
    7c16:	2a 88       	ldd	r2, Y+18	; 0x12
    7c18:	39 88       	ldd	r3, Y+17	; 0x11
    7c1a:	48 88       	ldd	r4, Y+16	; 0x10
    7c1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    7c1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7c20:	7d 84       	ldd	r7, Y+13	; 0x0d
    7c22:	8c 84       	ldd	r8, Y+12	; 0x0c
    7c24:	9b 84       	ldd	r9, Y+11	; 0x0b
    7c26:	aa 84       	ldd	r10, Y+10	; 0x0a
    7c28:	b9 84       	ldd	r11, Y+9	; 0x09
    7c2a:	c8 84       	ldd	r12, Y+8	; 0x08
    7c2c:	df 80       	ldd	r13, Y+7	; 0x07
    7c2e:	ee 80       	ldd	r14, Y+6	; 0x06
    7c30:	fd 80       	ldd	r15, Y+5	; 0x05
    7c32:	0c 81       	ldd	r16, Y+4	; 0x04
    7c34:	1b 81       	ldd	r17, Y+3	; 0x03
    7c36:	aa 81       	ldd	r26, Y+2	; 0x02
    7c38:	b9 81       	ldd	r27, Y+1	; 0x01
    7c3a:	ce 0f       	add	r28, r30
    7c3c:	d1 1d       	adc	r29, r1
    7c3e:	0f b6       	in	r0, 0x3f	; 63
    7c40:	f8 94       	cli
    7c42:	de bf       	out	0x3e, r29	; 62
    7c44:	0f be       	out	0x3f, r0	; 63
    7c46:	cd bf       	out	0x3d, r28	; 61
    7c48:	ed 01       	movw	r28, r26
    7c4a:	08 95       	ret

00007c4c <memcpy>:
    7c4c:	fb 01       	movw	r30, r22
    7c4e:	dc 01       	movw	r26, r24
    7c50:	02 c0       	rjmp	.+4      	; 0x7c56 <memcpy+0xa>
    7c52:	01 90       	ld	r0, Z+
    7c54:	0d 92       	st	X+, r0
    7c56:	41 50       	subi	r20, 0x01	; 1
    7c58:	50 40       	sbci	r21, 0x00	; 0
    7c5a:	d8 f7       	brcc	.-10     	; 0x7c52 <memcpy+0x6>
    7c5c:	08 95       	ret

00007c5e <memset>:
    7c5e:	dc 01       	movw	r26, r24
    7c60:	01 c0       	rjmp	.+2      	; 0x7c64 <memset+0x6>
    7c62:	6d 93       	st	X+, r22
    7c64:	41 50       	subi	r20, 0x01	; 1
    7c66:	50 40       	sbci	r21, 0x00	; 0
    7c68:	e0 f7       	brcc	.-8      	; 0x7c62 <memset+0x4>
    7c6a:	08 95       	ret

00007c6c <strncpy>:
    7c6c:	fb 01       	movw	r30, r22
    7c6e:	dc 01       	movw	r26, r24
    7c70:	41 50       	subi	r20, 0x01	; 1
    7c72:	50 40       	sbci	r21, 0x00	; 0
    7c74:	48 f0       	brcs	.+18     	; 0x7c88 <strncpy+0x1c>
    7c76:	01 90       	ld	r0, Z+
    7c78:	0d 92       	st	X+, r0
    7c7a:	00 20       	and	r0, r0
    7c7c:	c9 f7       	brne	.-14     	; 0x7c70 <strncpy+0x4>
    7c7e:	01 c0       	rjmp	.+2      	; 0x7c82 <strncpy+0x16>
    7c80:	1d 92       	st	X+, r1
    7c82:	41 50       	subi	r20, 0x01	; 1
    7c84:	50 40       	sbci	r21, 0x00	; 0
    7c86:	e0 f7       	brcc	.-8      	; 0x7c80 <strncpy+0x14>
    7c88:	08 95       	ret

00007c8a <_exit>:
    7c8a:	f8 94       	cli

00007c8c <__stop_program>:
    7c8c:	ff cf       	rjmp	.-2      	; 0x7c8c <__stop_program>
